
99.WAHSING_MACHINE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c60  08009c60  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c68  08009c68  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08009c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          00001790  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000185c  2000185c  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d659  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a08  00000000  00000000  0003d755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00041160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001688  00000000  00000000  00042958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b9e  00000000  00000000  00043fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da79  00000000  00000000  0006bb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed8df  00000000  00000000  000895f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00176ed6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e2c  00000000  00000000  00176f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a74 	.word	0x08009a74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	08009a74 	.word	0x08009a74

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <get_button>:

}


int get_button(GPIO_TypeDef *GPIO,uint16_t GPIO_PIN,uint8_t button_number)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;//현재 PIN의 상태 UC로 저장
	curr_state=HAL_GPIO_ReadPin(GPIO,GPIO_PIN);
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 fb61 	bl	8003c70 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	//pin의 상태를 uc로 return 해줌 0,1
	if(curr_state==BUTTON_PRESS&&button_status[button_number]==BUTTON_RELEASE)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <get_button+0x40>
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <get_button+0x68>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <get_button+0x40>
		//처음 Press라면 Delay로 noise 넘기기
	{
		HAL_Delay(100);//noise 지나가기를 기다림.
 80005c2:	2064      	movs	r0, #100	; 0x64
 80005c4:	f002 fcb8 	bl	8002f38 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;///다음에 눌리면 동작할 수 있게 PRESS상태
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <get_button+0x68>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e00e      	b.n	80005f2 <get_button+0x5e>
	}
	else if(curr_state==BUTTON_RELEASE&&button_status[button_number]==BUTTON_PRESS)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10a      	bne.n	80005f0 <get_button+0x5c>
 80005da:	787b      	ldrb	r3, [r7, #1]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <get_button+0x68>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <get_button+0x5c>
		//두번째 Press상태로 정상적으로 LED 점등
	{
		button_status[button_number]=BUTTON_RELEASE;//다음
 80005e4:	787b      	ldrb	r3, [r7, #1]
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <get_button+0x68>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS; // 버튼을 한번 눌렀다 뗀것으로 인정
 80005ec:	2300      	movs	r3, #0
 80005ee:	e000      	b.n	80005f2 <get_button+0x5e>
	}
	return BUTTON_RELEASE;
 80005f0:	2301      	movs	r3, #1

}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000000 	.word	0x20000000

08000600 <fnd4digit_sec_min_clock>:
uint16_t FND[4];    // FND에 쓰기 위한 값을 준비하는 변수


//감소하는 fnd4digit
void fnd4digit_sec_min_clock()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator



	if (TIM10_fnd1ms_counter >= 2)   // 2ms reached
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <fnd4digit_sec_min_clock+0xb4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	dd51      	ble.n	80006b0 <fnd4digit_sec_min_clock+0xb0>
	{
		TIM10_fnd1ms_counter=0;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <fnd4digit_sec_min_clock+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
		msec += 2;   // 2ms
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <fnd4digit_sec_min_clock+0xb8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3302      	adds	r3, #2
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <fnd4digit_sec_min_clock+0xb8>)
 800061a:	6013      	str	r3, [r2, #0]
		if(run_flag)
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <fnd4digit_sec_min_clock+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d01f      	beq.n	8000664 <fnd4digit_sec_min_clock+0x64>
		{
			if (msec > 400)   // 1000ms=1sec reached
 8000624:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <fnd4digit_sec_min_clock+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800062c:	d91a      	bls.n	8000664 <fnd4digit_sec_min_clock+0x64>
			{
				msec = 0;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <fnd4digit_sec_min_clock+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
				if(last_time>0)
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <fnd4digit_sec_min_clock+0xc0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <fnd4digit_sec_min_clock+0x46>
				{
					last_time--;       // sec count를 감소
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <fnd4digit_sec_min_clock+0xc0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3b01      	subs	r3, #1
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <fnd4digit_sec_min_clock+0xc0>)
 8000644:	6013      	str	r3, [r2, #0]
				}
				FND_update(last_time);
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <fnd4digit_sec_min_clock+0xc0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f846 	bl	80006dc <FND_update>
				CCR_REVERSE_flag=(CCR_REVERSE_flag+1)%2;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <fnd4digit_sec_min_clock+0xc4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <fnd4digit_sec_min_clock+0xc4>)
 8000662:	6013      	str	r3, [r2, #0]
			}
		}


		FND4digit_off();
 8000664:	f000 f89a 	bl	800079c <FND4digit_off>
#if 0 // common 애노우드  WCN4-
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
			HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <fnd4digit_sec_min_clock+0xcc>)
 800066e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	4816      	ldr	r0, [pc, #88]	; (80006d0 <fnd4digit_sec_min_clock+0xd0>)
 8000678:	f003 fb12 	bl	8003ca0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <fnd4digit_sec_min_clock+0xd4>)
 8000682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <fnd4digit_sec_min_clock+0xd8>)
 800068c:	f003 fb08 	bl	8003ca0 <HAL_GPIO_WritePin>
#endif
			i++;   // 다음 display할 FND를 가리킨다.
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 8000698:	6013      	str	r3, [r2, #0]
			i %= 4;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	425a      	negs	r2, r3
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	f002 0203 	and.w	r2, r2, #3
 80006a8:	bf58      	it	pl
 80006aa:	4253      	negpl	r3, r2
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <fnd4digit_sec_min_clock+0xc8>)
 80006ae:	6013      	str	r3, [r2, #0]
	}

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000b78 	.word	0x20000b78
 80006b8:	200000f4 	.word	0x200000f4
 80006bc:	20001840 	.word	0x20001840
 80006c0:	20000048 	.word	0x20000048
 80006c4:	200000e8 	.word	0x200000e8
 80006c8:	200000f8 	.word	0x200000f8
 80006cc:	20000008 	.word	0x20000008
 80006d0:	40020800 	.word	0x40020800
 80006d4:	200000ec 	.word	0x200000ec
 80006d8:	40020400 	.word	0x40020400

080006dc <FND_update>:
}


//2ms 주기로 FND 값 업데이트
void FND_update(unsigned int value)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];		  //d1값
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <FND_update+0xac>)
 80006e8:	fba3 2301 	umull	r2, r3, r3, r1
 80006ec:	08da      	lsrs	r2, r3, #3
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1aca      	subs	r2, r1, r3
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <FND_update+0xb0>)
 80006fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <FND_update+0xb4>)
 8000702:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];   //d2값
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <FND_update+0xac>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	08d9      	lsrs	r1, r3, #3
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <FND_update+0xac>)
 8000710:	fba3 2301 	umull	r2, r3, r3, r1
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	1aca      	subs	r2, r1, r3
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <FND_update+0xb0>)
 8000722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <FND_update+0xb4>)
 800072a:	805a      	strh	r2, [r3, #2]
	FND[2] = FND_font[value / 100 % 10];  //d3값
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <FND_update+0xb8>)
 8000730:	fba2 2303 	umull	r2, r3, r2, r3
 8000734:	0959      	lsrs	r1, r3, #5
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <FND_update+0xac>)
 8000738:	fba3 2301 	umull	r2, r3, r3, r1
 800073c:	08da      	lsrs	r2, r3, #3
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	1aca      	subs	r2, r1, r3
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <FND_update+0xb0>)
 800074a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <FND_update+0xb4>)
 8000752:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 1000 % 10]; //d4값
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <FND_update+0xbc>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	0999      	lsrs	r1, r3, #6
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <FND_update+0xac>)
 8000760:	fba3 2301 	umull	r2, r3, r3, r1
 8000764:	08da      	lsrs	r2, r3, #3
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	1aca      	subs	r2, r1, r3
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <FND_update+0xb0>)
 8000772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <FND_update+0xb4>)
 800077a:	80da      	strh	r2, [r3, #6]

	return;
 800077c:	bf00      	nop
}
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	cccccccd 	.word	0xcccccccd
 800078c:	20000010 	.word	0x20000010
 8000790:	200000ec 	.word	0x200000ec
 8000794:	51eb851f 	.word	0x51eb851f
 8000798:	10624dd3 	.word	0x10624dd3

0800079c <FND4digit_off>:
//아예 off
void FND4digit_off(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <FND4digit_off+0x2c>)
 80007a8:	f003 fa7a 	bl	8003ca0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <FND4digit_off+0x30>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <FND4digit_off+0x34>)
 80007be:	f003 fa6f 	bl	8003ca0 <HAL_GPIO_WritePin>
#endif
	return;
 80007c2:	bf00      	nop
}
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020800 	.word	0x40020800
 80007cc:	20000010 	.word	0x20000010
 80007d0:	40020400 	.word	0x40020400

080007d4 <lcd_command>:
	}

}

void lcd_command(uint8_t command)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f023 030f 	bic.w	r3, r3, #15
 80007e4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	f043 030c 	orr.w	r3, r3, #12
 8000806:	b2db      	uxtb	r3, r3
 8000808:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	b2db      	uxtb	r3, r3
 8000812:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000814:	bf00      	nop
 8000816:	f107 0208 	add.w	r2, r7, #8
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2304      	movs	r3, #4
 8000820:	214e      	movs	r1, #78	; 0x4e
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <lcd_command+0x64>)
 8000824:	f003 fbb4 	bl	8003f90 <HAL_I2C_Master_Transmit>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f3      	bne.n	8000816 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800082e:	bf00      	nop
}
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000324 	.word	0x20000324

0800083c <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f023 030f 	bic.w	r3, r3, #15
 800084c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f043 030d 	orr.w	r3, r3, #13
 800085a:	b2db      	uxtb	r3, r3
 800085c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f043 0309 	orr.w	r3, r3, #9
 8000864:	b2db      	uxtb	r3, r3
 8000866:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	f043 030d 	orr.w	r3, r3, #13
 800086e:	b2db      	uxtb	r3, r3
 8000870:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	f043 0309 	orr.w	r3, r3, #9
 8000878:	b2db      	uxtb	r3, r3
 800087a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800087c:	bf00      	nop
 800087e:	f107 0208 	add.w	r2, r7, #8
 8000882:	2364      	movs	r3, #100	; 0x64
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2304      	movs	r3, #4
 8000888:	214e      	movs	r1, #78	; 0x4e
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <lcd_data+0x64>)
 800088c:	f003 fb80 	bl	8003f90 <HAL_I2C_Master_Transmit>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1f3      	bne.n	800087e <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000896:	bf00      	nop
}
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000324 	.word	0x20000324

080008a4 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80008a8:	2033      	movs	r0, #51	; 0x33
 80008aa:	f7ff ff93 	bl	80007d4 <lcd_command>
	lcd_command(0x32);
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f7ff ff90 	bl	80007d4 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f7ff ff8d 	bl	80007d4 <lcd_command>
	lcd_command(DISPLAY_ON);
 80008ba:	200c      	movs	r0, #12
 80008bc:	f7ff ff8a 	bl	80007d4 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff ff87 	bl	80007d4 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ff84 	bl	80007d4 <lcd_command>
	HAL_Delay(2);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f002 fb33 	bl	8002f38 <HAL_Delay>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	while(*str)//글자가 \0(NULL)일 때까지
 80008de:	e006      	b.n	80008ee <lcd_string+0x18>
	{
		lcd_data(*str++);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffa7 	bl	800083c <lcd_data>
	while(*str)//글자가 \0(NULL)일 때까지
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f4      	bne.n	80008e0 <lcd_string+0xa>
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	019b      	lsls	r3, r3, #6
 8000914:	b2da      	uxtb	r2, r3
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	4313      	orrs	r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff56 	bl	80007d4 <lcd_command>
	return;
 8000928:	bf00      	nop
}
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <HAL_SYSTICK_Handler>:
//call by SYSTICK_Handler of stm32f4xx_it.c
//Default Timer provided by ARM
//enter here every 1ms
volatile int t1ms_counter=0; //volatile: for disable optimize
void HAL_SYSTICK_Handler(void)//interrupt handler
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	t1ms_counter++;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_SYSTICK_Handler+0x2c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_SYSTICK_Handler+0x2c>)
 800093c:	6013      	str	r3, [r2, #0]
	if(power_on_flag)
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_SYSTICK_Handler+0x30>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d004      	beq.n	8000950 <HAL_SYSTICK_Handler+0x20>
	{

		TIM10_fnd1ms_counter++;  // fnd1ms
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_SYSTICK_Handler+0x34>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <HAL_SYSTICK_Handler+0x34>)
 800094e:	6013      	str	r3, [r2, #0]
	}
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000b7c 	.word	0x20000b7c
 8000960:	20001830 	.word	0x20001830
 8000964:	20000b78 	.word	0x20000b78

08000968 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000970:	1d39      	adds	r1, r7, #4
 8000972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000976:	2201      	movs	r2, #1
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <__io_putchar+0x20>)
 800097a:	f006 fca6 	bl	80072ca <HAL_UART_Transmit>

  return ch;
 800097e:	687b      	ldr	r3, [r7, #4]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200005d8 	.word	0x200005d8

0800098c <HAL_TIM_PeriodElapsedCallback>:

//--------------------TIM10 START------------------
//from Driver/stm32f4xx_hal_tim.c -> HAL_TIM_PeriodElapsedCallback() function
//enter here when every timer INT occurs
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM10)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d109      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM10_10ms_counter++;//10ms for 1 increase
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009a6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_ultrasonic++;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009b0:	6013      	str	r3, [r2, #0]
		{
			second_count--;
		}
	}
	*/
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40014400 	.word	0x40014400
 80009c4:	20000b70 	.word	0x20000b70
 80009c8:	20000b74 	.word	0x20000b74

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f002 fa40 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f84a 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 fc78 	bl	80012cc <MX_GPIO_Init>
  MX_ETH_Init();
 80009dc:	f000 f8b2 	bl	8000b44 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 fbf2 	bl	80011c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e4:	f000 fc44 	bl	8001270 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 80009e8:	f000 fc18 	bl	800121c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80009ec:	f000 fb80 	bl	80010f0 <MX_TIM10_Init>
  MX_TIM11_Init();
 80009f0:	f000 fba2 	bl	8001138 <MX_TIM11_Init>
  MX_TIM3_Init();
 80009f4:	f000 fa06 	bl	8000e04 <MX_TIM3_Init>
  MX_I2C1_Init();
 80009f8:	f000 f8f2 	bl	8000be0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80009fc:	f000 fa56 	bl	8000eac <MX_TIM4_Init>
  MX_TIM2_Init();
 8000a00:	f000 f988 	bl	8000d14 <MX_TIM2_Init>
  MX_RTC_Init();
 8000a04:	f000 f92c 	bl	8000c60 <MX_RTC_Init>
  MX_TIM5_Init();
 8000a08:	f000 fac6 	bl	8000f98 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a0c:	f000 fb3a 	bl	8001084 <MX_TIM6_Init>
  MX_TIM13_Init();
 8000a10:	f000 fbb6 	bl	8001180 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);//uart3(UART), To save char when interrupt occur  , 1Byte
 8000a14:	2201      	movs	r2, #1
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <main+0x80>)
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <main+0x84>)
 8000a1a:	f006 fce8 	bl	80073ee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);//uart6(BT),To save char when interrupt occur, 1Byte
 8000a1e:	2201      	movs	r2, #1
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <main+0x88>)
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <main+0x8c>)
 8000a24:	f006 fce3 	bl	80073ee <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);// Timer10, INT initialize
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <main+0x90>)
 8000a2a:	f005 f82d 	bl	8005a88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);// Timer11, INT initialize
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <main+0x94>)
 8000a30:	f005 f82a 	bl	8005a88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);// for count pulse  /  timer3 will detect both rising and falling edge
 8000a34:	2100      	movs	r1, #0
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <main+0x98>)
 8000a38:	f005 fa78 	bl	8005f2c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);	//for servo motor PWM control
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480a      	ldr	r0, [pc, #40]	; (8000a68 <main+0x9c>)
 8000a40:	f005 f8ec 	bl	8005c1c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  washing_machine_processing();
 8000a44:	f002 f99a 	bl	8002d7c <washing_machine_processing>
 8000a48:	e7fc      	b.n	8000a44 <main+0x78>
 8000a4a:	bf00      	nop
 8000a4c:	20000b6c 	.word	0x20000b6c
 8000a50:	200005d8 	.word	0x200005d8
 8000a54:	20000b6d 	.word	0x20000b6d
 8000a58:	2000061c 	.word	0x2000061c
 8000a5c:	20000500 	.word	0x20000500
 8000a60:	20000548 	.word	0x20000548
 8000a64:	200003e0 	.word	0x200003e0
 8000a68:	20000398 	.word	0x20000398

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 ff7c 	bl	8008978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <SystemClock_Config+0xd0>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <SystemClock_Config+0xd0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <SystemClock_Config+0xd4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <SystemClock_Config+0xd4>)
 8000ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <SystemClock_Config+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ac8:	2309      	movs	r3, #9
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000acc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	; 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 feeb 	bl	80048d0 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b00:	f000 fd34 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 f94c 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b2e:	f000 fd1d 	bl	800156c <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b5c:	22e1      	movs	r2, #225	; 0xe1
 8000b5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b7e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <MX_ETH_Init+0x90>)
 8000b84:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000b8a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b92:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b96:	f002 fb97 	bl	80032c8 <HAL_ETH_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ba0:	f000 fce4 	bl	800156c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ba4:	2238      	movs	r2, #56	; 0x38
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_ETH_Init+0x98>)
 8000baa:	f007 fee5 	bl	8008978 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_ETH_Init+0x98>)
 8000bb0:	2221      	movs	r2, #33	; 0x21
 8000bb2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_ETH_Init+0x98>)
 8000bb6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000bba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_ETH_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000274 	.word	0x20000274
 8000bcc:	40028000 	.word	0x40028000
 8000bd0:	20000b80 	.word	0x20000b80
 8000bd4:	200001d4 	.word	0x200001d4
 8000bd8:	20000134 	.word	0x20000134
 8000bdc:	200000fc 	.word	0x200000fc

08000be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_I2C1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c1e:	f003 f873 	bl	8003d08 <HAL_I2C_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c28:	f000 fca0 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c30:	f003 fcb5 	bl	800459e <HAL_I2CEx_ConfigAnalogFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c3a:	f000 fc97 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c42:	f003 fce8 	bl	8004616 <HAL_I2CEx_ConfigDigitalFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c4c:	f000 fc8e 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000324 	.word	0x20000324
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	000186a0 	.word	0x000186a0

08000c60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <MX_RTC_Init+0xb0>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c86:	227f      	movs	r2, #127	; 0x7f
 8000c88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_RTC_Init+0xac>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca2:	481a      	ldr	r0, [pc, #104]	; (8000d0c <MX_RTC_Init+0xac>)
 8000ca4:	f004 fc6c 	bl	8005580 <HAL_RTC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cae:	f000 fc5d 	bl	800156c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000cb2:	2309      	movs	r3, #9
 8000cb4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x10;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <MX_RTC_Init+0xac>)
 8000cce:	f004 fccd 	bl	800566c <HAL_RTC_SetTime>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000cd8:	f000 fc48 	bl	800156c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000ce4:	2316      	movs	r3, #22
 8000ce6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000ce8:	2323      	movs	r3, #35	; 0x23
 8000cea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_RTC_Init+0xac>)
 8000cf4:	f004 fd54 	bl	80057a0 <HAL_RTC_SetDate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000cfe:	f000 fc35 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000378 	.word	0x20000378
 8000d10:	40002800 	.word	0x40002800

08000d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d4e:	f240 628f 	movw	r2, #1679	; 0x68f
 8000d52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d5a:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6e:	4824      	ldr	r0, [pc, #144]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d70:	f004 fe3b 	bl	80059ea <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d7a:	f000 fbf7 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481d      	ldr	r0, [pc, #116]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d8c:	f005 fc5c 	bl	8006648 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d96:	f000 fbe9 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d9a:	4819      	ldr	r0, [pc, #100]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000d9c:	f004 fee4 	bl	8005b68 <HAL_TIM_PWM_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000da6:	f000 fbe1 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4619      	mov	r1, r3
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000dba:	f006 f9a9 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 fbd2 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	; 0x60
 8000dca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000dcc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000dd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000de2:	f005 fb6f 	bl	80064c4 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000dec:	f000 fbbe 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM2_Init+0xec>)
 8000df2:	f000 fe43 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000398 	.word	0x20000398

08000e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_TIM3_Init+0xa4>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e28:	2253      	movs	r2, #83	; 0x53
 8000e2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e48:	f005 f820 	bl	8005e8c <HAL_TIM_IC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 fb8b 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e66:	f006 f953 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e70:	f000 fb7c 	bl	800156c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e74:	230a      	movs	r3, #10
 8000e76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM3_Init+0xa0>)
 8000e8c:	f005 fa7e 	bl	800638c <HAL_TIM_IC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e96:	f000 fb69 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200003e0 	.word	0x200003e0
 8000ea8:	40000400 	.word	0x40000400

08000eac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <MX_TIM4_Init+0xe8>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000ee4:	f240 3247 	movw	r2, #839	; 0x347
 8000ee8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000ef2:	2263      	movs	r2, #99	; 0x63
 8000ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f04:	f004 fd71 	bl	80059ea <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f0e:	f000 fb2d 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f20:	f005 fb92 	bl	8006648 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 fb1f 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f2e:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f30:	f004 fe1a 	bl	8005b68 <HAL_TIM_PWM_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fb17 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f4e:	f006 f8df 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f58:	f000 fb08 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	; 0x60
 8000f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8000f60:	2345      	movs	r3, #69	; 0x45
 8000f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f74:	f005 faa6 	bl	80064c4 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 faf5 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM4_Init+0xe4>)
 8000f84:	f000 fd7a 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3738      	adds	r7, #56	; 0x38
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000428 	.word	0x20000428
 8000f94:	40000800 	.word	0x40000800

08000f98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fca:	4a2d      	ldr	r2, [pc, #180]	; (8001080 <MX_TIM5_Init+0xe8>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fd0:	2233      	movs	r2, #51	; 0x33
 8000fd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fdc:	f240 128f 	movw	r2, #399	; 0x18f
 8000fe0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_TIM5_Init+0xe4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fee:	4823      	ldr	r0, [pc, #140]	; (800107c <MX_TIM5_Init+0xe4>)
 8000ff0:	f004 fcfb 	bl	80059ea <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000ffa:	f000 fab7 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001008:	4619      	mov	r1, r3
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <MX_TIM5_Init+0xe4>)
 800100c:	f005 fb1c 	bl	8006648 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001016:	f000 faa9 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <MX_TIM5_Init+0xe4>)
 800101c:	f004 fda4 	bl	8005b68 <HAL_TIM_PWM_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001026:	f000 faa1 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4619      	mov	r1, r3
 8001038:	4810      	ldr	r0, [pc, #64]	; (800107c <MX_TIM5_Init+0xe4>)
 800103a:	f006 f869 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001044:	f000 fa92 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800104c:	23c7      	movs	r3, #199	; 0xc7
 800104e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	220c      	movs	r2, #12
 800105c:	4619      	mov	r1, r3
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <MX_TIM5_Init+0xe4>)
 8001060:	f005 fa30 	bl	80064c4 <HAL_TIM_PWM_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800106a:	f000 fa7f 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <MX_TIM5_Init+0xe4>)
 8001070:	f000 fd04 	bl	8001a7c <HAL_TIM_MspPostInit>

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000470 	.word	0x20000470
 8001080:	40000c00 	.word	0x40000c00

08001084 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_TIM6_Init+0x64>)
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <MX_TIM6_Init+0x68>)
 8001096:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_TIM6_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_TIM6_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_TIM6_Init+0x64>)
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_TIM6_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_TIM6_Init+0x64>)
 80010b4:	f004 fc99 	bl	80059ea <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80010be:	f000 fa55 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_TIM6_Init+0x64>)
 80010d0:	f006 f81e 	bl	8007110 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80010da:	f000 fa47 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200004b8 	.word	0x200004b8
 80010ec:	40001000 	.word	0x40001000

080010f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_TIM10_Init+0x40>)
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MX_TIM10_Init+0x44>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_TIM10_Init+0x40>)
 80010fc:	22a7      	movs	r2, #167	; 0xa7
 80010fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_TIM10_Init+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_TIM10_Init+0x40>)
 8001108:	f242 720f 	movw	r2, #9999	; 0x270f
 800110c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_TIM10_Init+0x40>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_TIM10_Init+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM10_Init+0x40>)
 800111c:	f004 fc65 	bl	80059ea <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001126:	f000 fa21 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000500 	.word	0x20000500
 8001134:	40014400 	.word	0x40014400

08001138 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_TIM11_Init+0x40>)
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <MX_TIM11_Init+0x44>)
 8001140:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_TIM11_Init+0x40>)
 8001144:	22a7      	movs	r2, #167	; 0xa7
 8001146:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_TIM11_Init+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_TIM11_Init+0x40>)
 8001150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001154:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_TIM11_Init+0x40>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_TIM11_Init+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_TIM11_Init+0x40>)
 8001164:	f004 fc41 	bl	80059ea <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800116e:	f000 f9fd 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000548 	.word	0x20000548
 800117c:	40014800 	.word	0x40014800

08001180 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_TIM13_Init+0x40>)
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <MX_TIM13_Init+0x44>)
 8001188:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <MX_TIM13_Init+0x40>)
 800118c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001190:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_TIM13_Init+0x40>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_TIM13_Init+0x40>)
 800119a:	f242 720f 	movw	r2, #9999	; 0x270f
 800119e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <MX_TIM13_Init+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_TIM13_Init+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <MX_TIM13_Init+0x40>)
 80011ae:	f004 fc1c 	bl	80059ea <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80011b8:	f000 f9d8 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000590 	.word	0x20000590
 80011c4:	40001c00 	.word	0x40001c00

080011c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_USART3_UART_Init+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_USART3_UART_Init+0x4c>)
 8001200:	f006 f816 	bl	8007230 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800120a:	f000 f9af 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200005d8 	.word	0x200005d8
 8001218:	40004800 	.word	0x40004800

0800121c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART6_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800122c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART6_UART_Init+0x4c>)
 8001254:	f005 ffec 	bl	8007230 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f985 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000061c 	.word	0x2000061c
 800126c:	40011400 	.word	0x40011400

08001270 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800127a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127e:	2204      	movs	r2, #4
 8001280:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001284:	2202      	movs	r2, #2
 8001286:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001290:	2202      	movs	r2, #2
 8001292:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001296:	2201      	movs	r2, #1
 8001298:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b4:	f003 f9ee 	bl	8004694 <HAL_PCD_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f955 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000660 	.word	0x20000660

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
 80012e6:	4b99      	ldr	r3, [pc, #612]	; (800154c <MX_GPIO_Init+0x280>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a98      	ldr	r2, [pc, #608]	; (800154c <MX_GPIO_Init+0x280>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b96      	ldr	r3, [pc, #600]	; (800154c <MX_GPIO_Init+0x280>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	4b92      	ldr	r3, [pc, #584]	; (800154c <MX_GPIO_Init+0x280>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a91      	ldr	r2, [pc, #580]	; (800154c <MX_GPIO_Init+0x280>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b8f      	ldr	r3, [pc, #572]	; (800154c <MX_GPIO_Init+0x280>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <MX_GPIO_Init+0x280>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a8a      	ldr	r2, [pc, #552]	; (800154c <MX_GPIO_Init+0x280>)
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <MX_GPIO_Init+0x280>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b84      	ldr	r3, [pc, #528]	; (800154c <MX_GPIO_Init+0x280>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a83      	ldr	r2, [pc, #524]	; (800154c <MX_GPIO_Init+0x280>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <MX_GPIO_Init+0x280>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b7d      	ldr	r3, [pc, #500]	; (800154c <MX_GPIO_Init+0x280>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a7c      	ldr	r2, [pc, #496]	; (800154c <MX_GPIO_Init+0x280>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <MX_GPIO_Init+0x280>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <MX_GPIO_Init+0x280>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a75      	ldr	r2, [pc, #468]	; (800154c <MX_GPIO_Init+0x280>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <MX_GPIO_Init+0x280>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <MX_GPIO_Init+0x280>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <MX_GPIO_Init+0x280>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <MX_GPIO_Init+0x280>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <MX_GPIO_Init+0x280>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a67      	ldr	r2, [pc, #412]	; (800154c <MX_GPIO_Init+0x280>)
 80013b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <MX_GPIO_Init+0x280>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin|IN1_DCMOTOR_Pin
 80013c2:	2200      	movs	r2, #0
 80013c4:	f242 3168 	movw	r1, #9064	; 0x2368
 80013c8:	4861      	ldr	r0, [pc, #388]	; (8001550 <MX_GPIO_Init+0x284>)
 80013ca:	f002 fc69 	bl	8003ca0 <HAL_GPIO_WritePin>
                          |IN1_DCMOTORE9_Pin|FAN_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2101      	movs	r1, #1
 80013d2:	4860      	ldr	r0, [pc, #384]	; (8001554 <MX_GPIO_Init+0x288>)
 80013d4:	f002 fc64 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 80013d8:	2200      	movs	r2, #0
 80013da:	f644 41ff 	movw	r1, #19711	; 0x4cff
 80013de:	485e      	ldr	r0, [pc, #376]	; (8001558 <MX_GPIO_Init+0x28c>)
 80013e0:	f002 fc5e 	bl	8003ca0 <HAL_GPIO_WritePin>
                          |FND_DP_Pin|LD3_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIG_GPIO_Port, ULTRASONIC_TRIG_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ea:	485c      	ldr	r0, [pc, #368]	; (800155c <MX_GPIO_Init+0x290>)
 80013ec:	f002 fc58 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	485a      	ldr	r0, [pc, #360]	; (8001560 <MX_GPIO_Init+0x294>)
 80013f6:	f002 fc53 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001400:	4858      	ldr	r0, [pc, #352]	; (8001564 <MX_GPIO_Init+0x298>)
 8001402:	f002 fc4d 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001406:	2200      	movs	r2, #0
 8001408:	21ff      	movs	r1, #255	; 0xff
 800140a:	4857      	ldr	r0, [pc, #348]	; (8001568 <MX_GPIO_Init+0x29c>)
 800140c:	f002 fc48 	bl	8003ca0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin IN1_DCMOTOR_Pin
                           IN1_DCMOTORE9_Pin FAN_LED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin|IN1_DCMOTOR_Pin
 8001410:	f242 3368 	movw	r3, #9064	; 0x2368
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN1_DCMOTORE9_Pin|FAN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4849      	ldr	r0, [pc, #292]	; (8001550 <MX_GPIO_Init+0x284>)
 800142a:	f002 fa75 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4847      	ldr	r0, [pc, #284]	; (8001564 <MX_GPIO_Init+0x298>)
 8001446:	f002 fa67 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_5_Pin BUTTON_6_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_5_Pin|BUTTON_6_Pin;
 800144a:	2307      	movs	r3, #7
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	483f      	ldr	r0, [pc, #252]	; (800155c <MX_GPIO_Init+0x290>)
 800145e:	f002 fa5b 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4836      	ldr	r0, [pc, #216]	; (8001554 <MX_GPIO_Init+0x288>)
 800147a:	f002 fa4d 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           FND_DP_Pin LD3_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 800147e:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND_DP_Pin|LD3_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	4830      	ldr	r0, [pc, #192]	; (8001558 <MX_GPIO_Init+0x28c>)
 8001498:	f002 fa3e 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIG_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIG_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4829      	ldr	r0, [pc, #164]	; (800155c <MX_GPIO_Init+0x290>)
 80014b6:	f002 fa2f 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin|BUTTON_0_Pin;
 80014ba:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4820      	ldr	r0, [pc, #128]	; (8001550 <MX_GPIO_Init+0x284>)
 80014d0:	f002 fa22 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <MX_GPIO_Init+0x294>)
 80014ec:	f002 fa14 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <MX_GPIO_Init+0x294>)
 8001504:	f002 fa08 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 8001508:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <MX_GPIO_Init+0x298>)
 8001522:	f002 f9f9 	bl	8003918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001526:	23ff      	movs	r3, #255	; 0xff
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <MX_GPIO_Init+0x29c>)
 800153e:	f002 f9eb 	bl	8003918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	; 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40021000 	.word	0x40021000
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40021400 	.word	0x40021400
 8001560:	40021800 	.word	0x40021800
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a55      	ldr	r2, [pc, #340]	; (800173c <HAL_ETH_MspInit+0x174>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	f040 80a4 	bne.w	8001734 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_ETH_MspInit+0x178>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_ETH_MspInit+0x178>)
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fa:	6313      	str	r3, [r2, #48]	; 0x30
 80015fc:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_ETH_MspInit+0x178>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a44      	ldr	r2, [pc, #272]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800162e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b42      	ldr	r3, [pc, #264]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	4a36      	ldr	r2, [pc, #216]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6313      	str	r3, [r2, #48]	; 0x30
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_ETH_MspInit+0x178>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_ETH_MspInit+0x178>)
 800169e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_ETH_MspInit+0x178>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016b0:	2332      	movs	r3, #50	; 0x32
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c0:	230b      	movs	r3, #11
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <HAL_ETH_MspInit+0x17c>)
 80016cc:	f002 f924 	bl	8003918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016d0:	2386      	movs	r3, #134	; 0x86
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e0:	230b      	movs	r3, #11
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <HAL_ETH_MspInit+0x180>)
 80016ec:	f002 f914 	bl	8003918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001702:	230b      	movs	r3, #11
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <HAL_ETH_MspInit+0x184>)
 800170e:	f002 f903 	bl	8003918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001712:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001724:	230b      	movs	r3, #11
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_ETH_MspInit+0x188>)
 8001730:	f002 f8f2 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40028000 	.word	0x40028000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020800 	.word	0x40020800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40021800 	.word	0x40021800

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_I2C_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a4:	2304      	movs	r3, #4
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <HAL_I2C_MspInit+0x8c>)
 80017b0:	f002 f8b2 	bl	8003918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_I2C_MspInit+0x88>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400

080017e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2230      	movs	r2, #48	; 0x30
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 f8bf 	bl	8008978 <memset>
  if(hrtc->Instance==RTC)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_RTC_MspInit+0x4c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001804:	2320      	movs	r3, #32
 8001806:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fcf4 	bl	8005200 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800181e:	f7ff fea5 	bl	800156c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_RTC_MspInit+0x50>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3738      	adds	r7, #56	; 0x38
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40002800 	.word	0x40002800
 8001834:	42470e3c 	.word	0x42470e3c

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d116      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f001 fc63 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f001 fc7c 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001876:	e09e      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_TIM_Base_MspInit+0x18c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d116      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201e      	movs	r0, #30
 80018a4:	f001 fc47 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018a8:	201e      	movs	r0, #30
 80018aa:	f001 fc60 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 80018ae:	e082      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM5)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <HAL_TIM_Base_MspInit+0x190>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d116      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2032      	movs	r0, #50	; 0x32
 80018dc:	f001 fc2b 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018e0:	2032      	movs	r0, #50	; 0x32
 80018e2:	f001 fc44 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 80018e6:	e066      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM6)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a37      	ldr	r2, [pc, #220]	; (80019cc <HAL_TIM_Base_MspInit+0x194>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	e052      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM10)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_TIM_Base_MspInit+0x198>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d116      	bne.n	8001948 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2019      	movs	r0, #25
 800193c:	f001 fbfb 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001940:	2019      	movs	r0, #25
 8001942:	f001 fc14 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8001946:	e036      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM11)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <HAL_TIM_Base_MspInit+0x19c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d116      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	201a      	movs	r0, #26
 8001974:	f001 fbdf 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001978:	201a      	movs	r0, #26
 800197a:	f001 fbf8 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 800197e:	e01a      	b.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM13)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d115      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x188>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	202c      	movs	r0, #44	; 0x2c
 80019ac:	f001 fbc3 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80019b0:	202c      	movs	r0, #44	; 0x2c
 80019b2:	f001 fbdc 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40000800 	.word	0x40000800
 80019c8:	40000c00 	.word	0x40000c00
 80019cc:	40001000 	.word	0x40001000
 80019d0:	40014400 	.word	0x40014400
 80019d4:	40014800 	.word	0x40014800
 80019d8:	40001c00 	.word	0x40001c00

080019dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_TIM_IC_MspInit+0x94>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d133      	bne.n	8001a66 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_TIM_IC_MspInit+0x98>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001a36:	2340      	movs	r3, #64	; 0x40
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a46:	2302      	movs	r3, #2
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <HAL_TIM_IC_MspInit+0x9c>)
 8001a52:	f001 ff61 	bl	8003918 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201d      	movs	r0, #29
 8001a5c:	f001 fb6b 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a60:	201d      	movs	r0, #29
 8001a62:	f001 fb84 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d11e      	bne.n	8001adc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8001aba:	2320      	movs	r3, #32
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aca:	2301      	movs	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4828      	ldr	r0, [pc, #160]	; (8001b78 <HAL_TIM_MspPostInit+0xfc>)
 8001ad6:	f001 ff1f 	bl	8003918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ada:	e047      	b.n	8001b6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_TIM_MspPostInit+0x100>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11f      	bne.n	8001b26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b14:	2302      	movs	r3, #2
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4818      	ldr	r0, [pc, #96]	; (8001b80 <HAL_TIM_MspPostInit+0x104>)
 8001b20:	f001 fefa 	bl	8003918 <HAL_GPIO_Init>
}
 8001b24:	e022      	b.n	8001b6c <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <HAL_TIM_MspPostInit+0x108>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d11d      	bne.n	8001b6c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_TIM_MspPostInit+0xf8>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <HAL_TIM_MspPostInit+0xfc>)
 8001b68:	f001 fed6 	bl	8003918 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40000c00 	.word	0x40000c00

08001b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <HAL_UART_MspInit+0x108>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d135      	bne.n	8001c16 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4826      	ldr	r0, [pc, #152]	; (8001c98 <HAL_UART_MspInit+0x110>)
 8001c00:	f001 fe8a 	bl	8003918 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2027      	movs	r0, #39	; 0x27
 8001c0a:	f001 fa94 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c0e:	2027      	movs	r0, #39	; 0x27
 8001c10:	f001 faad 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c14:	e038      	b.n	8001c88 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_UART_MspInit+0x114>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d133      	bne.n	8001c88 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c2a:	f043 0320 	orr.w	r3, r3, #32
 8001c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_UART_MspInit+0x10c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <HAL_UART_MspInit+0x118>)
 8001c74:	f001 fe50 	bl	8003918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2047      	movs	r0, #71	; 0x47
 8001c7e:	f001 fa5a 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c82:	2047      	movs	r0, #71	; 0x47
 8001c84:	f001 fa73 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40004800 	.word	0x40004800
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40011400 	.word	0x40011400
 8001ca0:	40020800 	.word	0x40020800

08001ca4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc4:	d13f      	bne.n	8001d46 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ce2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <HAL_PCD_MspInit+0xb0>)
 8001d00:	f001 fe0a 	bl	8003918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	480e      	ldr	r0, [pc, #56]	; (8001d54 <HAL_PCD_MspInit+0xb0>)
 8001d1a:	f001 fdfd 	bl	8003918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	6353      	str	r3, [r2, #52]	; 0x34
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_PCD_MspInit+0xac>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f001 f8a8 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();//INTERRUPT HANDLER //ADD_CMWOO_231006
 8001da8:	f7fe fdc2 	bl	8000930 <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001db6:	f004 f9e1 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000500 	.word	0x20000500

08001dc4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001dca:	f004 f9d7 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000548 	.word	0x20000548

08001dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM2_IRQHandler+0x10>)
 8001dde:	f004 f9cd 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000398 	.word	0x20000398

08001dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM3_IRQHandler+0x10>)
 8001df2:	f004 f9c3 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200003e0 	.word	0x200003e0

08001e00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM4_IRQHandler+0x10>)
 8001e06:	f004 f9b9 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000428 	.word	0x20000428

08001e14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <USART3_IRQHandler+0x10>)
 8001e1a:	f005 fb19 	bl	8007450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200005d8 	.word	0x200005d8

08001e28 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e2e:	f004 f9a5 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000590 	.word	0x20000590

08001e3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM5_IRQHandler+0x10>)
 8001e42:	f004 f99b 	bl	800617c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000470 	.word	0x20000470

08001e50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART6_IRQHandler+0x10>)
 8001e56:	f005 fafb 	bl	8007450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000061c 	.word	0x2000061c

08001e64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e00a      	b.n	8001e8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e76:	f3af 8000 	nop.w
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbf0      	blt.n	8001e76 <_read+0x12>
  }

  return len;
 8001e94:	687b      	ldr	r3, [r7, #4]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e009      	b.n	8001ec4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fd55 	bl	8000968 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbf1      	blt.n	8001eb0 <_write+0x12>
  }
  return len;
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_close>:

int _close(int file)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efe:	605a      	str	r2, [r3, #4]
  return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_isatty>:

int _isatty(int file)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f006 fcd8 	bl	8008924 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20030000 	.word	0x20030000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	20000b88 	.word	0x20000b88
 8001fa8:	20001860 	.word	0x20001860

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <HAL_UART_RxCpltCallback>:
volatile int bt_rear=0;
//volatile int bt_newline_detect_flag=0;	//newline 만났는지 체크하는 flag
volatile int bt_front=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	if(huart==&huart3)//comport master와 연결된 huart3번인지 체크(UART)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d164      	bne.n	80020aa <HAL_UART_RxCpltCallback+0xda>
	{

		if(((rear+1)%BUFFER_NUM)!=front)
 8001fe0:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	4b69      	ldr	r3, [pc, #420]	; (800218c <HAL_UART_RxCpltCallback+0x1bc>)
 8001fe8:	fb83 2301 	smull	r2, r3, r3, r1
 8001fec:	111a      	asrs	r2, r3, #4
 8001fee:	17cb      	asrs	r3, r1, #31
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1aca      	subs	r2, r1, r3
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <HAL_UART_RxCpltCallback+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d04a      	beq.n	800209a <HAL_UART_RxCpltCallback+0xca>
		{
			if(rx_index<COMMAND_LENGTH)//rx_buff가 꽉차지 않았다면 즉 현재까지 들어온 데이터가 40바이트 아래라면
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b27      	cmp	r3, #39	; 0x27
 800200a:	dc3f      	bgt.n	800208c <HAL_UART_RxCpltCallback+0xbc>
			{
				if(rx_data == '\n' || rx_data == '\r')//Unix(\r)와 Linux(\n)의 차이
 800200c:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_UART_RxCpltCallback+0x1c8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b0a      	cmp	r3, #10
 8002012:	d003      	beq.n	800201c <HAL_UART_RxCpltCallback+0x4c>
 8002014:	4b60      	ldr	r3, [pc, #384]	; (8002198 <HAL_UART_RxCpltCallback+0x1c8>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b0d      	cmp	r3, #13
 800201a:	d124      	bne.n	8002066 <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[rear][rx_index]=0;//'\0'를 넣어줌
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	485d      	ldr	r0, [pc, #372]	; (800219c <HAL_UART_RxCpltCallback+0x1cc>)
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4403      	add	r3, r0
 8002030:	440b      	add	r3, r1
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
					rx_index=0;	//다음 message 저장을 위해 rx_index값을 0으로 초기화
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
					rear++;
 800203c:	4b52      	ldr	r3, [pc, #328]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a51      	ldr	r2, [pc, #324]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 8002044:	6013      	str	r3, [r2, #0]
					rear %= BUFFER_NUM;
 8002046:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_UART_RxCpltCallback+0x1bc>)
 800204c:	fb83 2301 	smull	r2, r3, r3, r1
 8002050:	111a      	asrs	r2, r3, #4
 8002052:	17cb      	asrs	r3, r1, #31
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1aca      	subs	r2, r1, r3
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e01c      	b.n	80020a0 <HAL_UART_RxCpltCallback+0xd0>
				}
				else
				{
					rx_buff[rear][rx_index++]=rx_data;//rx_buff의 rx_index번방에 rx_data 1바이트 넣어줌
 8002066:	4b48      	ldr	r3, [pc, #288]	; (8002188 <HAL_UART_RxCpltCallback+0x1b8>)
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	1c53      	adds	r3, r2, #1
 8002070:	4848      	ldr	r0, [pc, #288]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 8002072:	6003      	str	r3, [r0, #0]
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_UART_RxCpltCallback+0x1c8>)
 8002076:	781c      	ldrb	r4, [r3, #0]
 8002078:	4848      	ldr	r0, [pc, #288]	; (800219c <HAL_UART_RxCpltCallback+0x1cc>)
 800207a:	460b      	mov	r3, r1
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4403      	add	r3, r0
 8002084:	4413      	add	r3, r2
 8002086:	4622      	mov	r2, r4
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e009      	b.n	80020a0 <HAL_UART_RxCpltCallback+0xd0>
				}
			}
			else
			{
				rx_index=0;
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
				printf("Message Overflow!!!\n");
 8002092:	4843      	ldr	r0, [pc, #268]	; (80021a0 <HAL_UART_RxCpltCallback+0x1d0>)
 8002094:	f006 fce6 	bl	8008a64 <puts>
 8002098:	e002      	b.n	80020a0 <HAL_UART_RxCpltCallback+0xd0>
			}
		}
		else
		{
			printf("Buffer Overflow!!!\n");
 800209a:	4842      	ldr	r0, [pc, #264]	; (80021a4 <HAL_UART_RxCpltCallback+0x1d4>)
 800209c:	f006 fce2 	bl	8008a64 <puts>
		}

		//주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);//다음 INT 받을 준비.
 80020a0:	2201      	movs	r2, #1
 80020a2:	493d      	ldr	r1, [pc, #244]	; (8002198 <HAL_UART_RxCpltCallback+0x1c8>)
 80020a4:	4837      	ldr	r0, [pc, #220]	; (8002184 <HAL_UART_RxCpltCallback+0x1b4>)
 80020a6:	f005 f9a2 	bl	80073ee <HAL_UART_Receive_IT>
	}

	if(huart==&huart6)//comport master와 연결된 huart6번인지 체크(BT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a3e      	ldr	r2, [pc, #248]	; (80021a8 <HAL_UART_RxCpltCallback+0x1d8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d164      	bne.n	800217c <HAL_UART_RxCpltCallback+0x1ac>
		{

		if(((bt_rear+1)%BUFFER_NUM)!=bt_front)
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_UART_RxCpltCallback+0x1bc>)
 80020ba:	fb83 2301 	smull	r2, r3, r3, r1
 80020be:	111a      	asrs	r2, r3, #4
 80020c0:	17cb      	asrs	r3, r1, #31
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1aca      	subs	r2, r1, r3
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_UART_RxCpltCallback+0x1e0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d04a      	beq.n	800216c <HAL_UART_RxCpltCallback+0x19c>
		{
			if(bt_rx_index<COMMAND_LENGTH)//rx_buff가 꽉차지 않았다면 즉 현재까지 들어온 데이터가 40바이트 아래라면
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_UART_RxCpltCallback+0x1e4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b27      	cmp	r3, #39	; 0x27
 80020dc:	dc3f      	bgt.n	800215e <HAL_UART_RxCpltCallback+0x18e>
			{
				if(bt_rx_data == '\n' || bt_rx_data == '\r')//Unix(\r)와 Linux(\n)의 차이
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_UART_RxCpltCallback+0x1e8>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d003      	beq.n	80020ee <HAL_UART_RxCpltCallback+0x11e>
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_UART_RxCpltCallback+0x1e8>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b0d      	cmp	r3, #13
 80020ec:	d124      	bne.n	8002138 <HAL_UART_RxCpltCallback+0x168>
				{
					bt_rx_buff[bt_rear][bt_rx_index]=0;//'\0'를 넣어줌
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_UART_RxCpltCallback+0x1e4>)
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	4831      	ldr	r0, [pc, #196]	; (80021bc <HAL_UART_RxCpltCallback+0x1ec>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4403      	add	r3, r0
 8002102:	440b      	add	r3, r1
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
					bt_rx_index=0;	//다음 message 저장을 위해 rx_index값을 0으로 초기화
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_UART_RxCpltCallback+0x1e4>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
					bt_rear++;
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 8002116:	6013      	str	r3, [r2, #0]
					bt_rear %= BUFFER_NUM;
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_UART_RxCpltCallback+0x1bc>)
 800211e:	fb83 2301 	smull	r2, r3, r3, r1
 8002122:	111a      	asrs	r2, r3, #4
 8002124:	17cb      	asrs	r3, r1, #31
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1aca      	subs	r2, r1, r3
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e01c      	b.n	8002172 <HAL_UART_RxCpltCallback+0x1a2>
				}
				else
				{
					bt_rx_buff[bt_rear][rx_index++]=bt_rx_data;//rx_buff의 rx_index번방에 rx_data 1바이트 넣어줌
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_UART_RxCpltCallback+0x1dc>)
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	1c53      	adds	r3, r2, #1
 8002142:	4814      	ldr	r0, [pc, #80]	; (8002194 <HAL_UART_RxCpltCallback+0x1c4>)
 8002144:	6003      	str	r3, [r0, #0]
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_RxCpltCallback+0x1e8>)
 8002148:	781c      	ldrb	r4, [r3, #0]
 800214a:	481c      	ldr	r0, [pc, #112]	; (80021bc <HAL_UART_RxCpltCallback+0x1ec>)
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4403      	add	r3, r0
 8002156:	4413      	add	r3, r2
 8002158:	4622      	mov	r2, r4
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e009      	b.n	8002172 <HAL_UART_RxCpltCallback+0x1a2>
				}
			}
			else
			{
				bt_rx_index=0;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
				printf("Message Overflow!!!\n");
 8002164:	480e      	ldr	r0, [pc, #56]	; (80021a0 <HAL_UART_RxCpltCallback+0x1d0>)
 8002166:	f006 fc7d 	bl	8008a64 <puts>
 800216a:	e002      	b.n	8002172 <HAL_UART_RxCpltCallback+0x1a2>
			}
		}
		else
		{
			printf("Buffer Overflow!!!\n");
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <HAL_UART_RxCpltCallback+0x1d4>)
 800216e:	f006 fc79 	bl	8008a64 <puts>
		}
			//주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
			HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);//다음 INT 받을 준비.
 8002172:	2201      	movs	r2, #1
 8002174:	4910      	ldr	r1, [pc, #64]	; (80021b8 <HAL_UART_RxCpltCallback+0x1e8>)
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002178:	f005 f939 	bl	80073ee <HAL_UART_Receive_IT>
		}

}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	200005d8 	.word	0x200005d8
 8002188:	200011d0 	.word	0x200011d0
 800218c:	66666667 	.word	0x66666667
 8002190:	200011d4 	.word	0x200011d4
 8002194:	200011cc 	.word	0x200011cc
 8002198:	20000b6c 	.word	0x20000b6c
 800219c:	20000b8c 	.word	0x20000b8c
 80021a0:	08009a8c 	.word	0x08009a8c
 80021a4:	08009aa0 	.word	0x08009aa0
 80021a8:	2000061c 	.word	0x2000061c
 80021ac:	2000181c 	.word	0x2000181c
 80021b0:	20001820 	.word	0x20001820
 80021b4:	20001818 	.word	0x20001818
 80021b8:	20000b6d 	.word	0x20000b6d
 80021bc:	200011d8 	.word	0x200011d8

080021c0 <HAL_TIM_IC_CaptureCallback>:
volatile int distance;//거리를 측정할 펄스 갯수를 저장하는 변수
volatile int ic_cpt_finish_flag=0;//input capture가 끝났을 때를 구분해줌.
volatile int dist;

__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM3)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d11f      	bne.n	8002212 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if(is_first_capture==0)//when US ECHO pin is rising edge
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);// 해당 타이머의 HW Counter Register clear
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;	//rising edge.
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
		}


	}
  //UNUSED(htim);//
}
 80021ea:	e012      	b.n	8002212 <HAL_TIM_IC_CaptureCallback+0x52>
		else if(is_first_capture==1)//when US ECHO pin is falling edge
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10d      	bne.n	8002212 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;//falling edge.
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021fc:	2100      	movs	r1, #0
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f004 faea 	bl	80067d8 <HAL_TIM_ReadCapturedValue>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_TIM_IC_CaptureCallback+0x64>)
 800220a:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_TIM_IC_CaptureCallback+0x68>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40000400 	.word	0x40000400
 8002220:	20001824 	.word	0x20001824
 8002224:	20001828 	.word	0x20001828
 8002228:	2000182c 	.word	0x2000182c

0800222c <washing_machine_running>:


//여기부터 시작하세여
//작동부
void washing_machine_running(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0

	if(power_on_flag==0)//전원 off 상태라면
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <washing_machine_running+0xa0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d111      	bne.n	800225c <washing_machine_running+0x30>
	{
		//lcd_command(DISPLAY_OFF);
		//lcd_command(CLEAR_DISPLAY);
		//FND4digit_off();
		//led all off
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2108      	movs	r1, #8
 800223c:	4824      	ldr	r0, [pc, #144]	; (80022d0 <washing_machine_running+0xa4>)
 800223e:	f001 fd2f 	bl	8003ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2120      	movs	r1, #32
 8002246:	4822      	ldr	r0, [pc, #136]	; (80022d0 <washing_machine_running+0xa4>)
 8002248:	f001 fd2a 	bl	8003ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	481f      	ldr	r0, [pc, #124]	; (80022d0 <washing_machine_running+0xa4>)
 8002252:	f001 fd25 	bl	8003ca0 <HAL_GPIO_WritePin>

		//led bar off
		wm_ledbar_display();//power_on_flag==0이면 다 off
 8002256:	f000 fd99 	bl	8002d8c <wm_ledbar_display>


	}//전원 on 상태 끝


}
 800225a:	e035      	b.n	80022c8 <washing_machine_running+0x9c>
		wm_ledbar_display();
 800225c:	f000 fd96 	bl	8002d8c <wm_ledbar_display>
		fnd4digit_sec_min_clock();
 8002260:	f7fe f9ce 	bl	8000600 <fnd4digit_sec_min_clock>
		if(machine_state_flag==1)//세탁기 동작 상태
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <washing_machine_running+0xa8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d12d      	bne.n	80022c8 <washing_machine_running+0x9c>
			if(!run_flag)//일시정지 상태라면
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <washing_machine_running+0xac>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10c      	bne.n	800228e <washing_machine_running+0x62>
				last_time=pause_time;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <washing_machine_running+0xb0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <washing_machine_running+0xb4>)
 800227a:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);//yellow led 토글
 800227c:	2120      	movs	r1, #32
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <washing_machine_running+0xa4>)
 8002280:	f001 fd27 	bl	8003cd2 <HAL_GPIO_TogglePin>
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 8002284:	2100      	movs	r1, #0
 8002286:	4817      	ldr	r0, [pc, #92]	; (80022e4 <washing_machine_running+0xb8>)
 8002288:	f003 fd90 	bl	8005dac <HAL_TIM_PWM_Stop>
}
 800228c:	e01c      	b.n	80022c8 <washing_machine_running+0x9c>
				if(CCR_REVERSE_flag)//정회전 상태
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <washing_machine_running+0xbc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <washing_machine_running+0x84>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);//모터드라이버 IN1 =0
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <washing_machine_running+0xa4>)
 800229e:	f001 fcff 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);//모터드라이버 IN2 =1
 80022a2:	2201      	movs	r2, #1
 80022a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <washing_machine_running+0xa4>)
 80022aa:	f001 fcf9 	bl	8003ca0 <HAL_GPIO_WritePin>
}
 80022ae:	e00b      	b.n	80022c8 <washing_machine_running+0x9c>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);//모터드라이버 IN1 =0
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <washing_machine_running+0xa4>)
 80022b8:	f001 fcf2 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);//모터드라이버 IN =1
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <washing_machine_running+0xa4>)
 80022c4:	f001 fcec 	bl	8003ca0 <HAL_GPIO_WritePin>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20001830 	.word	0x20001830
 80022d0:	40021000 	.word	0x40021000
 80022d4:	20001834 	.word	0x20001834
 80022d8:	20001840 	.word	0x20001840
 80022dc:	2000004c 	.word	0x2000004c
 80022e0:	20000048 	.word	0x20000048
 80022e4:	20000428 	.word	0x20000428
 80022e8:	200000e8 	.word	0x200000e8

080022ec <washing_machine_sensing>:


//센싱부
void washing_machine_sensing(void)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b095      	sub	sp, #84	; 0x54
 80022f0:	af00      	add	r7, sp, #0
	//==버튼 센싱부
	//lcd 표현할 lcd_buff
	volatile char lcd0_buff[20]={0},lcd1_buff[20]={0};
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
 8002308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
	volatile char lcd2_buff[20]={0},clear_buff[20]={0};
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
	if(!power_on_flag)//전원 off 상태일때
 8002338:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <washing_machine_sensing+0x138>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d144      	bne.n	80023ca <washing_machine_sensing+0xde>
	{
		lcd_command(CLEAR_DISPLAY);
 8002340:	2001      	movs	r0, #1
 8002342:	f7fe fa47 	bl	80007d4 <lcd_command>
		//fnd off
		//HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);//D1~D4 1로 해줌으로써 아무값도 표시안됨
		//HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);	//segment 값들도 0으로 세팅해서 아무거도 안나오게
		//전원 off 상태에서 BTN6 눌렸다면
		if(get_button(BUTTON_6_GPIO_Port,BUTTON_6_Pin,6)==BUTTON_PRESS)//전원 버튼 PF2 BTN6
 8002346:	2206      	movs	r2, #6
 8002348:	2104      	movs	r1, #4
 800234a:	4837      	ldr	r0, [pc, #220]	; (8002428 <washing_machine_sensing+0x13c>)
 800234c:	f7fe f922 	bl	8000594 <get_button>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 84ec 	bne.w	8002d30 <washing_machine_sensing+0xa44>
		{
			power_on_flag=1;
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <washing_machine_sensing+0x138>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);//led green on
 800235e:	2201      	movs	r2, #1
 8002360:	2108      	movs	r1, #8
 8002362:	4832      	ldr	r0, [pc, #200]	; (800242c <washing_machine_sensing+0x140>)
 8002364:	f001 fc9c 	bl	8003ca0 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);//buzzer pwm start
 8002368:	210c      	movs	r1, #12
 800236a:	4831      	ldr	r0, [pc, #196]	; (8002430 <washing_machine_sensing+0x144>)
 800236c:	f003 fc56 	bl	8005c1c <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);//buzzer on
 8002370:	2201      	movs	r2, #1
 8002372:	2108      	movs	r1, #8
 8002374:	482f      	ldr	r0, [pc, #188]	; (8002434 <washing_machine_sensing+0x148>)
 8002376:	f001 fc93 	bl	8003ca0 <HAL_GPIO_WritePin>
			//make_trigger();
			i2c_lcd_init();
 800237a:	f7fe fa93 	bl	80008a4 <i2c_lcd_init>
			FND4digit_off();
 800237e:	f7fe fa0d 	bl	800079c <FND4digit_off>
			machine_state_flag=0;
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <washing_machine_sensing+0x14c>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
			menu_flag=0;
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <washing_machine_sensing+0x150>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
			auto_flag=0;
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <washing_machine_sensing+0x154>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
			run_flag=0;
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <washing_machine_sensing+0x158>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
			last_time=0;
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <washing_machine_sensing+0x15c>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
			auto_menu_select=0;
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <washing_machine_sensing+0x160>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
			water_level=4;
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <washing_machine_sensing+0x164>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	701a      	strb	r2, [r3, #0]
			washing=15;
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <washing_machine_sensing+0x168>)
 80023ae:	220f      	movs	r2, #15
 80023b0:	601a      	str	r2, [r3, #0]
			washing_time=2;
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <washing_machine_sensing+0x16c>)
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
			dehydration=5;
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <washing_machine_sensing+0x170>)
 80023ba:	2205      	movs	r2, #5
 80023bc:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_4);	//buzzer off
 80023be:	210c      	movs	r1, #12
 80023c0:	481b      	ldr	r0, [pc, #108]	; (8002430 <washing_machine_sensing+0x144>)
 80023c2:	f003 fcf3 	bl	8005dac <HAL_TIM_PWM_Stop>
			}
		}//자동모드 센싱끝

	}//전원 on 상태 끝

}
 80023c6:	f000 bcb3 	b.w	8002d30 <washing_machine_sensing+0xa44>
		fnd4digit_sec_min_clock();
 80023ca:	f7fe f919 	bl	8000600 <fnd4digit_sec_min_clock>
		if(!auto_flag)
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <washing_machine_sensing+0x154>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8290 	bne.w	80028f8 <washing_machine_sensing+0x60c>
			move_cursor(0,0);
 80023d8:	2100      	movs	r1, #0
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fa90 	bl	8000900 <move_cursor>
			lcd_string(" Manual Mode");
 80023e0:	481f      	ldr	r0, [pc, #124]	; (8002460 <washing_machine_sensing+0x174>)
 80023e2:	f7fe fa78 	bl	80008d6 <lcd_string>
			if(machine_state_flag==0)//세탁기 메뉴선택 상태
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <washing_machine_sensing+0x14c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 8199 	bne.w	8002722 <washing_machine_sensing+0x436>
				if(get_button(BUTTON_0_GPIO_Port,BUTTON_0_Pin,0)==BUTTON_PRESS)//수위 버튼 PE15 BTN0
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f6:	480d      	ldr	r0, [pc, #52]	; (800242c <washing_machine_sensing+0x140>)
 80023f8:	f7fe f8cc 	bl	8000594 <get_button>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d167      	bne.n	80024d2 <washing_machine_sensing+0x1e6>
					lcd_command(CLEAR_DISPLAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f7fe f9e6 	bl	80007d4 <lcd_command>
					if(water_level>7)//끝까지 돌았으면
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <washing_machine_sensing+0x164>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b07      	cmp	r3, #7
 8002410:	d92a      	bls.n	8002468 <washing_machine_sensing+0x17c>
						HAL_GPIO_WritePin(GPIOD, 0xff, 0);//led bar 초기화해주고
 8002412:	2200      	movs	r2, #0
 8002414:	21ff      	movs	r1, #255	; 0xff
 8002416:	4813      	ldr	r0, [pc, #76]	; (8002464 <washing_machine_sensing+0x178>)
 8002418:	f001 fc42 	bl	8003ca0 <HAL_GPIO_WritePin>
						water_level=1;//최저값
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <washing_machine_sensing+0x164>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e028      	b.n	8002476 <washing_machine_sensing+0x18a>
 8002424:	20001830 	.word	0x20001830
 8002428:	40021400 	.word	0x40021400
 800242c:	40021000 	.word	0x40021000
 8002430:	20000470 	.word	0x20000470
 8002434:	40020000 	.word	0x40020000
 8002438:	20001834 	.word	0x20001834
 800243c:	20001838 	.word	0x20001838
 8002440:	2000183c 	.word	0x2000183c
 8002444:	20001840 	.word	0x20001840
 8002448:	20000048 	.word	0x20000048
 800244c:	20001844 	.word	0x20001844
 8002450:	20000050 	.word	0x20000050
 8002454:	20000054 	.word	0x20000054
 8002458:	20000058 	.word	0x20000058
 800245c:	2000005c 	.word	0x2000005c
 8002460:	08009aec 	.word	0x08009aec
 8002464:	40020c00 	.word	0x40020c00
						water_level++;
 8002468:	4bbb      	ldr	r3, [pc, #748]	; (8002758 <washing_machine_sensing+0x46c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4bb9      	ldr	r3, [pc, #740]	; (8002758 <washing_machine_sensing+0x46c>)
 8002474:	701a      	strb	r2, [r3, #0]
					strcpy(lcd1_buff,clear_buff);
 8002476:	463a      	mov	r2, r7
 8002478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f006 fb18 	bl	8008ab4 <strcpy>
					strcpy(lcd1_buff,"Water Level:");
 8002484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002488:	4ab4      	ldr	r2, [pc, #720]	; (800275c <washing_machine_sensing+0x470>)
 800248a:	461c      	mov	r4, r3
 800248c:	4613      	mov	r3, r2
 800248e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002490:	c407      	stmia	r4!, {r0, r1, r2}
 8002492:	7023      	strb	r3, [r4, #0]
					sprintf(lcd2_buff,"%d0%",water_level);
 8002494:	4bb0      	ldr	r3, [pc, #704]	; (8002758 <washing_machine_sensing+0x46c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	49af      	ldr	r1, [pc, #700]	; (8002760 <washing_machine_sensing+0x474>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f006 fae6 	bl	8008a74 <siprintf>
					move_cursor(1,0);
 80024a8:	2100      	movs	r1, #0
 80024aa:	2001      	movs	r0, #1
 80024ac:	f7fe fa28 	bl	8000900 <move_cursor>
					lcd_string(lcd1_buff);
 80024b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fa0e 	bl	80008d6 <lcd_string>
					move_cursor(1,12);
 80024ba:	210c      	movs	r1, #12
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fa1f 	bl	8000900 <move_cursor>
					lcd_string(lcd2_buff);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fa05 	bl	80008d6 <lcd_string>
					menu_flag=0;//물높이		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 80024cc:	4ba5      	ldr	r3, [pc, #660]	; (8002764 <washing_machine_sensing+0x478>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
				if(get_button(BUTTON_1_GPIO_Port,BUTTON_1_Pin,1)==BUTTON_PRESS)//세탁 버튼 PE14 BTN1
 80024d2:	2201      	movs	r2, #1
 80024d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d8:	48a3      	ldr	r0, [pc, #652]	; (8002768 <washing_machine_sensing+0x47c>)
 80024da:	f7fe f85b 	bl	8000594 <get_button>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d138      	bne.n	8002556 <washing_machine_sensing+0x26a>
					lcd_command(CLEAR_DISPLAY);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe f975 	bl	80007d4 <lcd_command>
					washing+=3;
 80024ea:	4ba0      	ldr	r3, [pc, #640]	; (800276c <washing_machine_sensing+0x480>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3303      	adds	r3, #3
 80024f0:	4a9e      	ldr	r2, [pc, #632]	; (800276c <washing_machine_sensing+0x480>)
 80024f2:	6013      	str	r3, [r2, #0]
					if(washing>30)//끝까지 돌았으면
 80024f4:	4b9d      	ldr	r3, [pc, #628]	; (800276c <washing_machine_sensing+0x480>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b1e      	cmp	r3, #30
 80024fa:	dd02      	ble.n	8002502 <washing_machine_sensing+0x216>
						washing=6;//최저값
 80024fc:	4b9b      	ldr	r3, [pc, #620]	; (800276c <washing_machine_sensing+0x480>)
 80024fe:	2206      	movs	r2, #6
 8002500:	601a      	str	r2, [r3, #0]
					strcpy(lcd1_buff,clear_buff);
 8002502:	463a      	mov	r2, r7
 8002504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f006 fad2 	bl	8008ab4 <strcpy>
					strcpy(lcd1_buff,"Washing: ");
 8002510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002514:	4a96      	ldr	r2, [pc, #600]	; (8002770 <washing_machine_sensing+0x484>)
 8002516:	ca07      	ldmia	r2, {r0, r1, r2}
 8002518:	c303      	stmia	r3!, {r0, r1}
 800251a:	801a      	strh	r2, [r3, #0]
					sprintf(lcd2_buff,"%d",washing);
 800251c:	4b93      	ldr	r3, [pc, #588]	; (800276c <washing_machine_sensing+0x480>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4993      	ldr	r1, [pc, #588]	; (8002774 <washing_machine_sensing+0x488>)
 8002526:	4618      	mov	r0, r3
 8002528:	f006 faa4 	bl	8008a74 <siprintf>
					move_cursor(1,0);
 800252c:	2100      	movs	r1, #0
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe f9e6 	bl	8000900 <move_cursor>
					lcd_string(lcd1_buff);
 8002534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe f9cc 	bl	80008d6 <lcd_string>
					move_cursor(1,9);
 800253e:	2109      	movs	r1, #9
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe f9dd 	bl	8000900 <move_cursor>
					lcd_string(lcd2_buff);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f9c3 	bl	80008d6 <lcd_string>
					menu_flag=1;//세탁		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 8002550:	4b84      	ldr	r3, [pc, #528]	; (8002764 <washing_machine_sensing+0x478>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
				if(get_button(BUTTON_2_GPIO_Port,BUTTON_2_Pin,2)==BUTTON_PRESS)//헹굼 버튼 PE12 BTN2
 8002556:	2202      	movs	r2, #2
 8002558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255c:	4882      	ldr	r0, [pc, #520]	; (8002768 <washing_machine_sensing+0x47c>)
 800255e:	f7fe f819 	bl	8000594 <get_button>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13d      	bne.n	80025e4 <washing_machine_sensing+0x2f8>
					lcd_command(CLEAR_DISPLAY);
 8002568:	2001      	movs	r0, #1
 800256a:	f7fe f933 	bl	80007d4 <lcd_command>
					washing_time++;
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <washing_machine_sensing+0x48c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	4a80      	ldr	r2, [pc, #512]	; (8002778 <washing_machine_sensing+0x48c>)
 8002576:	6013      	str	r3, [r2, #0]
					if(washing_time>5)//끝까지 돌았으면
 8002578:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <washing_machine_sensing+0x48c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b05      	cmp	r3, #5
 800257e:	dd02      	ble.n	8002586 <washing_machine_sensing+0x29a>
						washing_time=1;//최저값
 8002580:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <washing_machine_sensing+0x48c>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
					strcpy(lcd1_buff,clear_buff);
 8002586:	463a      	mov	r2, r7
 8002588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f006 fa90 	bl	8008ab4 <strcpy>
					strcpy(lcd1_buff,"Washing Time: ");
 8002594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002598:	4a78      	ldr	r2, [pc, #480]	; (800277c <washing_machine_sensing+0x490>)
 800259a:	461c      	mov	r4, r3
 800259c:	4613      	mov	r3, r2
 800259e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a0:	c407      	stmia	r4!, {r0, r1, r2}
 80025a2:	8023      	strh	r3, [r4, #0]
 80025a4:	3402      	adds	r4, #2
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	7023      	strb	r3, [r4, #0]
					sprintf(lcd2_buff,"%d",washing_time);
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <washing_machine_sensing+0x48c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4970      	ldr	r1, [pc, #448]	; (8002774 <washing_machine_sensing+0x488>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f006 fa5d 	bl	8008a74 <siprintf>
					move_cursor(1,0);
 80025ba:	2100      	movs	r1, #0
 80025bc:	2001      	movs	r0, #1
 80025be:	f7fe f99f 	bl	8000900 <move_cursor>
					lcd_string(lcd1_buff);
 80025c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe f985 	bl	80008d6 <lcd_string>
					move_cursor(1,14);
 80025cc:	210e      	movs	r1, #14
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7fe f996 	bl	8000900 <move_cursor>
					lcd_string(lcd2_buff);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe f97c 	bl	80008d6 <lcd_string>
					menu_flag=2;//헹굼		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <washing_machine_sensing+0x478>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
				if(get_button(BUTTON_3_GPIO_Port,BUTTON_3_Pin,3)==BUTTON_PRESS)//탈수 버튼 PE10 BTN3
 80025e4:	2203      	movs	r2, #3
 80025e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ea:	485f      	ldr	r0, [pc, #380]	; (8002768 <washing_machine_sensing+0x47c>)
 80025ec:	f7fd ffd2 	bl	8000594 <get_button>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d13a      	bne.n	800266c <washing_machine_sensing+0x380>
					lcd_command(CLEAR_DISPLAY);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe f8ec 	bl	80007d4 <lcd_command>
					dehydration++;
 80025fc:	4b60      	ldr	r3, [pc, #384]	; (8002780 <washing_machine_sensing+0x494>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <washing_machine_sensing+0x494>)
 8002604:	6013      	str	r3, [r2, #0]
					if(dehydration>9)//끝까지 돌았으면
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <washing_machine_sensing+0x494>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b09      	cmp	r3, #9
 800260c:	dd02      	ble.n	8002614 <washing_machine_sensing+0x328>
						dehydration=1;//최저값
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <washing_machine_sensing+0x494>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
					strcpy(lcd1_buff,clear_buff);
 8002614:	463a      	mov	r2, r7
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f006 fa49 	bl	8008ab4 <strcpy>
					strcpy(lcd1_buff,"dehydration: ");
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	4a57      	ldr	r2, [pc, #348]	; (8002784 <washing_machine_sensing+0x498>)
 8002628:	461c      	mov	r4, r3
 800262a:	4613      	mov	r3, r2
 800262c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800262e:	c407      	stmia	r4!, {r0, r1, r2}
 8002630:	8023      	strh	r3, [r4, #0]
					sprintf(lcd2_buff,"%d",dehydration);
 8002632:	4b53      	ldr	r3, [pc, #332]	; (8002780 <washing_machine_sensing+0x494>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	494e      	ldr	r1, [pc, #312]	; (8002774 <washing_machine_sensing+0x488>)
 800263c:	4618      	mov	r0, r3
 800263e:	f006 fa19 	bl	8008a74 <siprintf>
					move_cursor(1,0);
 8002642:	2100      	movs	r1, #0
 8002644:	2001      	movs	r0, #1
 8002646:	f7fe f95b 	bl	8000900 <move_cursor>
					lcd_string(lcd1_buff);
 800264a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe f941 	bl	80008d6 <lcd_string>
					move_cursor(1,13);
 8002654:	210d      	movs	r1, #13
 8002656:	2001      	movs	r0, #1
 8002658:	f7fe f952 	bl	8000900 <move_cursor>
					lcd_string(lcd2_buff);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe f938 	bl	80008d6 <lcd_string>
					menu_flag=3;//탈수		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <washing_machine_sensing+0x478>)
 8002668:	2203      	movs	r2, #3
 800266a:	601a      	str	r2, [r3, #0]
				if(get_button(BUTTON_4_GPIO_Port,BUTTON_4_Pin,4)==BUTTON_PRESS)//수동자동 버튼 PF0 BTN4
 800266c:	2204      	movs	r2, #4
 800266e:	2101      	movs	r1, #1
 8002670:	4845      	ldr	r0, [pc, #276]	; (8002788 <washing_machine_sensing+0x49c>)
 8002672:	f7fd ff8f 	bl	8000594 <get_button>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <washing_machine_sensing+0x3a8>
					menu_flag=0;//탈수		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <washing_machine_sensing+0x478>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002682:	4b42      	ldr	r3, [pc, #264]	; (800278c <washing_machine_sensing+0x4a0>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
					auto_flag=1;//0은 manual 1은 auto
 8002688:	4b41      	ldr	r3, [pc, #260]	; (8002790 <washing_machine_sensing+0x4a4>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 800268e:	2001      	movs	r0, #1
 8002690:	f7fe f8a0 	bl	80007d4 <lcd_command>
				if(get_button(BUTTON_5_GPIO_Port,BUTTON_5_Pin,5)==BUTTON_PRESS)//동작/일시정지 버튼 PF1 BTN5
 8002694:	2205      	movs	r2, #5
 8002696:	2102      	movs	r1, #2
 8002698:	483b      	ldr	r0, [pc, #236]	; (8002788 <washing_machine_sensing+0x49c>)
 800269a:	f7fd ff7b 	bl	8000594 <get_button>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d127      	bne.n	80026f4 <washing_machine_sensing+0x408>
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//4번타이머의 PWM CH1번에 연결된 모터를 돌리는 거임.
 80026a4:	2100      	movs	r1, #0
 80026a6:	483b      	ldr	r0, [pc, #236]	; (8002794 <washing_machine_sensing+0x4a8>)
 80026a8:	f003 fab8 	bl	8005c1c <HAL_TIM_PWM_Start>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2108      	movs	r1, #8
 80026b0:	482d      	ldr	r0, [pc, #180]	; (8002768 <washing_machine_sensing+0x47c>)
 80026b2:	f001 faf5 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	2120      	movs	r1, #32
 80026ba:	482b      	ldr	r0, [pc, #172]	; (8002768 <washing_machine_sensing+0x47c>)
 80026bc:	f001 faf0 	bl	8003ca0 <HAL_GPIO_WritePin>
					last_time=water_level+washing*washing_time+dehydration;
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <washing_machine_sensing+0x46c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <washing_machine_sensing+0x480>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <washing_machine_sensing+0x48c>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	18ca      	adds	r2, r1, r3
 80026d6:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <washing_machine_sensing+0x494>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <washing_machine_sensing+0x4ac>)
 80026e0:	601a      	str	r2, [r3, #0]
					machine_state_flag=1;//메뉴선택	   // 0은 메뉴선택, 1은 동작 2는 종료
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <washing_machine_sensing+0x4b0>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
					run_flag=1; //0은 일시정지, 1은 run
 80026e8:	4b28      	ldr	r3, [pc, #160]	; (800278c <washing_machine_sensing+0x4a0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe f870 	bl	80007d4 <lcd_command>
				if(get_button(BUTTON_6_GPIO_Port,BUTTON_6_Pin,6)==BUTTON_PRESS)//전원 버튼 PF2 BTN6
 80026f4:	2206      	movs	r2, #6
 80026f6:	2104      	movs	r1, #4
 80026f8:	4823      	ldr	r0, [pc, #140]	; (8002788 <washing_machine_sensing+0x49c>)
 80026fa:	f7fd ff4b 	bl	8000594 <get_button>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10e      	bne.n	8002722 <washing_machine_sensing+0x436>
					power_on_flag=0;//power off
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <washing_machine_sensing+0x4b4>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
					menu_flag=0;//물높이		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <washing_machine_sensing+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <washing_machine_sensing+0x4a0>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
					auto_flag=0;//0은 manual 1은 auto
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <washing_machine_sensing+0x4a4>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 800271c:	2001      	movs	r0, #1
 800271e:	f7fe f859 	bl	80007d4 <lcd_command>
			if(machine_state_flag==1)//세탁기 동작 상태
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <washing_machine_sensing+0x4b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b01      	cmp	r3, #1
 8002728:	f040 809d 	bne.w	8002866 <washing_machine_sensing+0x57a>
				if(get_button(BUTTON_5_GPIO_Port,BUTTON_5_Pin,5)==BUTTON_PRESS)//동작/일시정지 버튼 PF1 BTN5
 800272c:	2205      	movs	r2, #5
 800272e:	2102      	movs	r1, #2
 8002730:	4815      	ldr	r0, [pc, #84]	; (8002788 <washing_machine_sensing+0x49c>)
 8002732:	f7fd ff2f 	bl	8000594 <get_button>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d163      	bne.n	8002804 <washing_machine_sensing+0x518>
					run_flag=(run_flag+1)%2; //누를때마다 Toggle  0은 일시정지, 1은 run
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <washing_machine_sensing+0x4a0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	bfb8      	it	lt
 800274a:	425b      	neglt	r3, r3
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <washing_machine_sensing+0x4a0>)
 800274e:	6013      	str	r3, [r2, #0]
					if(run_flag)//일시정지 상태에서->작동 상태로 바뀌었다면 다시 yellow led on
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <washing_machine_sensing+0x4a0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	e025      	b.n	80027a4 <washing_machine_sensing+0x4b8>
 8002758:	20000050 	.word	0x20000050
 800275c:	08009afc 	.word	0x08009afc
 8002760:	08009b0c 	.word	0x08009b0c
 8002764:	20001838 	.word	0x20001838
 8002768:	40021000 	.word	0x40021000
 800276c:	20000054 	.word	0x20000054
 8002770:	08009b14 	.word	0x08009b14
 8002774:	08009b20 	.word	0x08009b20
 8002778:	20000058 	.word	0x20000058
 800277c:	08009b24 	.word	0x08009b24
 8002780:	2000005c 	.word	0x2000005c
 8002784:	08009b34 	.word	0x08009b34
 8002788:	40021400 	.word	0x40021400
 800278c:	20001840 	.word	0x20001840
 8002790:	2000183c 	.word	0x2000183c
 8002794:	20000428 	.word	0x20000428
 8002798:	20000048 	.word	0x20000048
 800279c:	20001834 	.word	0x20001834
 80027a0:	20001830 	.word	0x20001830
 80027a4:	d00f      	beq.n	80027c6 <washing_machine_sensing+0x4da>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
 80027a6:	2201      	movs	r2, #1
 80027a8:	2120      	movs	r1, #32
 80027aa:	4843      	ldr	r0, [pc, #268]	; (80028b8 <washing_machine_sensing+0x5cc>)
 80027ac:	f001 fa78 	bl	8003ca0 <HAL_GPIO_WritePin>
						HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 80027b0:	2100      	movs	r1, #0
 80027b2:	4842      	ldr	r0, [pc, #264]	; (80028bc <washing_machine_sensing+0x5d0>)
 80027b4:	f003 fa32 	bl	8005c1c <HAL_TIM_PWM_Start>
						move_cursor(1,0);
 80027b8:	2100      	movs	r1, #0
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fe f8a0 	bl	8000900 <move_cursor>
						lcd_string("    Running!!");
 80027c0:	483f      	ldr	r0, [pc, #252]	; (80028c0 <washing_machine_sensing+0x5d4>)
 80027c2:	f7fe f888 	bl	80008d6 <lcd_string>
					if(!run_flag)
 80027c6:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <washing_machine_sensing+0x5d8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d112      	bne.n	80027f4 <washing_machine_sensing+0x508>
						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 80027ce:	2100      	movs	r1, #0
 80027d0:	483a      	ldr	r0, [pc, #232]	; (80028bc <washing_machine_sensing+0x5d0>)
 80027d2:	f003 faeb 	bl	8005dac <HAL_TIM_PWM_Stop>
						pause_time=last_time;//버튼 눌린 순간의 남은 시간을 pause time에 넣어줌
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <washing_machine_sensing+0x5dc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3c      	ldr	r2, [pc, #240]	; (80028cc <washing_machine_sensing+0x5e0>)
 80027dc:	6013      	str	r3, [r2, #0]
						last_time=pause_time;
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <washing_machine_sensing+0x5e0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <washing_machine_sensing+0x5dc>)
 80027e4:	6013      	str	r3, [r2, #0]
						move_cursor(1,0);
 80027e6:	2100      	movs	r1, #0
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7fe f889 	bl	8000900 <move_cursor>
						lcd_string("    Pause!!");
 80027ee:	4838      	ldr	r0, [pc, #224]	; (80028d0 <washing_machine_sensing+0x5e4>)
 80027f0:	f7fe f871 	bl	80008d6 <lcd_string>
					lcd_command(CLEAR_DISPLAY);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fd ffed 	bl	80007d4 <lcd_command>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	21ff      	movs	r1, #255	; 0xff
 80027fe:	4835      	ldr	r0, [pc, #212]	; (80028d4 <washing_machine_sensing+0x5e8>)
 8002800:	f001 fa4e 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_6_GPIO_Port,BUTTON_6_Pin,6)==BUTTON_PRESS)//전원 버튼 PF2 BTN6
 8002804:	2206      	movs	r2, #6
 8002806:	2104      	movs	r1, #4
 8002808:	4833      	ldr	r0, [pc, #204]	; (80028d8 <washing_machine_sensing+0x5ec>)
 800280a:	f7fd fec3 	bl	8000594 <get_button>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <washing_machine_sensing+0x54c>
					power_on_flag=0;//power off
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <washing_machine_sensing+0x5f0>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
					machine_state_flag=0;//메뉴선택	   // 0은 메뉴선택, 1은 동작 2는 종료
 800281a:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <washing_machine_sensing+0x5f4>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
					menu_flag=0;//물높이		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <washing_machine_sensing+0x5f8>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <washing_machine_sensing+0x5d8>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
					auto_flag=0;//0은 manual 1은 auto
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <washing_machine_sensing+0x5fc>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 8002832:	2001      	movs	r0, #1
 8002834:	f7fd ffce 	bl	80007d4 <lcd_command>
				if(last_time==0)//동작 중 시간이 끝나면
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <washing_machine_sensing+0x5dc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d112      	bne.n	8002866 <washing_machine_sensing+0x57a>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 8002840:	2100      	movs	r1, #0
 8002842:	481e      	ldr	r0, [pc, #120]	; (80028bc <washing_machine_sensing+0x5d0>)
 8002844:	f003 fab2 	bl	8005dac <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);//yellow led off
 8002848:	2200      	movs	r2, #0
 800284a:	2120      	movs	r1, #32
 800284c:	481a      	ldr	r0, [pc, #104]	; (80028b8 <washing_machine_sensing+0x5cc>)
 800284e:	f001 fa27 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);// red led on
 8002852:	2201      	movs	r2, #1
 8002854:	2140      	movs	r1, #64	; 0x40
 8002856:	4818      	ldr	r0, [pc, #96]	; (80028b8 <washing_machine_sensing+0x5cc>)
 8002858:	f001 fa22 	bl	8003ca0 <HAL_GPIO_WritePin>
FND4digit_off();
 800285c:	f7fd ff9e 	bl	800079c <FND4digit_off>
					machine_state_flag=2;//세탁기 종료 상태
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <washing_machine_sensing+0x5f4>)
 8002862:	2202      	movs	r2, #2
 8002864:	601a      	str	r2, [r3, #0]
			if(machine_state_flag==2)//세탁기 종료 상태
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <washing_machine_sensing+0x5f4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 8260 	bne.w	8002d30 <washing_machine_sensing+0xa44>
				machine_state_flag=0;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <washing_machine_sensing+0x5f4>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);//buzzer pwm start
 8002876:	210c      	movs	r1, #12
 8002878:	481c      	ldr	r0, [pc, #112]	; (80028ec <washing_machine_sensing+0x600>)
 800287a:	f003 f9cf 	bl	8005c1c <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);//buzzer on
 800287e:	2201      	movs	r2, #1
 8002880:	2108      	movs	r1, #8
 8002882:	481b      	ldr	r0, [pc, #108]	; (80028f0 <washing_machine_sensing+0x604>)
 8002884:	f001 fa0c 	bl	8003ca0 <HAL_GPIO_WritePin>
				move_cursor(1,0);
 8002888:	2100      	movs	r1, #0
 800288a:	2001      	movs	r0, #1
 800288c:	f7fe f838 	bl	8000900 <move_cursor>
				lcd_string("   finish!!!!");
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <washing_machine_sensing+0x608>)
 8002892:	f7fe f820 	bl	80008d6 <lcd_string>
				HAL_Delay(5000);//5초 딜레이 종료되었으니 HAL_Delay 사용
 8002896:	f241 3088 	movw	r0, #5000	; 0x1388
 800289a:	f000 fb4d 	bl	8002f38 <HAL_Delay>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);//빨간 led 불끄고
 800289e:	2200      	movs	r2, #0
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <washing_machine_sensing+0x5cc>)
 80028a4:	f001 f9fc 	bl	8003ca0 <HAL_GPIO_WritePin>
				power_on_flag=0;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <washing_machine_sensing+0x5f0>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_4);	//buzzer off
 80028ae:	210c      	movs	r1, #12
 80028b0:	480e      	ldr	r0, [pc, #56]	; (80028ec <washing_machine_sensing+0x600>)
 80028b2:	f003 fa7b 	bl	8005dac <HAL_TIM_PWM_Stop>
}
 80028b6:	e23b      	b.n	8002d30 <washing_machine_sensing+0xa44>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	20000428 	.word	0x20000428
 80028c0:	08009b44 	.word	0x08009b44
 80028c4:	20001840 	.word	0x20001840
 80028c8:	20000048 	.word	0x20000048
 80028cc:	2000004c 	.word	0x2000004c
 80028d0:	08009b54 	.word	0x08009b54
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021400 	.word	0x40021400
 80028dc:	20001830 	.word	0x20001830
 80028e0:	20001834 	.word	0x20001834
 80028e4:	20001838 	.word	0x20001838
 80028e8:	2000183c 	.word	0x2000183c
 80028ec:	20000470 	.word	0x20000470
 80028f0:	40020000 	.word	0x40020000
 80028f4:	08009b60 	.word	0x08009b60
			if(machine_state_flag==0)//세탁기 메뉴선택 상태
 80028f8:	4ba9      	ldr	r3, [pc, #676]	; (8002ba0 <washing_machine_sensing+0x8b4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 8126 	bne.w	8002b4e <washing_machine_sensing+0x862>
				if(get_button(BUTTON_0_GPIO_Port,BUTTON_0_Pin,0)==BUTTON_PRESS)//표준모드 버튼 PE15 BTN0
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002908:	48a6      	ldr	r0, [pc, #664]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 800290a:	f7fd fe43 	bl	8000594 <get_button>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d124      	bne.n	800295e <washing_machine_sensing+0x672>
					water_level=6;
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <washing_machine_sensing+0x8bc>)
 8002916:	2206      	movs	r2, #6
 8002918:	701a      	strb	r2, [r3, #0]
					washing=15;
 800291a:	4ba4      	ldr	r3, [pc, #656]	; (8002bac <washing_machine_sensing+0x8c0>)
 800291c:	220f      	movs	r2, #15
 800291e:	601a      	str	r2, [r3, #0]
					washing_time=2;
 8002920:	4ba3      	ldr	r3, [pc, #652]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
					dehydration=5;
 8002926:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 8002928:	2205      	movs	r2, #5
 800292a:	601a      	str	r2, [r3, #0]
					auto_menu_select=0;		//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 800292c:	4ba2      	ldr	r3, [pc, #648]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 8002932:	2001      	movs	r0, #1
 8002934:	f7fd ff4e 	bl	80007d4 <lcd_command>
					move_cursor(0,0);
 8002938:	2100      	movs	r1, #0
 800293a:	2000      	movs	r0, #0
 800293c:	f7fd ffe0 	bl	8000900 <move_cursor>
					lcd_string("  Auto Mode");
 8002940:	489e      	ldr	r0, [pc, #632]	; (8002bbc <washing_machine_sensing+0x8d0>)
 8002942:	f7fd ffc8 	bl	80008d6 <lcd_string>
					move_cursor(1,0);
 8002946:	2100      	movs	r1, #0
 8002948:	2001      	movs	r0, #1
 800294a:	f7fd ffd9 	bl	8000900 <move_cursor>
					lcd_string("   Standard");
 800294e:	489c      	ldr	r0, [pc, #624]	; (8002bc0 <washing_machine_sensing+0x8d4>)
 8002950:	f7fd ffc1 	bl	80008d6 <lcd_string>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	21ff      	movs	r1, #255	; 0xff
 8002958:	489a      	ldr	r0, [pc, #616]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 800295a:	f001 f9a1 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_1_GPIO_Port,BUTTON_1_Pin,1)==BUTTON_PRESS)//소량모드 버튼 PE14 BTN1
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002964:	488f      	ldr	r0, [pc, #572]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 8002966:	f7fd fe15 	bl	8000594 <get_button>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d124      	bne.n	80029ba <washing_machine_sensing+0x6ce>
					water_level=3;
 8002970:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <washing_machine_sensing+0x8bc>)
 8002972:	2203      	movs	r2, #3
 8002974:	701a      	strb	r2, [r3, #0]
					washing=10;
 8002976:	4b8d      	ldr	r3, [pc, #564]	; (8002bac <washing_machine_sensing+0x8c0>)
 8002978:	220a      	movs	r2, #10
 800297a:	601a      	str	r2, [r3, #0]
					washing_time=1;
 800297c:	4b8c      	ldr	r3, [pc, #560]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
					dehydration=3;
 8002982:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 8002984:	2203      	movs	r2, #3
 8002986:	601a      	str	r2, [r3, #0]
					auto_menu_select=1;		//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 8002988:	4b8b      	ldr	r3, [pc, #556]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 800298e:	2001      	movs	r0, #1
 8002990:	f7fd ff20 	bl	80007d4 <lcd_command>
					move_cursor(0,0);
 8002994:	2100      	movs	r1, #0
 8002996:	2000      	movs	r0, #0
 8002998:	f7fd ffb2 	bl	8000900 <move_cursor>
					lcd_string("  Auto Mode");
 800299c:	4887      	ldr	r0, [pc, #540]	; (8002bbc <washing_machine_sensing+0x8d0>)
 800299e:	f7fd ff9a 	bl	80008d6 <lcd_string>
					move_cursor(1,0);
 80029a2:	2100      	movs	r1, #0
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7fd ffab 	bl	8000900 <move_cursor>
					lcd_string("Small Quantity");
 80029aa:	4887      	ldr	r0, [pc, #540]	; (8002bc8 <washing_machine_sensing+0x8dc>)
 80029ac:	f7fd ff93 	bl	80008d6 <lcd_string>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	21ff      	movs	r1, #255	; 0xff
 80029b4:	4883      	ldr	r0, [pc, #524]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 80029b6:	f001 f973 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_2_GPIO_Port,BUTTON_2_Pin,2)==BUTTON_PRESS)//강력모드 버튼 PE12 BTN2
 80029ba:	2202      	movs	r2, #2
 80029bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c0:	4878      	ldr	r0, [pc, #480]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 80029c2:	f7fd fde7 	bl	8000594 <get_button>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d124      	bne.n	8002a16 <washing_machine_sensing+0x72a>
					water_level=8;
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <washing_machine_sensing+0x8bc>)
 80029ce:	2208      	movs	r2, #8
 80029d0:	701a      	strb	r2, [r3, #0]
					washing=30;
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <washing_machine_sensing+0x8c0>)
 80029d4:	221e      	movs	r2, #30
 80029d6:	601a      	str	r2, [r3, #0]
					washing_time=3;
 80029d8:	4b75      	ldr	r3, [pc, #468]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 80029da:	2203      	movs	r2, #3
 80029dc:	601a      	str	r2, [r3, #0]
					dehydration=9;
 80029de:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 80029e0:	2209      	movs	r2, #9
 80029e2:	601a      	str	r2, [r3, #0]
					auto_menu_select=2;		//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 80029e4:	4b74      	ldr	r3, [pc, #464]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7fd fef2 	bl	80007d4 <lcd_command>
					move_cursor(0,0);
 80029f0:	2100      	movs	r1, #0
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fd ff84 	bl	8000900 <move_cursor>
					lcd_string("  Auto Mode");
 80029f8:	4870      	ldr	r0, [pc, #448]	; (8002bbc <washing_machine_sensing+0x8d0>)
 80029fa:	f7fd ff6c 	bl	80008d6 <lcd_string>
					move_cursor(1,0);
 80029fe:	2100      	movs	r1, #0
 8002a00:	2001      	movs	r0, #1
 8002a02:	f7fd ff7d 	bl	8000900 <move_cursor>
					lcd_string(" Power Wash");
 8002a06:	4871      	ldr	r0, [pc, #452]	; (8002bcc <washing_machine_sensing+0x8e0>)
 8002a08:	f7fd ff65 	bl	80008d6 <lcd_string>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	21ff      	movs	r1, #255	; 0xff
 8002a10:	486c      	ldr	r0, [pc, #432]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 8002a12:	f001 f945 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_3_GPIO_Port,BUTTON_3_Pin,3)==BUTTON_PRESS)//이불모드 버튼 PE10 BTN3
 8002a16:	2203      	movs	r2, #3
 8002a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1c:	4861      	ldr	r0, [pc, #388]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 8002a1e:	f7fd fdb9 	bl	8000594 <get_button>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d124      	bne.n	8002a72 <washing_machine_sensing+0x786>
					last_time=77;//level:8  wash:20 time:3 dehyd:9
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <washing_machine_sensing+0x8e4>)
 8002a2a:	224d      	movs	r2, #77	; 0x4d
 8002a2c:	601a      	str	r2, [r3, #0]
					washing=20;
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <washing_machine_sensing+0x8c0>)
 8002a30:	2214      	movs	r2, #20
 8002a32:	601a      	str	r2, [r3, #0]
					washing_time=3;
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 8002a36:	2203      	movs	r2, #3
 8002a38:	601a      	str	r2, [r3, #0]
					dehydration=9;
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 8002a3c:	2209      	movs	r2, #9
 8002a3e:	601a      	str	r2, [r3, #0]
					auto_menu_select=3;		//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 8002a40:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002a42:	2203      	movs	r2, #3
 8002a44:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7fd fec4 	bl	80007d4 <lcd_command>
					move_cursor(0,0);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fd ff56 	bl	8000900 <move_cursor>
					lcd_string("  Auto Mode");
 8002a54:	4859      	ldr	r0, [pc, #356]	; (8002bbc <washing_machine_sensing+0x8d0>)
 8002a56:	f7fd ff3e 	bl	80008d6 <lcd_string>
					move_cursor(1,0);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7fd ff4f 	bl	8000900 <move_cursor>
					lcd_string("   Blankets");
 8002a62:	485c      	ldr	r0, [pc, #368]	; (8002bd4 <washing_machine_sensing+0x8e8>)
 8002a64:	f7fd ff37 	bl	80008d6 <lcd_string>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	21ff      	movs	r1, #255	; 0xff
 8002a6c:	4855      	ldr	r0, [pc, #340]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 8002a6e:	f001 f917 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_4_GPIO_Port,BUTTON_4_Pin,4)==BUTTON_PRESS)//수동자동 버튼 PF0 BTN4
 8002a72:	2204      	movs	r2, #4
 8002a74:	2101      	movs	r1, #1
 8002a76:	4858      	ldr	r0, [pc, #352]	; (8002bd8 <washing_machine_sensing+0x8ec>)
 8002a78:	f7fd fd8c 	bl	8000594 <get_button>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11c      	bne.n	8002abc <washing_machine_sensing+0x7d0>
					auto_menu_select=0;		//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 8002a82:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002a88:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <washing_machine_sensing+0x8f0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
					auto_flag=0;//0은 manual 1은 auto
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <washing_machine_sensing+0x8f4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
					water_level=4;
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <washing_machine_sensing+0x8bc>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	701a      	strb	r2, [r3, #0]
					washing=15;
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <washing_machine_sensing+0x8c0>)
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	601a      	str	r2, [r3, #0]
					washing_time=2;
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	601a      	str	r2, [r3, #0]
					dehydration=5;
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7fd fe91 	bl	80007d4 <lcd_command>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	21ff      	movs	r1, #255	; 0xff
 8002ab6:	4843      	ldr	r0, [pc, #268]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 8002ab8:	f001 f8f2 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_5_GPIO_Port,BUTTON_5_Pin,5)==BUTTON_PRESS)//동작/일시정지 버튼 PF1 BTN5
 8002abc:	2205      	movs	r2, #5
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4845      	ldr	r0, [pc, #276]	; (8002bd8 <washing_machine_sensing+0x8ec>)
 8002ac2:	f7fd fd67 	bl	8000594 <get_button>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d12c      	bne.n	8002b26 <washing_machine_sensing+0x83a>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2108      	movs	r1, #8
 8002ad0:	4834      	ldr	r0, [pc, #208]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 8002ad2:	f001 f8e5 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2120      	movs	r1, #32
 8002ada:	4832      	ldr	r0, [pc, #200]	; (8002ba4 <washing_machine_sensing+0x8b8>)
 8002adc:	f001 f8e0 	bl	8003ca0 <HAL_GPIO_WritePin>
					last_time=water_level+washing*washing_time+dehydration;
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <washing_machine_sensing+0x8bc>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <washing_machine_sensing+0x8c0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <washing_machine_sensing+0x8c4>)
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	18ca      	adds	r2, r1, r3
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <washing_machine_sensing+0x8c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <washing_machine_sensing+0x8e4>)
 8002b00:	601a      	str	r2, [r3, #0]
					HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//4번타이머의 PWM CH1번에 연결된 모터를 돌리는 거임.
 8002b02:	2100      	movs	r1, #0
 8002b04:	4837      	ldr	r0, [pc, #220]	; (8002be4 <washing_machine_sensing+0x8f8>)
 8002b06:	f003 f889 	bl	8005c1c <HAL_TIM_PWM_Start>
					machine_state_flag=1;//메뉴선택	   // 0은 메뉴선택, 1은 동작 2는 종료
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <washing_machine_sensing+0x8b4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
					run_flag=1; //0은 일시정지, 1은 run
 8002b10:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <washing_machine_sensing+0x8f0>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
					lcd_command(CLEAR_DISPLAY);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fd fe5c 	bl	80007d4 <lcd_command>
					HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	21ff      	movs	r1, #255	; 0xff
 8002b20:	4828      	ldr	r0, [pc, #160]	; (8002bc4 <washing_machine_sensing+0x8d8>)
 8002b22:	f001 f8bd 	bl	8003ca0 <HAL_GPIO_WritePin>
				if(get_button(BUTTON_6_GPIO_Port,BUTTON_6_Pin,6)==BUTTON_PRESS)//전원 버튼 PF2 BTN6
 8002b26:	2206      	movs	r2, #6
 8002b28:	2104      	movs	r1, #4
 8002b2a:	482b      	ldr	r0, [pc, #172]	; (8002bd8 <washing_machine_sensing+0x8ec>)
 8002b2c:	f7fd fd32 	bl	8000594 <get_button>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <washing_machine_sensing+0x862>
					power_on_flag=0;//power off
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <washing_machine_sensing+0x8fc>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
					auto_menu_select=0;	//auto mode menu선택 0은 표준모드 1은 소량 2는 강력 3은 이불
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <washing_machine_sensing+0x8f0>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
					auto_flag=0;//0은 manual 1은 auto
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <washing_machine_sensing+0x8f4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
			if(machine_state_flag==1)//세탁기 동작 상태
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <washing_machine_sensing+0x8b4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80c3 	bne.w	8002cde <washing_machine_sensing+0x9f2>
				if(auto_menu_select==0)
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <washing_machine_sensing+0x884>
					move_cursor(0,0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd fecc 	bl	8000900 <move_cursor>
					lcd_string("   Standard");
 8002b68:	4815      	ldr	r0, [pc, #84]	; (8002bc0 <washing_machine_sensing+0x8d4>)
 8002b6a:	f7fd feb4 	bl	80008d6 <lcd_string>
 8002b6e:	e04b      	b.n	8002c08 <washing_machine_sensing+0x91c>
				else if(auto_menu_select==1)
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <washing_machine_sensing+0x89c>
					move_cursor(0,0);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd fec0 	bl	8000900 <move_cursor>
					lcd_string("Small Quantity");
 8002b80:	4811      	ldr	r0, [pc, #68]	; (8002bc8 <washing_machine_sensing+0x8dc>)
 8002b82:	f7fd fea8 	bl	80008d6 <lcd_string>
 8002b86:	e03f      	b.n	8002c08 <washing_machine_sensing+0x91c>
				else if(auto_menu_select==2)
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <washing_machine_sensing+0x8cc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d12d      	bne.n	8002bec <washing_machine_sensing+0x900>
					move_cursor(0,0);
 8002b90:	2100      	movs	r1, #0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd feb4 	bl	8000900 <move_cursor>
					lcd_string(" Power Wash");				}
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <washing_machine_sensing+0x8e0>)
 8002b9a:	f7fd fe9c 	bl	80008d6 <lcd_string>
 8002b9e:	e033      	b.n	8002c08 <washing_machine_sensing+0x91c>
 8002ba0:	20001834 	.word	0x20001834
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	20000050 	.word	0x20000050
 8002bac:	20000054 	.word	0x20000054
 8002bb0:	20000058 	.word	0x20000058
 8002bb4:	2000005c 	.word	0x2000005c
 8002bb8:	20001844 	.word	0x20001844
 8002bbc:	08009b70 	.word	0x08009b70
 8002bc0:	08009b7c 	.word	0x08009b7c
 8002bc4:	40020c00 	.word	0x40020c00
 8002bc8:	08009b88 	.word	0x08009b88
 8002bcc:	08009b98 	.word	0x08009b98
 8002bd0:	20000048 	.word	0x20000048
 8002bd4:	08009ba4 	.word	0x08009ba4
 8002bd8:	40021400 	.word	0x40021400
 8002bdc:	20001840 	.word	0x20001840
 8002be0:	2000183c 	.word	0x2000183c
 8002be4:	20000428 	.word	0x20000428
 8002be8:	20001830 	.word	0x20001830
				else if(auto_menu_select==3)
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <washing_machine_sensing+0xa4c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d109      	bne.n	8002c08 <washing_machine_sensing+0x91c>
					move_cursor(0,0);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fd fe82 	bl	8000900 <move_cursor>
					sprintf(lcd0_buff,"   Blankets");
 8002bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c00:	494e      	ldr	r1, [pc, #312]	; (8002d3c <washing_machine_sensing+0xa50>)
 8002c02:	4618      	mov	r0, r3
 8002c04:	f005 ff36 	bl	8008a74 <siprintf>
				if(get_button(BUTTON_5_GPIO_Port,BUTTON_5_Pin,5)==BUTTON_PRESS)//동작/일시정지 버튼 PF1 BTN5
 8002c08:	2205      	movs	r2, #5
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	484c      	ldr	r0, [pc, #304]	; (8002d40 <washing_machine_sensing+0xa54>)
 8002c0e:	f7fd fcc1 	bl	8000594 <get_button>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d134      	bne.n	8002c82 <washing_machine_sensing+0x996>
					run_flag=(run_flag+1)%2; //0은 일시정지, 1은 run
 8002c18:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <washing_machine_sensing+0xa58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	bfb8      	it	lt
 8002c26:	425b      	neglt	r3, r3
 8002c28:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <washing_machine_sensing+0xa58>)
 8002c2a:	6013      	str	r3, [r2, #0]
					if(run_flag)//일시정지 상태에서->작동 상태로 바뀌었다면 다시 yellow led on
 8002c2c:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <washing_machine_sensing+0xa58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00f      	beq.n	8002c54 <washing_machine_sensing+0x968>
						HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 8002c34:	2100      	movs	r1, #0
 8002c36:	4844      	ldr	r0, [pc, #272]	; (8002d48 <washing_machine_sensing+0xa5c>)
 8002c38:	f002 fff0 	bl	8005c1c <HAL_TIM_PWM_Start>
						HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 1);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2120      	movs	r1, #32
 8002c40:	4842      	ldr	r0, [pc, #264]	; (8002d4c <washing_machine_sensing+0xa60>)
 8002c42:	f001 f82d 	bl	8003ca0 <HAL_GPIO_WritePin>
						move_cursor(1,0);
 8002c46:	2100      	movs	r1, #0
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7fd fe59 	bl	8000900 <move_cursor>
						lcd_string("    Running!!");
 8002c4e:	4840      	ldr	r0, [pc, #256]	; (8002d50 <washing_machine_sensing+0xa64>)
 8002c50:	f7fd fe41 	bl	80008d6 <lcd_string>
					if(!run_flag)
 8002c54:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <washing_machine_sensing+0xa58>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d112      	bne.n	8002c82 <washing_machine_sensing+0x996>
						HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	483a      	ldr	r0, [pc, #232]	; (8002d48 <washing_machine_sensing+0xa5c>)
 8002c60:	f003 f8a4 	bl	8005dac <HAL_TIM_PWM_Stop>
						pause_time=last_time;//버튼 눌린 순간의 남은 시간을 pause time에 넣어줌
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <washing_machine_sensing+0xa68>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <washing_machine_sensing+0xa6c>)
 8002c6a:	6013      	str	r3, [r2, #0]
						last_time=pause_time;
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <washing_machine_sensing+0xa6c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a38      	ldr	r2, [pc, #224]	; (8002d54 <washing_machine_sensing+0xa68>)
 8002c72:	6013      	str	r3, [r2, #0]
						move_cursor(1,0);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fd fe42 	bl	8000900 <move_cursor>
						lcd_string("    Pause!!");
 8002c7c:	4837      	ldr	r0, [pc, #220]	; (8002d5c <washing_machine_sensing+0xa70>)
 8002c7e:	f7fd fe2a 	bl	80008d6 <lcd_string>
				if(get_button(BUTTON_6_GPIO_Port,BUTTON_6_Pin,6)==BUTTON_PRESS)//전원 버튼 PF2 BTN6
 8002c82:	2206      	movs	r2, #6
 8002c84:	2104      	movs	r1, #4
 8002c86:	482e      	ldr	r0, [pc, #184]	; (8002d40 <washing_machine_sensing+0xa54>)
 8002c88:	f7fd fc84 	bl	8000594 <get_button>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10e      	bne.n	8002cb0 <washing_machine_sensing+0x9c4>
					power_on_flag=0;//power off
 8002c92:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <washing_machine_sensing+0xa74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
					machine_state_flag=0;//메뉴선택	   // 0은 메뉴선택, 1은 동작 2는 종료
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <washing_machine_sensing+0xa78>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
					menu_flag=0;//물높이		  //0은 물높이 1은 세탁 2는 헹굼 3은 탈수
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <washing_machine_sensing+0xa7c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
					run_flag=0; //0은 일시정지, 1은 run
 8002ca4:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <washing_machine_sensing+0xa58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
					auto_flag=0;//0은 manual 1은 auto
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <washing_machine_sensing+0xa80>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
				if(last_time==0)//동작 중 시간이 끝나면
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <washing_machine_sensing+0xa68>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d112      	bne.n	8002cde <washing_machine_sensing+0x9f2>
					machine_state_flag=2;//세탁기 종료 상태
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <washing_machine_sensing+0xa78>)
 8002cba:	2202      	movs	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2120      	movs	r1, #32
 8002cc2:	4822      	ldr	r0, [pc, #136]	; (8002d4c <washing_machine_sensing+0xa60>)
 8002cc4:	f000 ffec 	bl	8003ca0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2140      	movs	r1, #64	; 0x40
 8002ccc:	481f      	ldr	r0, [pc, #124]	; (8002d4c <washing_machine_sensing+0xa60>)
 8002cce:	f000 ffe7 	bl	8003ca0 <HAL_GPIO_WritePin>
FND4digit_off();
 8002cd2:	f7fd fd63 	bl	800079c <FND4digit_off>
					HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);//모터를 멈추는 거임.
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	481b      	ldr	r0, [pc, #108]	; (8002d48 <washing_machine_sensing+0xa5c>)
 8002cda:	f003 f867 	bl	8005dac <HAL_TIM_PWM_Stop>
			if(machine_state_flag==2)//세탁기 종료 상태
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <washing_machine_sensing+0xa78>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d124      	bne.n	8002d30 <washing_machine_sensing+0xa44>
				machine_state_flag=0;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <washing_machine_sensing+0xa78>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);//buzzer pwm start
 8002cec:	210c      	movs	r1, #12
 8002cee:	4820      	ldr	r0, [pc, #128]	; (8002d70 <washing_machine_sensing+0xa84>)
 8002cf0:	f002 ff94 	bl	8005c1c <HAL_TIM_PWM_Start>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);//buzzer on
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	481e      	ldr	r0, [pc, #120]	; (8002d74 <washing_machine_sensing+0xa88>)
 8002cfa:	f000 ffd1 	bl	8003ca0 <HAL_GPIO_WritePin>
				move_cursor(1,0);
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fd fdfd 	bl	8000900 <move_cursor>
				lcd_string("   finish!!!!");
 8002d06:	481c      	ldr	r0, [pc, #112]	; (8002d78 <washing_machine_sensing+0xa8c>)
 8002d08:	f7fd fde5 	bl	80008d6 <lcd_string>
				HAL_Delay(5000);//2초 딜레이 종료되었으니 HAL_Delay 사용
 8002d0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002d10:	f000 f912 	bl	8002f38 <HAL_Delay>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);//빨간 led 불끄고
 8002d14:	2200      	movs	r2, #0
 8002d16:	2140      	movs	r1, #64	; 0x40
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <washing_machine_sensing+0xa60>)
 8002d1a:	f000 ffc1 	bl	8003ca0 <HAL_GPIO_WritePin>
				power_on_flag=0;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <washing_machine_sensing+0xa74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
				HAL_TIM_PWM_Stop(&htim5,TIM_CHANNEL_4);	//buzzer off
 8002d24:	210c      	movs	r1, #12
 8002d26:	4812      	ldr	r0, [pc, #72]	; (8002d70 <washing_machine_sensing+0xa84>)
 8002d28:	f003 f840 	bl	8005dac <HAL_TIM_PWM_Stop>
				FND4digit_off();
 8002d2c:	f7fd fd36 	bl	800079c <FND4digit_off>
}
 8002d30:	bf00      	nop
 8002d32:	3754      	adds	r7, #84	; 0x54
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	20001844 	.word	0x20001844
 8002d3c:	08009ba4 	.word	0x08009ba4
 8002d40:	40021400 	.word	0x40021400
 8002d44:	20001840 	.word	0x20001840
 8002d48:	20000428 	.word	0x20000428
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	08009b44 	.word	0x08009b44
 8002d54:	20000048 	.word	0x20000048
 8002d58:	2000004c 	.word	0x2000004c
 8002d5c:	08009b54 	.word	0x08009b54
 8002d60:	20001830 	.word	0x20001830
 8002d64:	20001834 	.word	0x20001834
 8002d68:	20001838 	.word	0x20001838
 8002d6c:	2000183c 	.word	0x2000183c
 8002d70:	20000470 	.word	0x20000470
 8002d74:	40020000 	.word	0x40020000
 8002d78:	08009b60 	.word	0x08009b60

08002d7c <washing_machine_processing>:



void washing_machine_processing(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	washing_machine_sensing();
 8002d80:	f7ff fab4 	bl	80022ec <washing_machine_sensing>
	washing_machine_running();
 8002d84:	f7ff fa52 	bl	800222c <washing_machine_running>
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <wm_ledbar_display>:


void wm_ledbar_display(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
//	static uint8_t temp=0x0f;// 이전 water level값 기억용 초기값은 초기 water_level값과 같음
	if(power_on_flag==1)
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <wm_ledbar_display+0x5c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d11b      	bne.n	8002dd0 <wm_ledbar_display+0x44>
	{
		//systick Handler 1ms Timer
		if(t1ms_counter %20 == 0)//20번째 인터럽트라면 아래 로직을 동작시켜라. 인터럽트 핸들러는 1ms마다 동작하기 때문에 결국 200ms HAL_Delay와 같은 동작이 되나 HW는 계속 동작하게끔 하는거임.
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <wm_ledbar_display+0x60>)
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <wm_ledbar_display+0x64>)
 8002d9e:	fb83 2301 	smull	r2, r3, r3, r1
 8002da2:	10da      	asrs	r2, r3, #3
 8002da4:	17cb      	asrs	r3, r1, #31
 8002da6:	1ad2      	subs	r2, r2, r3
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	1aca      	subs	r2, r1, r3
 8002db2:	2a00      	cmp	r2, #0
 8002db4:	d115      	bne.n	8002de2 <wm_ledbar_display+0x56>
		{
			HAL_GPIO_WritePin(GPIOD, led_bar[water_level-1], 1);// 이전 값이 현재 값보다 높았다면 그 부분만큼 led bar를 꺼주는 작업 temp&led_bar[water_level-1]
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <wm_ledbar_display+0x68>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <wm_ledbar_display+0x6c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <wm_ledbar_display+0x70>)
 8002dca:	f000 ff69 	bl	8003ca0 <HAL_GPIO_WritePin>
	}
	else if(power_on_flag==0)
	{
		HAL_GPIO_WritePin(GPIOD, 0xff, 0);
	}
}
 8002dce:	e008      	b.n	8002de2 <wm_ledbar_display+0x56>
	else if(power_on_flag==0)
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <wm_ledbar_display+0x5c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <wm_ledbar_display+0x56>
		HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	21ff      	movs	r1, #255	; 0xff
 8002ddc:	4807      	ldr	r0, [pc, #28]	; (8002dfc <wm_ledbar_display+0x70>)
 8002dde:	f000 ff5f 	bl	8003ca0 <HAL_GPIO_WritePin>
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001830 	.word	0x20001830
 8002dec:	20000b7c 	.word	0x20000b7c
 8002df0:	66666667 	.word	0x66666667
 8002df4:	20000050 	.word	0x20000050
 8002df8:	2000003c 	.word	0x2000003c
 8002dfc:	40020c00 	.word	0x40020c00

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e06:	490e      	ldr	r1, [pc, #56]	; (8002e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e1c:	4c0b      	ldr	r4, [pc, #44]	; (8002e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e2a:	f7ff f8bf 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f005 fd7f 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7fd fdcb 	bl	80009cc <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002e44:	08009c70 	.word	0x08009c70
  ldr r2, =_sbss
 8002e48:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002e4c:	2000185c 	.word	0x2000185c

08002e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_Init+0x40>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_Init+0x40>)
 8002e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_Init+0x40>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e7c:	2003      	movs	r0, #3
 8002e7e:	f000 f94f 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f808 	bl	8002e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e88:	f7fe fb76 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_InitTick+0x54>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f967 	bl	800318a <HAL_SYSTICK_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00e      	b.n	8002ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d80a      	bhi.n	8002ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f000 f92f 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_InitTick+0x5c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000038 	.word	0x20000038
 8002ef0:	20000064 	.word	0x20000064
 8002ef4:	20000060 	.word	0x20000060

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000064 	.word	0x20000064
 8002f1c:	20001848 	.word	0x20001848

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20001848 	.word	0x20001848

08002f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff ffee 	bl	8002f20 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d005      	beq.n	8002f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_Delay+0x44>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5e:	bf00      	nop
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8f7      	bhi.n	8002f60 <HAL_Delay+0x28>
  {
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000064 	.word	0x20000064

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff8e 	bl	8003020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff29 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff3e 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff8e 	bl	8003074 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5d 	bl	8003020 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff31 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff feb6 	bl	8002f20 <HAL_GetTick>
 80031b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d008      	beq.n	80031d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e052      	b.n	800327a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0216 	bic.w	r2, r2, #22
 80031e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <HAL_DMA_Abort+0x62>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0208 	bic.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003224:	e013      	b.n	800324e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003226:	f7ff fe7b 	bl	8002f20 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b05      	cmp	r3, #5
 8003232:	d90c      	bls.n	800324e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e015      	b.n	800327a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e4      	bne.n	8003226 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003260:	223f      	movs	r2, #63	; 0x3f
 8003262:	409a      	lsls	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d004      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e00c      	b.n	80032ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2205      	movs	r2, #5
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06c      	b.n	80033b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d106      	bne.n	80032f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2223      	movs	r2, #35	; 0x23
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fe f96b 	bl	80015c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_ETH_Init+0xf4>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a30      	ldr	r2, [pc, #192]	; (80033bc <HAL_ETH_Init+0xf4>)
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_ETH_Init+0xf4>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <HAL_ETH_Init+0xf8>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_ETH_Init+0xf8>)
 8003314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003318:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_ETH_Init+0xf8>)
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_ETH_Init+0xf8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_ETH_Init+0xf8>)
 800332a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003342:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003344:	f7ff fdec 	bl	8002f20 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800334a:	e011      	b.n	8003370 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800334c:	f7ff fde8 	bl	8002f20 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800335a:	d909      	bls.n	8003370 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	22e0      	movs	r2, #224	; 0xe0
 8003368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e021      	b.n	80033b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e4      	bne.n	800334c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f958 	bl	8003638 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f9ff 	bl	800378c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa55 	bl	800383e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	461a      	mov	r2, r3
 800339a:	2100      	movs	r1, #0
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9bd 	bl	800371c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2210      	movs	r2, #16
 80033ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40013800 	.word	0x40013800

080033c4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <ETH_SetMACConfig+0x15c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <ETH_SetMACConfig+0x28>
 80033e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033ea:	e000      	b.n	80033ee <ETH_SetMACConfig+0x2a>
 80033ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7c5b      	ldrb	r3, [r3, #17]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <ETH_SetMACConfig+0x38>
 80033f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033fa:	e000      	b.n	80033fe <ETH_SetMACConfig+0x3a>
 80033fc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80033fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	7fdb      	ldrb	r3, [r3, #31]
 800340a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800340c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	7f92      	ldrb	r2, [r2, #30]
 8003418:	2a00      	cmp	r2, #0
 800341a:	d102      	bne.n	8003422 <ETH_SetMACConfig+0x5e>
 800341c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003420:	e000      	b.n	8003424 <ETH_SetMACConfig+0x60>
 8003422:	2200      	movs	r2, #0
                        macconf->Speed |
 8003424:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	7f1b      	ldrb	r3, [r3, #28]
 800342a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800342c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003432:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	791b      	ldrb	r3, [r3, #4]
 8003438:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800343a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003442:	2a00      	cmp	r2, #0
 8003444:	d102      	bne.n	800344c <ETH_SetMACConfig+0x88>
 8003446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344a:	e000      	b.n	800344e <ETH_SetMACConfig+0x8a>
 800344c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800344e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	7bdb      	ldrb	r3, [r3, #15]
 8003454:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003456:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800345c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003464:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003466:	4313      	orrs	r3, r2
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800347e:	2001      	movs	r0, #1
 8003480:	f7ff fd5a 	bl	8002f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	f64f 7341 	movw	r3, #65345	; 0xff41
 800349a:	4013      	ands	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	d101      	bne.n	80034b2 <ETH_SetMACConfig+0xee>
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	e000      	b.n	80034b4 <ETH_SetMACConfig+0xf0>
 80034b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80034ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80034c2:	2a01      	cmp	r2, #1
 80034c4:	d101      	bne.n	80034ca <ETH_SetMACConfig+0x106>
 80034c6:	2208      	movs	r2, #8
 80034c8:	e000      	b.n	80034cc <ETH_SetMACConfig+0x108>
 80034ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80034cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	d101      	bne.n	80034dc <ETH_SetMACConfig+0x118>
 80034d8:	2204      	movs	r2, #4
 80034da:	e000      	b.n	80034de <ETH_SetMACConfig+0x11a>
 80034dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80034de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80034e6:	2a01      	cmp	r2, #1
 80034e8:	d101      	bne.n	80034ee <ETH_SetMACConfig+0x12a>
 80034ea:	2202      	movs	r2, #2
 80034ec:	e000      	b.n	80034f0 <ETH_SetMACConfig+0x12c>
 80034ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80034f0:	4313      	orrs	r3, r2
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003508:	2001      	movs	r0, #1
 800350a:	f7ff fd15 	bl	8002f38 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	ff20810f 	.word	0xff20810f

08003524 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <ETH_SetDMAConfig+0x110>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	7b1b      	ldrb	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <ETH_SetDMAConfig+0x2c>
 800354a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800354e:	e000      	b.n	8003552 <ETH_SetDMAConfig+0x2e>
 8003550:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	7b5b      	ldrb	r3, [r3, #13]
 8003556:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003558:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	7f52      	ldrb	r2, [r2, #29]
 800355e:	2a00      	cmp	r2, #0
 8003560:	d102      	bne.n	8003568 <ETH_SetDMAConfig+0x44>
 8003562:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003566:	e000      	b.n	800356a <ETH_SetDMAConfig+0x46>
 8003568:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800356a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	7b9b      	ldrb	r3, [r3, #14]
 8003570:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003572:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7f1b      	ldrb	r3, [r3, #28]
 800357e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003580:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	7f9b      	ldrb	r3, [r3, #30]
 8003586:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003588:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800358e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003596:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003598:	4313      	orrs	r3, r2
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	461a      	mov	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f7ff fcbc 	bl	8002f38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	461a      	mov	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80035de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80035e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80035ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80035f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80035fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003606:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800360a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003618:	2001      	movs	r0, #1
 800361a:	f7ff fc8d 	bl	8002f38 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6013      	str	r3, [r2, #0]
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f8de3f23 	.word	0xf8de3f23

08003638 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b0a6      	sub	sp, #152	; 0x98
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003674:	2300      	movs	r3, #0
 8003676:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800367e:	2300      	movs	r3, #0
 8003680:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800369a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80036a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80036ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe86 	bl	80033c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80036b8:	2301      	movs	r3, #1
 80036ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80036bc:	2301      	movs	r3, #1
 80036be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80036da:	2300      	movs	r3, #0
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80036e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80036ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80036f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003700:	2300      	movs	r3, #0
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ff08 	bl	8003524 <ETH_SetDMAConfig>
}
 8003714:	bf00      	nop
 8003716:	3798      	adds	r7, #152	; 0x98
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3305      	adds	r3, #5
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	3204      	adds	r2, #4
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <ETH_MACAddressConfig+0x68>)
 800373e:	4413      	add	r3, r2
 8003740:	461a      	mov	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3303      	adds	r3, #3
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	061a      	lsls	r2, r3, #24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3302      	adds	r3, #2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3301      	adds	r3, #1
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	4313      	orrs	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <ETH_MACAddressConfig+0x6c>)
 800376e:	4413      	add	r3, r2
 8003770:	461a      	mov	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	6013      	str	r3, [r2, #0]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40028040 	.word	0x40028040
 8003788:	40028044 	.word	0x40028044

0800378c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e03e      	b.n	8003818 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2200      	movs	r2, #0
 80037b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	3206      	adds	r2, #6
 80037cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d80c      	bhi.n	80037fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e004      	b.n	8003806 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d9bd      	bls.n	800379a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003830:	611a      	str	r2, [r3, #16]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e046      	b.n	80038da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6919      	ldr	r1, [r3, #16]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2200      	movs	r2, #0
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003888:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003890:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	3212      	adds	r2, #18
 80038a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d80c      	bhi.n	80038ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6919      	ldr	r1, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	440b      	add	r3, r1
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	e004      	b.n	80038d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3301      	adds	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d9b5      	bls.n	800384c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390a:	60da      	str	r2, [r3, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e177      	b.n	8003c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	f040 8166 	bne.w	8003c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d005      	beq.n	800396a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003966:	2b02      	cmp	r3, #2
 8003968:	d130      	bne.n	80039cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0201 	and.w	r2, r3, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d017      	beq.n	8003a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	2203      	movs	r2, #3
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d123      	bne.n	8003a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	08da      	lsrs	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3208      	adds	r2, #8
 8003a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	08da      	lsrs	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3208      	adds	r2, #8
 8003a56:	69b9      	ldr	r1, [r7, #24]
 8003a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80c0 	beq.w	8003c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b66      	ldr	r3, [pc, #408]	; (8003c3c <HAL_GPIO_Init+0x324>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	4a65      	ldr	r2, [pc, #404]	; (8003c3c <HAL_GPIO_Init+0x324>)
 8003aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aac:	6453      	str	r3, [r2, #68]	; 0x44
 8003aae:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <HAL_GPIO_Init+0x324>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aba:	4a61      	ldr	r2, [pc, #388]	; (8003c40 <HAL_GPIO_Init+0x328>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_GPIO_Init+0x32c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d037      	beq.n	8003b56 <HAL_GPIO_Init+0x23e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_GPIO_Init+0x330>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_GPIO_Init+0x23a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a56      	ldr	r2, [pc, #344]	; (8003c4c <HAL_GPIO_Init+0x334>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02b      	beq.n	8003b4e <HAL_GPIO_Init+0x236>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <HAL_GPIO_Init+0x338>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d025      	beq.n	8003b4a <HAL_GPIO_Init+0x232>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a54      	ldr	r2, [pc, #336]	; (8003c54 <HAL_GPIO_Init+0x33c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01f      	beq.n	8003b46 <HAL_GPIO_Init+0x22e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a53      	ldr	r2, [pc, #332]	; (8003c58 <HAL_GPIO_Init+0x340>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d019      	beq.n	8003b42 <HAL_GPIO_Init+0x22a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <HAL_GPIO_Init+0x344>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_GPIO_Init+0x226>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a51      	ldr	r2, [pc, #324]	; (8003c60 <HAL_GPIO_Init+0x348>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00d      	beq.n	8003b3a <HAL_GPIO_Init+0x222>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a50      	ldr	r2, [pc, #320]	; (8003c64 <HAL_GPIO_Init+0x34c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x21e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4f      	ldr	r2, [pc, #316]	; (8003c68 <HAL_GPIO_Init+0x350>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_GPIO_Init+0x21a>
 8003b2e:	2309      	movs	r3, #9
 8003b30:	e012      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b32:	230a      	movs	r3, #10
 8003b34:	e010      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b36:	2308      	movs	r3, #8
 8003b38:	e00e      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b3a:	2307      	movs	r3, #7
 8003b3c:	e00c      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e00a      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e008      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e006      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e004      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x240>
 8003b56:	2300      	movs	r3, #0
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f002 0203 	and.w	r2, r2, #3
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	4093      	lsls	r3, r2
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b68:	4935      	ldr	r1, [pc, #212]	; (8003c40 <HAL_GPIO_Init+0x328>)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9a:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc4:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bca:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bee:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_GPIO_Init+0x354>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	f67f ae84 	bls.w	8003934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40013800 	.word	0x40013800
 8003c44:	40020000 	.word	0x40020000
 8003c48:	40020400 	.word	0x40020400
 8003c4c:	40020800 	.word	0x40020800
 8003c50:	40020c00 	.word	0x40020c00
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40021400 	.word	0x40021400
 8003c5c:	40021800 	.word	0x40021800
 8003c60:	40021c00 	.word	0x40021c00
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40022400 	.word	0x40022400
 8003c6c:	40013c00 	.word	0x40013c00

08003c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e001      	b.n	8003c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cbc:	e003      	b.n	8003cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ce4:	887a      	ldrh	r2, [r7, #2]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	041a      	lsls	r2, r3, #16
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	43d9      	mvns	r1, r3
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	619a      	str	r2, [r3, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e12b      	b.n	8003f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fd10 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f001 fa20 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 8003d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a81      	ldr	r2, [pc, #516]	; (8003f7c <HAL_I2C_Init+0x274>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d807      	bhi.n	8003d8c <HAL_I2C_Init+0x84>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a80      	ldr	r2, [pc, #512]	; (8003f80 <HAL_I2C_Init+0x278>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e006      	b.n	8003d9a <HAL_I2C_Init+0x92>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a7d      	ldr	r2, [pc, #500]	; (8003f84 <HAL_I2C_Init+0x27c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bf94      	ite	ls
 8003d94:	2301      	movls	r3, #1
 8003d96:	2300      	movhi	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0e7      	b.n	8003f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a78      	ldr	r2, [pc, #480]	; (8003f88 <HAL_I2C_Init+0x280>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0c9b      	lsrs	r3, r3, #18
 8003dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4a6a      	ldr	r2, [pc, #424]	; (8003f7c <HAL_I2C_Init+0x274>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d802      	bhi.n	8003ddc <HAL_I2C_Init+0xd4>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	e009      	b.n	8003df0 <HAL_I2C_Init+0xe8>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	4a69      	ldr	r2, [pc, #420]	; (8003f8c <HAL_I2C_Init+0x284>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	3301      	adds	r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	495c      	ldr	r1, [pc, #368]	; (8003f7c <HAL_I2C_Init+0x274>)
 8003e0c:	428b      	cmp	r3, r1
 8003e0e:	d819      	bhi.n	8003e44 <HAL_I2C_Init+0x13c>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1e59      	subs	r1, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e24:	400b      	ands	r3, r1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_I2C_Init+0x138>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e59      	subs	r1, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3e:	e051      	b.n	8003ee4 <HAL_I2C_Init+0x1dc>
 8003e40:	2304      	movs	r3, #4
 8003e42:	e04f      	b.n	8003ee4 <HAL_I2C_Init+0x1dc>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d111      	bne.n	8003e70 <HAL_I2C_Init+0x168>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1e58      	subs	r0, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e012      	b.n	8003e96 <HAL_I2C_Init+0x18e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1e58      	subs	r0, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	0099      	lsls	r1, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Init+0x196>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e022      	b.n	8003ee4 <HAL_I2C_Init+0x1dc>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_I2C_Init+0x1bc>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1e58      	subs	r0, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	440b      	add	r3, r1
 8003eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	e00f      	b.n	8003ee4 <HAL_I2C_Init+0x1dc>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e58      	subs	r0, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	0099      	lsls	r1, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	6809      	ldr	r1, [r1, #0]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6911      	ldr	r1, [r2, #16]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	4311      	orrs	r1, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	000186a0 	.word	0x000186a0
 8003f80:	001e847f 	.word	0x001e847f
 8003f84:	003d08ff 	.word	0x003d08ff
 8003f88:	431bde83 	.word	0x431bde83
 8003f8c:	10624dd3 	.word	0x10624dd3

08003f90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	817b      	strh	r3, [r7, #10]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa4:	f7fe ffbc 	bl	8002f20 <HAL_GetTick>
 8003fa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	f040 80e0 	bne.w	8004178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2319      	movs	r3, #25
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	4970      	ldr	r1, [pc, #448]	; (8004184 <HAL_I2C_Master_Transmit+0x1f4>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f964 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e0d3      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2C_Master_Transmit+0x50>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0cc      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d007      	beq.n	8004006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2221      	movs	r2, #33	; 0x21
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2210      	movs	r2, #16
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	893a      	ldrh	r2, [r7, #8]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a50      	ldr	r2, [pc, #320]	; (8004188 <HAL_I2C_Master_Transmit+0x1f8>)
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004048:	8979      	ldrh	r1, [r7, #10]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6a3a      	ldr	r2, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f89c 	bl	800418c <I2C_MasterRequestWrite>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e08d      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004074:	e066      	b.n	8004144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	6a39      	ldr	r1, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f9de 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b04      	cmp	r3, #4
 800408c:	d107      	bne.n	800409e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e06b      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	781a      	ldrb	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d11b      	bne.n	8004118 <HAL_I2C_Master_Transmit+0x188>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d017      	beq.n	8004118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	6a39      	ldr	r1, [r7, #32]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f9ce 	bl	80044be <I2C_WaitOnBTFFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b04      	cmp	r3, #4
 800412e:	d107      	bne.n	8004140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e01a      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d194      	bne.n	8004076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	00100002 	.word	0x00100002
 8004188:	ffff0000 	.word	0xffff0000

0800418c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d006      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d003      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00b      	b.n	80041e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	d107      	bne.n	80041e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f84f 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004206:	d103      	bne.n	8004210 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e035      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421c:	d108      	bne.n	8004230 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	e01b      	b.n	8004268 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030f 	orn	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <I2C_MasterRequestWrite+0xfc>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f875 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e010      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4907      	ldr	r1, [pc, #28]	; (800428c <I2C_MasterRequestWrite+0x100>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f865 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	00010008 	.word	0x00010008
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a0:	e025      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d021      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fe39 	bl	8002f20 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e023      	b.n	8004336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	e00c      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	429a      	cmp	r2, r3
 8004332:	d0b6      	beq.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	e051      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d123      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e046      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fdb7 	bl	8002f20 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e020      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10c      	bne.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e00b      	b.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d18d      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004448:	e02d      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f878 	bl	8004540 <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02d      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d021      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fd5d 	bl	8002f20 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d1ca      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ca:	e02d      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f837 	bl	8004540 <I2C_IsAcknowledgeFailed>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e02d      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d021      	beq.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fd1c 	bl	8002f20 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d1ca      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d11b      	bne.n	8004590 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004560:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f043 0204 	orr.w	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d129      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b20      	cmp	r3, #32
 800462e:	d12a      	bne.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	f023 030f 	bic.w	r3, r3, #15
 8004656:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b29a      	uxth	r2, r3
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	4313      	orrs	r3, r2
 8004660:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	89fa      	ldrh	r2, [r7, #14]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004696:	b08f      	sub	sp, #60	; 0x3c
 8004698:	af0a      	add	r7, sp, #40	; 0x28
 800469a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e10f      	b.n	80048c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fd faef 	bl	8001ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f003 fe7c 	bl	80083e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	687e      	ldr	r6, [r7, #4]
 80046f2:	466d      	mov	r5, sp
 80046f4:	f106 0410 	add.w	r4, r6, #16
 80046f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004704:	e885 0003 	stmia.w	r5, {r0, r1}
 8004708:	1d33      	adds	r3, r6, #4
 800470a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800470c:	6838      	ldr	r0, [r7, #0]
 800470e:	f003 fe07 	bl	8008320 <USB_CoreInit>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0d0      	b.n	80048c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fe6a 	bl	8008404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004730:	2300      	movs	r3, #0
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	e04a      	b.n	80047cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	333d      	adds	r3, #61	; 0x3d
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	333c      	adds	r3, #60	; 0x3c
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	b298      	uxth	r0, r3
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3344      	adds	r3, #68	; 0x44
 8004772:	4602      	mov	r2, r0
 8004774:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3340      	adds	r3, #64	; 0x40
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3348      	adds	r3, #72	; 0x48
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	334c      	adds	r3, #76	; 0x4c
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3354      	adds	r3, #84	; 0x54
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	3301      	adds	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3af      	bcc.n	8004736 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	e044      	b.n	8004866 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047dc:	7bfa      	ldrb	r2, [r7, #15]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	3301      	adds	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d3b5      	bcc.n	80047dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	687e      	ldr	r6, [r7, #4]
 8004878:	466d      	mov	r5, sp
 800487a:	f106 0410 	add.w	r4, r6, #16
 800487e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800488a:	e885 0003 	stmia.w	r5, {r0, r1}
 800488e:	1d33      	adds	r3, r6, #4
 8004890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004892:	6838      	ldr	r0, [r7, #0]
 8004894:	f003 fe02 	bl	800849c <USB_DevInit>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e00d      	b.n	80048c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 ffcd 	bl	800885e <USB_DevDisconnect>

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e267      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d075      	beq.n	80049da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ee:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d00c      	beq.n	8004914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fa:	4b85      	ldr	r3, [pc, #532]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004902:	2b08      	cmp	r3, #8
 8004904:	d112      	bne.n	800492c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004912:	d10b      	bne.n	800492c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d05b      	beq.n	80049d8 <HAL_RCC_OscConfig+0x108>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d157      	bne.n	80049d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e242      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d106      	bne.n	8004944 <HAL_RCC_OscConfig+0x74>
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a75      	ldr	r2, [pc, #468]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e01d      	b.n	8004980 <HAL_RCC_OscConfig+0xb0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x98>
 800494e:	4b70      	ldr	r3, [pc, #448]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a6f      	ldr	r2, [pc, #444]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6c      	ldr	r2, [pc, #432]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0xb0>
 8004968:	4b69      	ldr	r3, [pc, #420]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a68      	ldr	r2, [pc, #416]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800496e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b66      	ldr	r3, [pc, #408]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 800497a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe faca 	bl	8002f20 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004990:	f7fe fac6 	bl	8002f20 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e207      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4b5b      	ldr	r3, [pc, #364]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0xc0>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fe fab6 	bl	8002f20 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fe fab2 	bl	8002f20 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1f3      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0xe8>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d063      	beq.n	8004aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d11c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fe:	4b44      	ldr	r3, [pc, #272]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x152>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e1c7      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4937      	ldr	r1, [pc, #220]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	e03a      	b.n	8004aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <HAL_RCC_OscConfig+0x244>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fe fa6b 	bl	8002f20 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fe fa67 	bl	8002f20 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e1a8      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4925      	ldr	r1, [pc, #148]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCC_OscConfig+0x244>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fa4a 	bl	8002f20 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fe fa46 	bl	8002f20 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e187      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d036      	beq.n	8004b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x248>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fe fa2a 	bl	8002f20 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fe fa26 	bl	8002f20 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e167      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x200>
 8004aee:	e01b      	b.n	8004b28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0x248>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fe fa13 	bl	8002f20 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afc:	e00e      	b.n	8004b1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afe:	f7fe fa0f 	bl	8002f20 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d907      	bls.n	8004b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e150      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470000 	.word	0x42470000
 8004b18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ea      	bne.n	8004afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8097 	beq.w	8004c64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a7c      	ldr	r2, [pc, #496]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b7a      	ldr	r3, [pc, #488]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	60bb      	str	r3, [r7, #8]
 8004b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b77      	ldr	r3, [pc, #476]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d118      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b72:	4b74      	ldr	r3, [pc, #464]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a73      	ldr	r2, [pc, #460]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7e:	f7fe f9cf 	bl	8002f20 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fe f9cb 	bl	8002f20 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e10c      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCC_OscConfig+0x474>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d106      	bne.n	8004bba <HAL_RCC_OscConfig+0x2ea>
 8004bac:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a63      	ldr	r2, [pc, #396]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb8:	e01c      	b.n	8004bf4 <HAL_RCC_OscConfig+0x324>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x30c>
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	f043 0304 	orr.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x324>
 8004bdc:	4b58      	ldr	r3, [pc, #352]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a57      	ldr	r2, [pc, #348]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	4b55      	ldr	r3, [pc, #340]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a54      	ldr	r2, [pc, #336]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004bee:	f023 0304 	bic.w	r3, r3, #4
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d015      	beq.n	8004c28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fe f990 	bl	8002f20 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fe f98c 	bl	8002f20 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e0cb      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0ee      	beq.n	8004c04 <HAL_RCC_OscConfig+0x334>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c28:	f7fe f97a 	bl	8002f20 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fe f976 	bl	8002f20 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0b5      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ee      	bne.n	8004c30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	4a38      	ldr	r2, [pc, #224]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80a1 	beq.w	8004db0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6e:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d05c      	beq.n	8004d34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d141      	bne.n	8004d06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c82:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fe f94a 	bl	8002f20 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c90:	f7fe f946 	bl	8002f20 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e087      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	019b      	lsls	r3, r3, #6
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	491b      	ldr	r1, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fe f91f 	bl	8002f20 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fe f91b 	bl	8002f20 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e05c      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x416>
 8004d04:	e054      	b.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCC_OscConfig+0x478>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe f908 	bl	8002f20 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fe f904 	bl	8002f20 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e045      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_OscConfig+0x470>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x444>
 8004d32:	e03d      	b.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e038      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40007000 	.word	0x40007000
 8004d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_RCC_OscConfig+0x4ec>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d028      	beq.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d121      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d11a      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d111      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	3b01      	subs	r3, #1
 8004d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0cc      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d90c      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d001      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0b8      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e14:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e2c:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a52      	ldr	r2, [pc, #328]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	494d      	ldr	r1, [pc, #308]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d044      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5e:	4b47      	ldr	r3, [pc, #284]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d119      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e07f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d107      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7e:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8e:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e067      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4934      	ldr	r1, [pc, #208]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb0:	f7fe f836 	bl	8002f20 <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb8:	f7fe f832 	bl	8002f20 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04f      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ece:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 020c 	and.w	r2, r3, #12
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1eb      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d20c      	bcs.n	8004f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e032      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4916      	ldr	r1, [pc, #88]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	490e      	ldr	r1, [pc, #56]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f46:	f000 f821 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	490a      	ldr	r1, [pc, #40]	; (8004f80 <HAL_RCC_ClockConfig+0x1c0>)
 8004f58:	5ccb      	ldrb	r3, [r1, r3]
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1c4>)
 8004f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd ff96 	bl	8002e98 <HAL_InitTick>

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40023c00 	.word	0x40023c00
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	08009bb0 	.word	0x08009bb0
 8004f84:	20000038 	.word	0x20000038
 8004f88:	20000060 	.word	0x20000060

08004f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f90:	b094      	sub	sp, #80	; 0x50
 8004f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
 8004f98:	2300      	movs	r3, #0
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa4:	4b79      	ldr	r3, [pc, #484]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 030c 	and.w	r3, r3, #12
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d00d      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x40>
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	f200 80e1 	bhi.w	8005178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d003      	beq.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fbe:	e0db      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b73      	ldr	r3, [pc, #460]	; (8005190 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fc4:	e0db      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc6:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fca:	e0d8      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fcc:	4b6f      	ldr	r3, [pc, #444]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd6:	4b6d      	ldr	r3, [pc, #436]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d063      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b6a      	ldr	r3, [pc, #424]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	2200      	movs	r2, #0
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	0159      	lsls	r1, r3, #5
 800500c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005010:	0150      	lsls	r0, r2, #5
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4621      	mov	r1, r4
 8005018:	1a51      	subs	r1, r2, r1
 800501a:	6139      	str	r1, [r7, #16]
 800501c:	4629      	mov	r1, r5
 800501e:	eb63 0301 	sbc.w	r3, r3, r1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005030:	4659      	mov	r1, fp
 8005032:	018b      	lsls	r3, r1, #6
 8005034:	4651      	mov	r1, sl
 8005036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503a:	4651      	mov	r1, sl
 800503c:	018a      	lsls	r2, r1, #6
 800503e:	4651      	mov	r1, sl
 8005040:	ebb2 0801 	subs.w	r8, r2, r1
 8005044:	4659      	mov	r1, fp
 8005046:	eb63 0901 	sbc.w	r9, r3, r1
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505e:	4690      	mov	r8, r2
 8005060:	4699      	mov	r9, r3
 8005062:	4623      	mov	r3, r4
 8005064:	eb18 0303 	adds.w	r3, r8, r3
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	462b      	mov	r3, r5
 800506c:	eb49 0303 	adc.w	r3, r9, r3
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800507e:	4629      	mov	r1, r5
 8005080:	024b      	lsls	r3, r1, #9
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005088:	4621      	mov	r1, r4
 800508a:	024a      	lsls	r2, r1, #9
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	2200      	movs	r2, #0
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
 8005096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800509c:	f7fb f8f8 	bl	8000290 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	e058      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b38      	ldr	r3, [pc, #224]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	4611      	mov	r1, r2
 80050b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
 80050c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050c4:	4642      	mov	r2, r8
 80050c6:	464b      	mov	r3, r9
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	0159      	lsls	r1, r3, #5
 80050d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d6:	0150      	lsls	r0, r2, #5
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4641      	mov	r1, r8
 80050de:	ebb2 0a01 	subs.w	sl, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050fc:	ebb2 040a 	subs.w	r4, r2, sl
 8005100:	eb63 050b 	sbc.w	r5, r3, fp
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	00eb      	lsls	r3, r5, #3
 800510e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005112:	00e2      	lsls	r2, r4, #3
 8005114:	4614      	mov	r4, r2
 8005116:	461d      	mov	r5, r3
 8005118:	4643      	mov	r3, r8
 800511a:	18e3      	adds	r3, r4, r3
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	464b      	mov	r3, r9
 8005120:	eb45 0303 	adc.w	r3, r5, r3
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005132:	4629      	mov	r1, r5
 8005134:	028b      	lsls	r3, r1, #10
 8005136:	4621      	mov	r1, r4
 8005138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800513c:	4621      	mov	r1, r4
 800513e:	028a      	lsls	r2, r1, #10
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	61fa      	str	r2, [r7, #28]
 800514c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005150:	f7fb f89e 	bl	8000290 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_GetSysClockFreq+0x200>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	3301      	adds	r3, #1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800516c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005176:	e002      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetSysClockFreq+0x204>)
 800517a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800517c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005180:	4618      	mov	r0, r3
 8005182:	3750      	adds	r7, #80	; 0x50
 8005184:	46bd      	mov	sp, r7
 8005186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	00f42400 	.word	0x00f42400
 8005194:	007a1200 	.word	0x007a1200

08005198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_GetHCLKFreq+0x14>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000038 	.word	0x20000038

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff0 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08009bc0 	.word	0x08009bc0

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051dc:	f7ff ffdc 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0b5b      	lsrs	r3, r3, #13
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	08009bc0 	.word	0x08009bc0

08005200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005224:	2b00      	cmp	r3, #0
 8005226:	d105      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005230:	2b00      	cmp	r3, #0
 8005232:	d075      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005234:	4b91      	ldr	r3, [pc, #580]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800523a:	f7fd fe71 	bl	8002f20 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005242:	f7fd fe6d 	bl	8002f20 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e189      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005254:	4b8a      	ldr	r3, [pc, #552]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	019a      	lsls	r2, r3, #6
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	071b      	lsls	r3, r3, #28
 8005278:	4981      	ldr	r1, [pc, #516]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01f      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800528c:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005292:	0f1b      	lsrs	r3, r3, #28
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	019a      	lsls	r2, r3, #6
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	431a      	orrs	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	071b      	lsls	r3, r3, #28
 80052ac:	4974      	ldr	r1, [pc, #464]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052b4:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ba:	f023 021f 	bic.w	r2, r3, #31
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	496e      	ldr	r1, [pc, #440]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	019a      	lsls	r2, r3, #6
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	4964      	ldr	r1, [pc, #400]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052f4:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052fa:	f7fd fe11 	bl	8002f20 <HAL_GetTick>
 80052fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005302:	f7fd fe0d 	bl	8002f20 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e129      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005334:	2b00      	cmp	r3, #0
 8005336:	d079      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005338:	4b52      	ldr	r3, [pc, #328]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800533e:	f7fd fdef 	bl	8002f20 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005346:	f7fd fdeb 	bl	8002f20 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e107      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005358:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d0ef      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	0f1b      	lsrs	r3, r3, #28
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	019a      	lsls	r2, r3, #6
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	431a      	orrs	r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	493b      	ldr	r1, [pc, #236]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800539a:	4b39      	ldr	r3, [pc, #228]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01e      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053c0:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	019a      	lsls	r2, r3, #6
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	4927      	ldr	r1, [pc, #156]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	4922      	ldr	r1, [pc, #136]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053fe:	4b21      	ldr	r3, [pc, #132]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005404:	f7fd fd8c 	bl	8002f20 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800540c:	f7fd fd88 	bl	8002f20 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0a4      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542a:	d1ef      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 808b 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005448:	6413      	str	r3, [r2, #64]	; 0x40
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005460:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005462:	f7fd fd5d 	bl	8002f20 <HAL_GetTick>
 8005466:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005468:	e010      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800546a:	f7fd fd59 	bl	8002f20 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d909      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e075      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800547c:	42470068 	.word	0x42470068
 8005480:	40023800 	.word	0x40023800
 8005484:	42470070 	.word	0x42470070
 8005488:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800548c:	4b38      	ldr	r3, [pc, #224]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0e8      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005498:	4b36      	ldr	r3, [pc, #216]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02f      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d028      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054b6:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c0:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054cc:	4a29      	ldr	r2, [pc, #164]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054d2:	4b28      	ldr	r3, [pc, #160]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d114      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054de:	f7fd fd1f 	bl	8002f20 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fd fd1b 	bl	8002f20 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e035      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ee      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	4912      	ldr	r1, [pc, #72]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]
 8005530:	e005      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005538:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554a:	490a      	ldr	r1, [pc, #40]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800554c:	4313      	orrs	r3, r2
 800554e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005564:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40007000 	.word	0x40007000
 8005574:	40023800 	.word	0x40023800
 8005578:	42470e40 	.word	0x42470e40
 800557c:	424711e0 	.word	0x424711e0

08005580 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e066      	b.n	8005664 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7f5b      	ldrb	r3, [r3, #29]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fc f91c 	bl	80017e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	22ca      	movs	r2, #202	; 0xca
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2253      	movs	r2, #83	; 0x53
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f998 	bl	80058f8 <RTC_EnterInitMode>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d12c      	bne.n	800562c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68d2      	ldr	r2, [r2, #12]
 800560c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6919      	ldr	r1, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	041a      	lsls	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f99f 	bl	8005966 <RTC_ExitInitMode>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d113      	bne.n	800565a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	22ff      	movs	r2, #255	; 0xff
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	7f1b      	ldrb	r3, [r3, #28]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_RTC_SetTime+0x1c>
 8005684:	2302      	movs	r3, #2
 8005686:	e087      	b.n	8005798 <HAL_RTC_SetTime+0x12c>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2202      	movs	r2, #2
 8005692:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d126      	bne.n	80056e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f97c 	bl	80059b0 <RTC_ByteToBcd2>
 80056b8:	4603      	mov	r3, r0
 80056ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 f975 	bl	80059b0 <RTC_ByteToBcd2>
 80056c6:	4603      	mov	r3, r0
 80056c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	789b      	ldrb	r3, [r3, #2]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f96d 	bl	80059b0 <RTC_ByteToBcd2>
 80056d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	78db      	ldrb	r3, [r3, #3]
 80056e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e018      	b.n	800571a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005708:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800570e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	78db      	ldrb	r3, [r3, #3]
 8005714:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	22ca      	movs	r2, #202	; 0xca
 8005720:	625a      	str	r2, [r3, #36]	; 0x24
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2253      	movs	r2, #83	; 0x53
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8e4 	bl	80058f8 <RTC_EnterInitMode>
 8005730:	4603      	mov	r3, r0
 8005732:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d120      	bne.n	800577c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005744:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005748:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005758:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6899      	ldr	r1, [r3, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8f7 	bl	8005966 <RTC_ExitInitMode>
 8005778:	4603      	mov	r3, r0
 800577a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	22ff      	movs	r2, #255	; 0xff
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	771a      	strb	r2, [r3, #28]

  return status;
 8005796:	7cfb      	ldrb	r3, [r7, #19]
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd90      	pop	{r4, r7, pc}

080057a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	7f1b      	ldrb	r3, [r3, #28]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_RTC_SetDate+0x1c>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e071      	b.n	80058a0 <HAL_RTC_SetDate+0x100>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2202      	movs	r2, #2
 80057c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10e      	bne.n	80057ec <HAL_RTC_SetDate+0x4c>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	330a      	adds	r3, #10
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11c      	bne.n	800582c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	78db      	ldrb	r3, [r3, #3]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f8da 	bl	80059b0 <RTC_ByteToBcd2>
 80057fc:	4603      	mov	r3, r0
 80057fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f8d3 	bl	80059b0 <RTC_ByteToBcd2>
 800580a:	4603      	mov	r3, r0
 800580c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800580e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	789b      	ldrb	r3, [r3, #2]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f8cb 	bl	80059b0 <RTC_ByteToBcd2>
 800581a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800581c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e00e      	b.n	800584a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005838:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800583e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	22ca      	movs	r2, #202	; 0xca
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2253      	movs	r2, #83	; 0x53
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f84c 	bl	80058f8 <RTC_EnterInitMode>
 8005860:	4603      	mov	r3, r0
 8005862:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005878:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f873 	bl	8005966 <RTC_ExitInitMode>
 8005880:	4603      	mov	r3, r0
 8005882:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005884:	7cfb      	ldrb	r3, [r7, #19]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	771a      	strb	r2, [r3, #28]

  return status;
 800589e:	7cfb      	ldrb	r3, [r7, #19]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}

080058a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c4:	f7fd fb2c 	bl	8002f20 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058ca:	e009      	b.n	80058e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058cc:	f7fd fb28 	bl	8002f20 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058da:	d901      	bls.n	80058e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e007      	b.n	80058f0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ee      	beq.n	80058cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d122      	bne.n	800595c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005924:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005926:	f7fd fafb 	bl	8002f20 <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800592c:	e00c      	b.n	8005948 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800592e:	f7fd faf7 	bl	8002f20 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800593c:	d904      	bls.n	8005948 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2204      	movs	r2, #4
 8005942:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <RTC_EnterInitMode+0x64>
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d1e8      	bne.n	800592e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005980:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff89 	bl	80058a8 <HAL_RTC_WaitForSynchro>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80059be:	e005      	b.n	80059cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	3301      	adds	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	3b0a      	subs	r3, #10
 80059ca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b09      	cmp	r3, #9
 80059d0:	d8f6      	bhi.n	80059c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	4313      	orrs	r3, r2
 80059dc:	b2db      	uxtb	r3, r3
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e041      	b.n	8005a80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fb ff11 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f000 ff37 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04e      	b.n	8005b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d01d      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d111      	bne.n	8005b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d010      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2a:	e007      	b.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40001800 	.word	0x40001800

08005b68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e041      	b.n	8005bfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f839 	bl	8005c06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f000 fe78 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_TIM_PWM_Start+0x24>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e022      	b.n	8005c86 <HAL_TIM_PWM_Start+0x6a>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d109      	bne.n	8005c5a <HAL_TIM_PWM_Start+0x3e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	e015      	b.n	8005c86 <HAL_TIM_PWM_Start+0x6a>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d109      	bne.n	8005c74 <HAL_TIM_PWM_Start+0x58>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e008      	b.n	8005c86 <HAL_TIM_PWM_Start+0x6a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e07c      	b.n	8005d88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0x82>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c9c:	e013      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xaa>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0x92>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cac:	e00b      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xaa>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xa2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cbc:	e003      	b.n	8005cc6 <HAL_TIM_PWM_Start+0xaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f9f8 	bl	80070c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <HAL_TIM_PWM_Start+0x174>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_TIM_PWM_Start+0xcc>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2c      	ldr	r2, [pc, #176]	; (8005d94 <HAL_TIM_PWM_Start+0x178>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d101      	bne.n	8005cec <HAL_TIM_PWM_Start+0xd0>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_TIM_PWM_Start+0xd2>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <HAL_TIM_PWM_Start+0x174>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d022      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d01d      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <HAL_TIM_PWM_Start+0x17c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <HAL_TIM_PWM_Start+0x180>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_TIM_PWM_Start+0x184>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <HAL_TIM_PWM_Start+0x178>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <HAL_TIM_PWM_Start+0x188>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_TIM_PWM_Start+0x136>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_TIM_PWM_Start+0x18c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d111      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b06      	cmp	r3, #6
 8005d62:	d010      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d74:	e007      	b.n	8005d86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40014000 	.word	0x40014000
 8005da8:	40001800 	.word	0x40001800

08005dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f980 	bl	80070c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <HAL_TIM_PWM_Stop+0xd8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_PWM_Stop+0x2c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_TIM_PWM_Stop+0xdc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_PWM_Stop+0x30>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_TIM_PWM_Stop+0x32>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d017      	beq.n	8005e12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_TIM_PWM_Stop+0x66>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	f240 4344 	movw	r3, #1092	; 0x444
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <HAL_TIM_PWM_Stop+0x66>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <HAL_TIM_PWM_Stop+0x96>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	f240 4344 	movw	r3, #1092	; 0x444
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_PWM_Stop+0x96>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Stop+0xa6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Stop+0xce>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Stop+0xb6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Stop+0xce>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Stop+0xc6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Stop+0xce>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e041      	b.n	8005f22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fb fd92 	bl	80019dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f000 fce6 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_IC_Start_IT+0x1e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	e013      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0x46>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_IC_Start_IT+0x2e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	e00b      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0x46>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Start_IT+0x3e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	e003      	b.n	8005f72 <HAL_TIM_IC_Start_IT+0x46>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_TIM_IC_Start_IT+0x58>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	e013      	b.n	8005fac <HAL_TIM_IC_Start_IT+0x80>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d104      	bne.n	8005f94 <HAL_TIM_IC_Start_IT+0x68>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e00b      	b.n	8005fac <HAL_TIM_IC_Start_IT+0x80>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d104      	bne.n	8005fa4 <HAL_TIM_IC_Start_IT+0x78>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	e003      	b.n	8005fac <HAL_TIM_IC_Start_IT+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d102      	bne.n	8005fba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fb4:	7b7b      	ldrb	r3, [r7, #13]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d001      	beq.n	8005fbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0cc      	b.n	8006158 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_IC_Start_IT+0xa2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	e013      	b.n	8005ff6 <HAL_TIM_IC_Start_IT+0xca>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_IC_Start_IT+0xb2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	e00b      	b.n	8005ff6 <HAL_TIM_IC_Start_IT+0xca>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_IC_Start_IT+0xc2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	e003      	b.n	8005ff6 <HAL_TIM_IC_Start_IT+0xca>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <HAL_TIM_IC_Start_IT+0xda>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006004:	e013      	b.n	800602e <HAL_TIM_IC_Start_IT+0x102>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d104      	bne.n	8006016 <HAL_TIM_IC_Start_IT+0xea>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006014:	e00b      	b.n	800602e <HAL_TIM_IC_Start_IT+0x102>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d104      	bne.n	8006026 <HAL_TIM_IC_Start_IT+0xfa>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006024:	e003      	b.n	800602e <HAL_TIM_IC_Start_IT+0x102>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b0c      	cmp	r3, #12
 8006032:	d841      	bhi.n	80060b8 <HAL_TIM_IC_Start_IT+0x18c>
 8006034:	a201      	add	r2, pc, #4	; (adr r2, 800603c <HAL_TIM_IC_Start_IT+0x110>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	08006071 	.word	0x08006071
 8006040:	080060b9 	.word	0x080060b9
 8006044:	080060b9 	.word	0x080060b9
 8006048:	080060b9 	.word	0x080060b9
 800604c:	08006083 	.word	0x08006083
 8006050:	080060b9 	.word	0x080060b9
 8006054:	080060b9 	.word	0x080060b9
 8006058:	080060b9 	.word	0x080060b9
 800605c:	08006095 	.word	0x08006095
 8006060:	080060b9 	.word	0x080060b9
 8006064:	080060b9 	.word	0x080060b9
 8006068:	080060b9 	.word	0x080060b9
 800606c:	080060a7 	.word	0x080060a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0202 	orr.w	r2, r2, #2
 800607e:	60da      	str	r2, [r3, #12]
      break;
 8006080:	e01d      	b.n	80060be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0204 	orr.w	r2, r2, #4
 8006090:	60da      	str	r2, [r3, #12]
      break;
 8006092:	e014      	b.n	80060be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0208 	orr.w	r2, r2, #8
 80060a2:	60da      	str	r2, [r3, #12]
      break;
 80060a4:	e00b      	b.n	80060be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0210 	orr.w	r2, r2, #16
 80060b4:	60da      	str	r2, [r3, #12]
      break;
 80060b6:	e002      	b.n	80060be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d148      	bne.n	8006156 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2201      	movs	r2, #1
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fff9 	bl	80070c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_TIM_IC_Start_IT+0x234>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d01d      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <HAL_TIM_IC_Start_IT+0x238>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_TIM_IC_Start_IT+0x23c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1b      	ldr	r2, [pc, #108]	; (800616c <HAL_TIM_IC_Start_IT+0x240>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <HAL_TIM_IC_Start_IT+0x244>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a18      	ldr	r2, [pc, #96]	; (8006174 <HAL_TIM_IC_Start_IT+0x248>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIM_IC_Start_IT+0x1f6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a16      	ldr	r2, [pc, #88]	; (8006178 <HAL_TIM_IC_Start_IT+0x24c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d111      	bne.n	8006146 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d010      	beq.n	8006156 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	e007      	b.n	8006156 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40010000 	.word	0x40010000
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	40000c00 	.word	0x40000c00
 8006170:	40010400 	.word	0x40010400
 8006174:	40014000 	.word	0x40014000
 8006178:	40001800 	.word	0x40001800

0800617c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b02      	cmp	r3, #2
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0202 	mvn.w	r2, #2
 80061a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb fffe 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fb4a 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb51 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0204 	mvn.w	r2, #4
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fb ffd4 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb20 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb27 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b08      	cmp	r3, #8
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0208 	mvn.w	r2, #8
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb ffaa 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 faf6 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fafd 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b10      	cmp	r3, #16
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0210 	mvn.w	r2, #16
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2208      	movs	r2, #8
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fb ff80 	bl	80021c0 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 facc 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fad3 	bl	8006874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10e      	bne.n	8006300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d107      	bne.n	8006300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0201 	mvn.w	r2, #1
 80062f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fa fb46 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 ff78 	bl	800721c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa98 	bl	8006888 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b20      	cmp	r3, #32
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0220 	mvn.w	r2, #32
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 ff42 	bl	8007208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e088      	b.n	80064bc <HAL_TIM_IC_ConfigChannel+0x130>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f000 fcb8 	bl	8006d3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 020c 	bic.w	r2, r2, #12
 80063da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	619a      	str	r2, [r3, #24]
 80063ee:	e060      	b.n	80064b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d11c      	bne.n	8006430 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6819      	ldr	r1, [r3, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f000 fd3c 	bl	8006e82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006418:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6999      	ldr	r1, [r3, #24]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	021a      	lsls	r2, r3, #8
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	619a      	str	r2, [r3, #24]
 800642e:	e040      	b.n	80064b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b08      	cmp	r3, #8
 8006434:	d11b      	bne.n	800646e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f000 fd89 	bl	8006f5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 020c 	bic.w	r2, r2, #12
 8006458:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	61da      	str	r2, [r3, #28]
 800646c:	e021      	b.n	80064b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b0c      	cmp	r3, #12
 8006472:	d11c      	bne.n	80064ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6819      	ldr	r1, [r3, #0]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f000 fda6 	bl	8006fd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006496:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69d9      	ldr	r1, [r3, #28]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	021a      	lsls	r2, r3, #8
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	61da      	str	r2, [r3, #28]
 80064ac:	e001      	b.n	80064b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064de:	2302      	movs	r3, #2
 80064e0:	e0ae      	b.n	8006640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	f200 809f 	bhi.w	8006630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	0800652d 	.word	0x0800652d
 80064fc:	08006631 	.word	0x08006631
 8006500:	08006631 	.word	0x08006631
 8006504:	08006631 	.word	0x08006631
 8006508:	0800656d 	.word	0x0800656d
 800650c:	08006631 	.word	0x08006631
 8006510:	08006631 	.word	0x08006631
 8006514:	08006631 	.word	0x08006631
 8006518:	080065af 	.word	0x080065af
 800651c:	08006631 	.word	0x08006631
 8006520:	08006631 	.word	0x08006631
 8006524:	08006631 	.word	0x08006631
 8006528:	080065ef 	.word	0x080065ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fa52 	bl	80069dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6999      	ldr	r1, [r3, #24]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	619a      	str	r2, [r3, #24]
      break;
 800656a:	e064      	b.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 faa2 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6999      	ldr	r1, [r3, #24]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	619a      	str	r2, [r3, #24]
      break;
 80065ac:	e043      	b.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 faf7 	bl	8006ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0208 	orr.w	r2, r2, #8
 80065c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0204 	bic.w	r2, r2, #4
 80065d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69d9      	ldr	r1, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	61da      	str	r2, [r3, #28]
      break;
 80065ec:	e023      	b.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fb4b 	bl	8006c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69d9      	ldr	r1, [r3, #28]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	021a      	lsls	r2, r3, #8
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	61da      	str	r2, [r3, #28]
      break;
 800662e:	e002      	b.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	75fb      	strb	r3, [r7, #23]
      break;
 8006634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIM_ConfigClockSource+0x1c>
 8006660:	2302      	movs	r3, #2
 8006662:	e0b4      	b.n	80067ce <HAL_TIM_ConfigClockSource+0x186>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800668a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669c:	d03e      	beq.n	800671c <HAL_TIM_ConfigClockSource+0xd4>
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a2:	f200 8087 	bhi.w	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066aa:	f000 8086 	beq.w	80067ba <HAL_TIM_ConfigClockSource+0x172>
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b2:	d87f      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b70      	cmp	r3, #112	; 0x70
 80066b6:	d01a      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0xa6>
 80066b8:	2b70      	cmp	r3, #112	; 0x70
 80066ba:	d87b      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066bc:	2b60      	cmp	r3, #96	; 0x60
 80066be:	d050      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x11a>
 80066c0:	2b60      	cmp	r3, #96	; 0x60
 80066c2:	d877      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066c4:	2b50      	cmp	r3, #80	; 0x50
 80066c6:	d03c      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0xfa>
 80066c8:	2b50      	cmp	r3, #80	; 0x50
 80066ca:	d873      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d058      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x13a>
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d86f      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066d4:	2b30      	cmp	r3, #48	; 0x30
 80066d6:	d064      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x15a>
 80066d8:	2b30      	cmp	r3, #48	; 0x30
 80066da:	d86b      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d060      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x15a>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d867      	bhi.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d05c      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x15a>
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d05a      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x15a>
 80066ec:	e062      	b.n	80067b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6899      	ldr	r1, [r3, #8]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f000 fcc1 	bl	8007084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]
      break;
 800671a:	e04f      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f000 fcaa 	bl	8007084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800673e:	609a      	str	r2, [r3, #8]
      break;
 8006740:	e03c      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fb68 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2150      	movs	r1, #80	; 0x50
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fc77 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 8006760:	e02c      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	461a      	mov	r2, r3
 8006770:	f000 fbc4 	bl	8006efc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2160      	movs	r1, #96	; 0x60
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fc67 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 8006780:	e01c      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6859      	ldr	r1, [r3, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	f000 fb48 	bl	8006e24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2140      	movs	r1, #64	; 0x40
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fc57 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80067a0:	e00c      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f000 fc4e 	bl	800704e <TIM_ITRx_SetConfig>
      break;
 80067b2:	e003      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
      break;
 80067b8:	e000      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b0c      	cmp	r3, #12
 80067ea:	d831      	bhi.n	8006850 <HAL_TIM_ReadCapturedValue+0x78>
 80067ec:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006829 	.word	0x08006829
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006851 	.word	0x08006851
 8006800:	08006851 	.word	0x08006851
 8006804:	08006833 	.word	0x08006833
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006851 	.word	0x08006851
 800681c:	08006851 	.word	0x08006851
 8006820:	08006851 	.word	0x08006851
 8006824:	08006847 	.word	0x08006847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	60fb      	str	r3, [r7, #12]

      break;
 8006830:	e00f      	b.n	8006852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	60fb      	str	r3, [r7, #12]

      break;
 800683a:	e00a      	b.n	8006852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	60fb      	str	r3, [r7, #12]

      break;
 8006844:	e005      	b.n	8006852 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	60fb      	str	r3, [r7, #12]

      break;
 800684e:	e000      	b.n	8006852 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006850:	bf00      	nop
  }

  return tmpreg;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d00f      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3d      	ldr	r2, [pc, #244]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <TIM_Base_SetConfig+0x120>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d108      	bne.n	80068ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fc:	d027      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d023      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_Base_SetConfig+0x120>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_Base_SetConfig+0x128>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <TIM_Base_SetConfig+0x130>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_Base_SetConfig+0x134>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <TIM_Base_SetConfig+0x138>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <TIM_Base_SetConfig+0x13c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0xf8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d103      	bne.n	800699c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f023 0201 	bic.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 0302 	bic.w	r3, r3, #2
 8006a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <TIM_OC1_SetConfig+0xd8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC1_SetConfig+0x64>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <TIM_OC1_SetConfig+0xdc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10c      	bne.n	8006a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 0308 	bic.w	r3, r3, #8
 8006a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0304 	bic.w	r3, r3, #4
 8006a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_OC1_SetConfig+0xd8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_OC1_SetConfig+0x8e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_OC1_SetConfig+0xdc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d111      	bne.n	8006a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	621a      	str	r2, [r3, #32]
}
 8006aa8:	bf00      	nop
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0210 	bic.w	r2, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0320 	bic.w	r3, r3, #32
 8006b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <TIM_OC2_SetConfig+0xe4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC2_SetConfig+0x68>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10d      	bne.n	8006b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <TIM_OC2_SetConfig+0xe4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC2_SetConfig+0x94>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d113      	bne.n	8006b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <TIM_OC3_SetConfig+0xe0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC3_SetConfig+0x66>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a20      	ldr	r2, [pc, #128]	; (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10d      	bne.n	8006c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <TIM_OC3_SetConfig+0xe0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0x92>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d113      	bne.n	8006c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40010400 	.word	0x40010400

08006c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <TIM_OC4_SetConfig+0xa4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC4_SetConfig+0x68>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a11      	ldr	r2, [pc, #68]	; (8006d38 <TIM_OC4_SetConfig+0xa8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d109      	bne.n	8006d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	019b      	lsls	r3, r3, #6
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40010400 	.word	0x40010400

08006d3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <TIM_TI1_SetConfig+0xcc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01b      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d017      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <TIM_TI1_SetConfig+0xd0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a24      	ldr	r2, [pc, #144]	; (8006e10 <TIM_TI1_SetConfig+0xd4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00f      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a23      	ldr	r2, [pc, #140]	; (8006e14 <TIM_TI1_SetConfig+0xd8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00b      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <TIM_TI1_SetConfig+0xdc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d007      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <TIM_TI1_SetConfig+0xe0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d003      	beq.n	8006da2 <TIM_TI1_SetConfig+0x66>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <TIM_TI1_SetConfig+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d101      	bne.n	8006da6 <TIM_TI1_SetConfig+0x6a>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <TIM_TI1_SetConfig+0x6c>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e003      	b.n	8006dc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 030a 	bic.w	r3, r3, #10
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 030a 	and.w	r3, r3, #10
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40010400 	.word	0x40010400
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40001800 	.word	0x40001800

08006e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f023 0210 	bic.w	r2, r3, #16
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	031b      	lsls	r3, r3, #12
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	f023 0210 	bic.w	r2, r3, #16
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 0303 	bic.w	r3, r3, #3
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007012:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	031b      	lsls	r3, r3, #12
 8007018:	b29b      	uxth	r3, r3
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007026:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	031b      	lsls	r3, r3, #12
 800702c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	f043 0307 	orr.w	r3, r3, #7
 8007070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	609a      	str	r2, [r3, #8]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800709e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	609a      	str	r2, [r3, #8]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	2201      	movs	r2, #1
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	401a      	ands	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	fa01 f303 	lsl.w	r3, r1, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007124:	2302      	movs	r3, #2
 8007126:	e05a      	b.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a21      	ldr	r2, [pc, #132]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d01d      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a17      	ldr	r2, [pc, #92]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a15      	ldr	r2, [pc, #84]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10c      	bne.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40010400 	.word	0x40010400
 8007200:	40014000 	.word	0x40014000
 8007204:	40001800 	.word	0x40001800

08007208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e03f      	b.n	80072c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fa fc96 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	; 0x24
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fddf 	bl	8007e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695a      	ldr	r2, [r3, #20]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b08a      	sub	sp, #40	; 0x28
 80072ce:	af02      	add	r7, sp, #8
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d17c      	bne.n	80073e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_UART_Transmit+0x2c>
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e075      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit+0x3e>
 8007304:	2302      	movs	r3, #2
 8007306:	e06e      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2221      	movs	r2, #33	; 0x21
 800731a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800731e:	f7fb fdff 	bl	8002f20 <HAL_GetTick>
 8007322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	88fa      	ldrh	r2, [r7, #6]
 800732e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d108      	bne.n	800734c <HAL_UART_Transmit+0x82>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d104      	bne.n	800734c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e003      	b.n	8007354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800735c:	e02a      	b.n	80073b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	2180      	movs	r1, #128	; 0x80
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fb1f 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e036      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800738c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	3302      	adds	r3, #2
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	e007      	b.n	80073a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1cf      	bne.n	800735e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	2140      	movs	r1, #64	; 0x40
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 faef 	bl	80079ac <UART_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e000      	b.n	80073e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073e4:	2302      	movs	r3, #2
  }
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b20      	cmp	r3, #32
 8007406:	d11d      	bne.n	8007444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Receive_IT+0x26>
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e016      	b.n	8007446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_UART_Receive_IT+0x38>
 8007422:	2302      	movs	r3, #2
 8007424:	e00f      	b.n	8007446 <HAL_UART_Receive_IT+0x58>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	461a      	mov	r2, r3
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fb24 	bl	8007a88 <UART_Start_Receive_IT>
 8007440:	4603      	mov	r3, r0
 8007442:	e000      	b.n	8007446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b0ba      	sub	sp, #232	; 0xe8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007476:	2300      	movs	r3, #0
 8007478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800748e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10f      	bne.n	80074b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <HAL_UART_IRQHandler+0x66>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc07 	bl	8007cc2 <UART_Receive_IT>
      return;
 80074b4:	e256      	b.n	8007964 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80de 	beq.w	800767c <HAL_UART_IRQHandler+0x22c>
 80074c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d106      	bne.n	80074da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80d1 	beq.w	800767c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <HAL_UART_IRQHandler+0xae>
 80074e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0201 	orr.w	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <HAL_UART_IRQHandler+0xd2>
 800750a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f043 0202 	orr.w	r2, r3, #2
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <HAL_UART_IRQHandler+0xf6>
 800752e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f043 0204 	orr.w	r2, r3, #4
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d011      	beq.n	8007576 <HAL_UART_IRQHandler+0x126>
 8007552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d105      	bne.n	800756a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800755e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f043 0208 	orr.w	r2, r3, #8
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 81ed 	beq.w	800795a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_UART_IRQHandler+0x14e>
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb92 	bl	8007cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	f003 0308 	and.w	r3, r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <HAL_UART_IRQHandler+0x17a>
 80075c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d04f      	beq.n	800766a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa9a 	bl	8007b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d141      	bne.n	8007662 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800760a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800760e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1d9      	bne.n	80075de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d013      	beq.n	800765a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	4a7d      	ldr	r2, [pc, #500]	; (800782c <HAL_UART_IRQHandler+0x3dc>)
 8007638:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	4618      	mov	r0, r3
 8007640:	f7fb fe1f 	bl	8003282 <HAL_DMA_Abort_IT>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	e00e      	b.n	8007678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f990 	bl	8007980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	e00a      	b.n	8007678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f98c 	bl	8007980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	e006      	b.n	8007678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f988 	bl	8007980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007676:	e170      	b.n	800795a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007678:	bf00      	nop
    return;
 800767a:	e16e      	b.n	800795a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	2b01      	cmp	r3, #1
 8007682:	f040 814a 	bne.w	800791a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8143 	beq.w	800791a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 813c 	beq.w	800791a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	f040 80b4 	bne.w	8007830 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8140 	beq.w	800795e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076e6:	429a      	cmp	r2, r3
 80076e8:	f080 8139 	bcs.w	800795e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fe:	f000 8088 	beq.w	8007812 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800771c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800772e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800773a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1d9      	bne.n	8007702 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3314      	adds	r3, #20
 8007754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800775e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3314      	adds	r3, #20
 800776e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800777a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e1      	bne.n	800774e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3314      	adds	r3, #20
 8007790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3314      	adds	r3, #20
 80077aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e3      	bne.n	800778a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80077f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e3      	bne.n	80077d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	4618      	mov	r0, r3
 800780e:	f7fb fcc8 	bl	80031a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800781a:	b29b      	uxth	r3, r3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	b29b      	uxth	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8b6 	bl	8007994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007828:	e099      	b.n	800795e <HAL_UART_IRQHandler+0x50e>
 800782a:	bf00      	nop
 800782c:	08007bcb 	.word	0x08007bcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007838:	b29b      	uxth	r3, r3
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 808b 	beq.w	8007962 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800784c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 8086 	beq.w	8007962 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800787a:	647a      	str	r2, [r7, #68]	; 0x44
 800787c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e3      	bne.n	8007856 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	623b      	str	r3, [r7, #32]
   return(result);
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078b2:	633a      	str	r2, [r7, #48]	; 0x30
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e3      	bne.n	800788e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0310 	bic.w	r3, r3, #16
 80078ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078f8:	61fa      	str	r2, [r7, #28]
 80078fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	69b9      	ldr	r1, [r7, #24]
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	617b      	str	r3, [r7, #20]
   return(result);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e3      	bne.n	80078d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800790c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f83e 	bl	8007994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007918:	e023      	b.n	8007962 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_UART_IRQHandler+0x4ea>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f95d 	bl	8007bf2 <UART_Transmit_IT>
    return;
 8007938:	e014      	b.n	8007964 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00e      	beq.n	8007964 <HAL_UART_IRQHandler+0x514>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d008      	beq.n	8007964 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f99d 	bl	8007c92 <UART_EndTransmit_IT>
    return;
 8007958:	e004      	b.n	8007964 <HAL_UART_IRQHandler+0x514>
    return;
 800795a:	bf00      	nop
 800795c:	e002      	b.n	8007964 <HAL_UART_IRQHandler+0x514>
      return;
 800795e:	bf00      	nop
 8007960:	e000      	b.n	8007964 <HAL_UART_IRQHandler+0x514>
      return;
 8007962:	bf00      	nop
  }
}
 8007964:	37e8      	adds	r7, #232	; 0xe8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b090      	sub	sp, #64	; 0x40
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	4613      	mov	r3, r2
 80079ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079bc:	e050      	b.n	8007a60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d04c      	beq.n	8007a60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <UART_WaitOnFlagUntilTimeout+0x30>
 80079cc:	f7fb faa8 	bl	8002f20 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d8:	429a      	cmp	r2, r3
 80079da:	d241      	bcs.n	8007a60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079fc:	637a      	str	r2, [r7, #52]	; 0x34
 80079fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e5      	bne.n	80079dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3314      	adds	r3, #20
 8007a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a30:	623a      	str	r2, [r7, #32]
 8007a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	69f9      	ldr	r1, [r7, #28]
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e5      	bne.n	8007a10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e00f      	b.n	8007a80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d09f      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3740      	adds	r7, #64	; 0x40
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2222      	movs	r2, #34	; 0x22
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695a      	ldr	r2, [r3, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0201 	orr.w	r2, r2, #1
 8007ae4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0220 	orr.w	r2, r2, #32
 8007af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b095      	sub	sp, #84	; 0x54
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b2c:	643a      	str	r2, [r7, #64]	; 0x40
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e5      	bne.n	8007b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d119      	bne.n	8007bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f023 0310 	bic.w	r3, r3, #16
 8007b92:	647b      	str	r3, [r7, #68]	; 0x44
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b9c:	61ba      	str	r2, [r7, #24]
 8007b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6979      	ldr	r1, [r7, #20]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e5      	bne.n	8007b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bbe:	bf00      	nop
 8007bc0:	3754      	adds	r7, #84	; 0x54
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fecb 	bl	8007980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b21      	cmp	r3, #33	; 0x21
 8007c04:	d13e      	bne.n	8007c84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0e:	d114      	bne.n	8007c3a <UART_Transmit_IT+0x48>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d110      	bne.n	8007c3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	1c9a      	adds	r2, r3, #2
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	621a      	str	r2, [r3, #32]
 8007c38:	e008      	b.n	8007c4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	1c59      	adds	r1, r3, #1
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6211      	str	r1, [r2, #32]
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10f      	bne.n	8007c80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	e000      	b.n	8007c86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c84:	2302      	movs	r3, #2
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fe5a 	bl	800796c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b08c      	sub	sp, #48	; 0x30
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b22      	cmp	r3, #34	; 0x22
 8007cd4:	f040 80ab 	bne.w	8007e2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce0:	d117      	bne.n	8007d12 <UART_Receive_IT+0x50>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d113      	bne.n	8007d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	1c9a      	adds	r2, r3, #2
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d10:	e026      	b.n	8007d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d24:	d007      	beq.n	8007d36 <UART_Receive_IT+0x74>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <UART_Receive_IT+0x82>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	e008      	b.n	8007d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d15a      	bne.n	8007e2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0220 	bic.w	r2, r2, #32
 8007d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695a      	ldr	r2, [r3, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d135      	bne.n	8007e20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f023 0310 	bic.w	r3, r3, #16
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dda:	623a      	str	r2, [r7, #32]
 8007ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	69f9      	ldr	r1, [r7, #28]
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d10a      	bne.n	8007e12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fdbb 	bl	8007994 <HAL_UARTEx_RxEventCallback>
 8007e1e:	e002      	b.n	8007e26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fa f8d5 	bl	8001fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e002      	b.n	8007e30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e000      	b.n	8007e30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e2e:	2302      	movs	r3, #2
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3730      	adds	r7, #48	; 0x30
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e3c:	b0c0      	sub	sp, #256	; 0x100
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	ea40 0301 	orr.w	r3, r0, r1
 8007e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e90:	f021 010c 	bic.w	r1, r1, #12
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb2:	6999      	ldr	r1, [r3, #24]
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	ea40 0301 	orr.w	r3, r0, r1
 8007ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b8f      	ldr	r3, [pc, #572]	; (8008104 <UART_SetConfig+0x2cc>)
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d005      	beq.n	8007ed8 <UART_SetConfig+0xa0>
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b8d      	ldr	r3, [pc, #564]	; (8008108 <UART_SetConfig+0x2d0>)
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d104      	bne.n	8007ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd f97e 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 8007edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ee0:	e003      	b.n	8007eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ee2:	f7fd f965 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 8007ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ef4:	f040 810c 	bne.w	8008110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	1891      	adds	r1, r2, r2
 8007f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f12:	415b      	adcs	r3, r3
 8007f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	eb12 0801 	adds.w	r8, r2, r1
 8007f20:	4629      	mov	r1, r5
 8007f22:	eb43 0901 	adc.w	r9, r3, r1
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f3a:	4690      	mov	r8, r2
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	eb18 0303 	adds.w	r3, r8, r3
 8007f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f48:	462b      	mov	r3, r5
 8007f4a:	eb49 0303 	adc.w	r3, r9, r3
 8007f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f66:	460b      	mov	r3, r1
 8007f68:	18db      	adds	r3, r3, r3
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	eb42 0303 	adc.w	r3, r2, r3
 8007f72:	657b      	str	r3, [r7, #84]	; 0x54
 8007f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f7c:	f7f8 f988 	bl	8000290 <__aeabi_uldivmod>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4b61      	ldr	r3, [pc, #388]	; (800810c <UART_SetConfig+0x2d4>)
 8007f86:	fba3 2302 	umull	r2, r3, r3, r2
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	011c      	lsls	r4, r3, #4
 8007f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fd0:	4692      	mov	sl, r2
 8007fd2:	469b      	mov	fp, r3
 8007fd4:	4643      	mov	r3, r8
 8007fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8007fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8007fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	18db      	adds	r3, r3, r3
 8008000:	643b      	str	r3, [r7, #64]	; 0x40
 8008002:	4613      	mov	r3, r2
 8008004:	eb42 0303 	adc.w	r3, r2, r3
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
 800800a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800800e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008012:	f7f8 f93d 	bl	8000290 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4611      	mov	r1, r2
 800801c:	4b3b      	ldr	r3, [pc, #236]	; (800810c <UART_SetConfig+0x2d4>)
 800801e:	fba3 2301 	umull	r2, r3, r3, r1
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	2264      	movs	r2, #100	; 0x64
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	1acb      	subs	r3, r1, r3
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008032:	4b36      	ldr	r3, [pc, #216]	; (800810c <UART_SetConfig+0x2d4>)
 8008034:	fba3 2302 	umull	r2, r3, r3, r2
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008040:	441c      	add	r4, r3
 8008042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008046:	2200      	movs	r2, #0
 8008048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800804c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008054:	4642      	mov	r2, r8
 8008056:	464b      	mov	r3, r9
 8008058:	1891      	adds	r1, r2, r2
 800805a:	63b9      	str	r1, [r7, #56]	; 0x38
 800805c:	415b      	adcs	r3, r3
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008064:	4641      	mov	r1, r8
 8008066:	1851      	adds	r1, r2, r1
 8008068:	6339      	str	r1, [r7, #48]	; 0x30
 800806a:	4649      	mov	r1, r9
 800806c:	414b      	adcs	r3, r1
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800807c:	4659      	mov	r1, fp
 800807e:	00cb      	lsls	r3, r1, #3
 8008080:	4651      	mov	r1, sl
 8008082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008086:	4651      	mov	r1, sl
 8008088:	00ca      	lsls	r2, r1, #3
 800808a:	4610      	mov	r0, r2
 800808c:	4619      	mov	r1, r3
 800808e:	4603      	mov	r3, r0
 8008090:	4642      	mov	r2, r8
 8008092:	189b      	adds	r3, r3, r2
 8008094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008098:	464b      	mov	r3, r9
 800809a:	460a      	mov	r2, r1
 800809c:	eb42 0303 	adc.w	r3, r2, r3
 80080a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80080b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80080b8:	460b      	mov	r3, r1
 80080ba:	18db      	adds	r3, r3, r3
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080be:	4613      	mov	r3, r2
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080ce:	f7f8 f8df 	bl	8000290 <__aeabi_uldivmod>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4b0d      	ldr	r3, [pc, #52]	; (800810c <UART_SetConfig+0x2d4>)
 80080d8:	fba3 1302 	umull	r1, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	2164      	movs	r1, #100	; 0x64
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	3332      	adds	r3, #50	; 0x32
 80080ea:	4a08      	ldr	r2, [pc, #32]	; (800810c <UART_SetConfig+0x2d4>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	095b      	lsrs	r3, r3, #5
 80080f2:	f003 0207 	and.w	r2, r3, #7
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4422      	add	r2, r4
 80080fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008100:	e105      	b.n	800830e <UART_SetConfig+0x4d6>
 8008102:	bf00      	nop
 8008104:	40011000 	.word	0x40011000
 8008108:	40011400 	.word	0x40011400
 800810c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008114:	2200      	movs	r2, #0
 8008116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800811a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800811e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008122:	4642      	mov	r2, r8
 8008124:	464b      	mov	r3, r9
 8008126:	1891      	adds	r1, r2, r2
 8008128:	6239      	str	r1, [r7, #32]
 800812a:	415b      	adcs	r3, r3
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
 800812e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008132:	4641      	mov	r1, r8
 8008134:	1854      	adds	r4, r2, r1
 8008136:	4649      	mov	r1, r9
 8008138:	eb43 0501 	adc.w	r5, r3, r1
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	f04f 0300 	mov.w	r3, #0
 8008144:	00eb      	lsls	r3, r5, #3
 8008146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800814a:	00e2      	lsls	r2, r4, #3
 800814c:	4614      	mov	r4, r2
 800814e:	461d      	mov	r5, r3
 8008150:	4643      	mov	r3, r8
 8008152:	18e3      	adds	r3, r4, r3
 8008154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008158:	464b      	mov	r3, r9
 800815a:	eb45 0303 	adc.w	r3, r5, r3
 800815e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800816e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800817e:	4629      	mov	r1, r5
 8008180:	008b      	lsls	r3, r1, #2
 8008182:	4621      	mov	r1, r4
 8008184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008188:	4621      	mov	r1, r4
 800818a:	008a      	lsls	r2, r1, #2
 800818c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008190:	f7f8 f87e 	bl	8000290 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4b60      	ldr	r3, [pc, #384]	; (800831c <UART_SetConfig+0x4e4>)
 800819a:	fba3 2302 	umull	r2, r3, r3, r2
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	011c      	lsls	r4, r3, #4
 80081a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80081b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	1891      	adds	r1, r2, r2
 80081ba:	61b9      	str	r1, [r7, #24]
 80081bc:	415b      	adcs	r3, r3
 80081be:	61fb      	str	r3, [r7, #28]
 80081c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081c4:	4641      	mov	r1, r8
 80081c6:	1851      	adds	r1, r2, r1
 80081c8:	6139      	str	r1, [r7, #16]
 80081ca:	4649      	mov	r1, r9
 80081cc:	414b      	adcs	r3, r1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081dc:	4659      	mov	r1, fp
 80081de:	00cb      	lsls	r3, r1, #3
 80081e0:	4651      	mov	r1, sl
 80081e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081e6:	4651      	mov	r1, sl
 80081e8:	00ca      	lsls	r2, r1, #3
 80081ea:	4610      	mov	r0, r2
 80081ec:	4619      	mov	r1, r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	4642      	mov	r2, r8
 80081f2:	189b      	adds	r3, r3, r2
 80081f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081f8:	464b      	mov	r3, r9
 80081fa:	460a      	mov	r2, r1
 80081fc:	eb42 0303 	adc.w	r3, r2, r3
 8008200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	67bb      	str	r3, [r7, #120]	; 0x78
 800820e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800821c:	4649      	mov	r1, r9
 800821e:	008b      	lsls	r3, r1, #2
 8008220:	4641      	mov	r1, r8
 8008222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008226:	4641      	mov	r1, r8
 8008228:	008a      	lsls	r2, r1, #2
 800822a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800822e:	f7f8 f82f 	bl	8000290 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <UART_SetConfig+0x4e4>)
 8008238:	fba3 1302 	umull	r1, r3, r3, r2
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	2164      	movs	r1, #100	; 0x64
 8008240:	fb01 f303 	mul.w	r3, r1, r3
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	3332      	adds	r3, #50	; 0x32
 800824a:	4a34      	ldr	r2, [pc, #208]	; (800831c <UART_SetConfig+0x4e4>)
 800824c:	fba2 2303 	umull	r2, r3, r2, r3
 8008250:	095b      	lsrs	r3, r3, #5
 8008252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008256:	441c      	add	r4, r3
 8008258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800825c:	2200      	movs	r2, #0
 800825e:	673b      	str	r3, [r7, #112]	; 0x70
 8008260:	677a      	str	r2, [r7, #116]	; 0x74
 8008262:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008266:	4642      	mov	r2, r8
 8008268:	464b      	mov	r3, r9
 800826a:	1891      	adds	r1, r2, r2
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	415b      	adcs	r3, r3
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008276:	4641      	mov	r1, r8
 8008278:	1851      	adds	r1, r2, r1
 800827a:	6039      	str	r1, [r7, #0]
 800827c:	4649      	mov	r1, r9
 800827e:	414b      	adcs	r3, r1
 8008280:	607b      	str	r3, [r7, #4]
 8008282:	f04f 0200 	mov.w	r2, #0
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800828e:	4659      	mov	r1, fp
 8008290:	00cb      	lsls	r3, r1, #3
 8008292:	4651      	mov	r1, sl
 8008294:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008298:	4651      	mov	r1, sl
 800829a:	00ca      	lsls	r2, r1, #3
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	4603      	mov	r3, r0
 80082a2:	4642      	mov	r2, r8
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082a8:	464b      	mov	r3, r9
 80082aa:	460a      	mov	r2, r1
 80082ac:	eb42 0303 	adc.w	r3, r2, r3
 80082b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	663b      	str	r3, [r7, #96]	; 0x60
 80082bc:	667a      	str	r2, [r7, #100]	; 0x64
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082ca:	4649      	mov	r1, r9
 80082cc:	008b      	lsls	r3, r1, #2
 80082ce:	4641      	mov	r1, r8
 80082d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d4:	4641      	mov	r1, r8
 80082d6:	008a      	lsls	r2, r1, #2
 80082d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082dc:	f7f7 ffd8 	bl	8000290 <__aeabi_uldivmod>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4b0d      	ldr	r3, [pc, #52]	; (800831c <UART_SetConfig+0x4e4>)
 80082e6:	fba3 1302 	umull	r1, r3, r3, r2
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	2164      	movs	r1, #100	; 0x64
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	3332      	adds	r3, #50	; 0x32
 80082f8:	4a08      	ldr	r2, [pc, #32]	; (800831c <UART_SetConfig+0x4e4>)
 80082fa:	fba2 2303 	umull	r2, r3, r2, r3
 80082fe:	095b      	lsrs	r3, r3, #5
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4422      	add	r2, r4
 800830c:	609a      	str	r2, [r3, #8]
}
 800830e:	bf00      	nop
 8008310:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008314:	46bd      	mov	sp, r7
 8008316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800831a:	bf00      	nop
 800831c:	51eb851f 	.word	0x51eb851f

08008320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008320:	b084      	sub	sp, #16
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	f107 001c 	add.w	r0, r7, #28
 800832e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	2b01      	cmp	r3, #1
 8008336:	d122      	bne.n	800837e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d105      	bne.n	8008372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 faa2 	bl	80088bc <USB_CoreReset>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]
 800837c:	e01a      	b.n	80083b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa96 	bl	80088bc <USB_CoreReset>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
 80083a6:	e005      	b.n	80083b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d10b      	bne.n	80083d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f043 0206 	orr.w	r2, r3, #6
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f043 0220 	orr.w	r2, r3, #32
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083de:	b004      	add	sp, #16
 80083e0:	4770      	bx	lr

080083e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 0201 	bic.w	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d115      	bne.n	8008452 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008432:	2001      	movs	r0, #1
 8008434:	f7fa fd80 	bl	8002f38 <HAL_Delay>
      ms++;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3301      	adds	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa2e 	bl	80088a0 <USB_GetMode>
 8008444:	4603      	mov	r3, r0
 8008446:	2b01      	cmp	r3, #1
 8008448:	d01e      	beq.n	8008488 <USB_SetCurrentMode+0x84>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b31      	cmp	r3, #49	; 0x31
 800844e:	d9f0      	bls.n	8008432 <USB_SetCurrentMode+0x2e>
 8008450:	e01a      	b.n	8008488 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d115      	bne.n	8008484 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008464:	2001      	movs	r0, #1
 8008466:	f7fa fd67 	bl	8002f38 <HAL_Delay>
      ms++;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa15 	bl	80088a0 <USB_GetMode>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <USB_SetCurrentMode+0x84>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b31      	cmp	r3, #49	; 0x31
 8008480:	d9f0      	bls.n	8008464 <USB_SetCurrentMode+0x60>
 8008482:	e001      	b.n	8008488 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e005      	b.n	8008494 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b32      	cmp	r3, #50	; 0x32
 800848c:	d101      	bne.n	8008492 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800849c:	b084      	sub	sp, #16
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	e009      	b.n	80084d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3340      	adds	r3, #64	; 0x40
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3301      	adds	r3, #1
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b0e      	cmp	r3, #14
 80084d4:	d9f2      	bls.n	80084bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d11c      	bne.n	8008516 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ea:	f043 0302 	orr.w	r3, r3, #2
 80084ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	639a      	str	r2, [r3, #56]	; 0x38
 8008514:	e00b      	b.n	800852e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008534:	461a      	mov	r2, r3
 8008536:	2300      	movs	r3, #0
 8008538:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	4619      	mov	r1, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008548:	461a      	mov	r2, r3
 800854a:	680b      	ldr	r3, [r1, #0]
 800854c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10c      	bne.n	800856e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f965 	bl	800882c <USB_SetDevSpeed>
 8008562:	e008      	b.n	8008576 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f960 	bl	800882c <USB_SetDevSpeed>
 800856c:	e003      	b.n	8008576 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800856e:	2103      	movs	r1, #3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f95b 	bl	800882c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008576:	2110      	movs	r1, #16
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f8f3 	bl	8008764 <USB_FlushTxFifo>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f91f 	bl	80087cc <USB_FlushRxFifo>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	461a      	mov	r2, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085aa:	461a      	mov	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b6:	461a      	mov	r2, r3
 80085b8:	2300      	movs	r3, #0
 80085ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
 80085c0:	e043      	b.n	800864a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d8:	d118      	bne.n	800860c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ec:	461a      	mov	r2, r3
 80085ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e013      	b.n	800861e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	461a      	mov	r2, r3
 8008604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	e008      	b.n	800861e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	461a      	mov	r2, r3
 800861a:	2300      	movs	r3, #0
 800861c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862a:	461a      	mov	r2, r3
 800862c:	2300      	movs	r3, #0
 800862e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	461a      	mov	r2, r3
 800863e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3301      	adds	r3, #1
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	429a      	cmp	r2, r3
 8008650:	d3b7      	bcc.n	80085c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008652:	2300      	movs	r3, #0
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e043      	b.n	80086e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800866e:	d118      	bne.n	80086a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	e013      	b.n	80086b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	461a      	mov	r2, r3
 800869a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e008      	b.n	80086b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ae:	461a      	mov	r2, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	461a      	mov	r2, r3
 80086c2:	2300      	movs	r3, #0
 80086c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d2:	461a      	mov	r2, r3
 80086d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3301      	adds	r3, #1
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d3b7      	bcc.n	8008658 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008708:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f043 0210 	orr.w	r2, r3, #16
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <USB_DevInit+0x2c4>)
 8008722:	4313      	orrs	r3, r2
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f043 0208 	orr.w	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	2b01      	cmp	r3, #1
 800873e:	d107      	bne.n	8008750 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008748:	f043 0304 	orr.w	r3, r3, #4
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800875c:	b004      	add	sp, #16
 800875e:	4770      	bx	lr
 8008760:	803c3800 	.word	0x803c3800

08008764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3301      	adds	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a13      	ldr	r2, [pc, #76]	; (80087c8 <USB_FlushTxFifo+0x64>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d901      	bls.n	8008784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e01b      	b.n	80087bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	daf2      	bge.n	8008772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	019b      	lsls	r3, r3, #6
 8008794:	f043 0220 	orr.w	r2, r3, #32
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3301      	adds	r3, #1
 80087a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <USB_FlushTxFifo+0x64>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e006      	b.n	80087bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d0f0      	beq.n	800879c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	00030d40 	.word	0x00030d40

080087cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a11      	ldr	r2, [pc, #68]	; (8008828 <USB_FlushRxFifo+0x5c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e018      	b.n	800881c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	daf2      	bge.n	80087d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2210      	movs	r2, #16
 80087fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a08      	ldr	r2, [pc, #32]	; (8008828 <USB_FlushRxFifo+0x5c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d901      	bls.n	800880e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e006      	b.n	800881c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b10      	cmp	r3, #16
 8008818:	d0f0      	beq.n	80087fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	00030d40 	.word	0x00030d40

0800882c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800884c:	4313      	orrs	r3, r2
 800884e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800888c:	f043 0302 	orr.w	r3, r3, #2
 8008890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	f003 0301 	and.w	r3, r3, #1
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4a13      	ldr	r2, [pc, #76]	; (8008920 <USB_CoreReset+0x64>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d901      	bls.n	80088da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e01b      	b.n	8008912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	daf2      	bge.n	80088c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f043 0201 	orr.w	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a09      	ldr	r2, [pc, #36]	; (8008920 <USB_CoreReset+0x64>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d901      	bls.n	8008904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e006      	b.n	8008912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b01      	cmp	r3, #1
 800890e:	d0f0      	beq.n	80088f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	00030d40 	.word	0x00030d40

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	; (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20000068 	.word	0x20000068

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4d0d      	ldr	r5, [pc, #52]	; (8008968 <__libc_init_array+0x38>)
 8008934:	4c0d      	ldr	r4, [pc, #52]	; (800896c <__libc_init_array+0x3c>)
 8008936:	1b64      	subs	r4, r4, r5
 8008938:	10a4      	asrs	r4, r4, #2
 800893a:	2600      	movs	r6, #0
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	4d0b      	ldr	r5, [pc, #44]	; (8008970 <__libc_init_array+0x40>)
 8008942:	4c0c      	ldr	r4, [pc, #48]	; (8008974 <__libc_init_array+0x44>)
 8008944:	f001 f896 	bl	8009a74 <_init>
 8008948:	1b64      	subs	r4, r4, r5
 800894a:	10a4      	asrs	r4, r4, #2
 800894c:	2600      	movs	r6, #0
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	08009c68 	.word	0x08009c68
 800896c:	08009c68 	.word	0x08009c68
 8008970:	08009c68 	.word	0x08009c68
 8008974:	08009c6c 	.word	0x08009c6c

08008978 <memset>:
 8008978:	4402      	add	r2, r0
 800897a:	4603      	mov	r3, r0
 800897c:	4293      	cmp	r3, r2
 800897e:	d100      	bne.n	8008982 <memset+0xa>
 8008980:	4770      	bx	lr
 8008982:	f803 1b01 	strb.w	r1, [r3], #1
 8008986:	e7f9      	b.n	800897c <memset+0x4>

08008988 <_puts_r>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	460e      	mov	r6, r1
 800898c:	4605      	mov	r5, r0
 800898e:	b118      	cbz	r0, 8008998 <_puts_r+0x10>
 8008990:	6983      	ldr	r3, [r0, #24]
 8008992:	b90b      	cbnz	r3, 8008998 <_puts_r+0x10>
 8008994:	f000 fa70 	bl	8008e78 <__sinit>
 8008998:	69ab      	ldr	r3, [r5, #24]
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	b913      	cbnz	r3, 80089a4 <_puts_r+0x1c>
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fa6a 	bl	8008e78 <__sinit>
 80089a4:	4b2c      	ldr	r3, [pc, #176]	; (8008a58 <_puts_r+0xd0>)
 80089a6:	429c      	cmp	r4, r3
 80089a8:	d120      	bne.n	80089ec <_puts_r+0x64>
 80089aa:	686c      	ldr	r4, [r5, #4]
 80089ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ae:	07db      	lsls	r3, r3, #31
 80089b0:	d405      	bmi.n	80089be <_puts_r+0x36>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	0598      	lsls	r0, r3, #22
 80089b6:	d402      	bmi.n	80089be <_puts_r+0x36>
 80089b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ba:	f000 fafb 	bl	8008fb4 <__retarget_lock_acquire_recursive>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	0719      	lsls	r1, r3, #28
 80089c2:	d51d      	bpl.n	8008a00 <_puts_r+0x78>
 80089c4:	6923      	ldr	r3, [r4, #16]
 80089c6:	b1db      	cbz	r3, 8008a00 <_puts_r+0x78>
 80089c8:	3e01      	subs	r6, #1
 80089ca:	68a3      	ldr	r3, [r4, #8]
 80089cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	bb39      	cbnz	r1, 8008a26 <_puts_r+0x9e>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da38      	bge.n	8008a4c <_puts_r+0xc4>
 80089da:	4622      	mov	r2, r4
 80089dc:	210a      	movs	r1, #10
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f870 	bl	8008ac4 <__swbuf_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d011      	beq.n	8008a0c <_puts_r+0x84>
 80089e8:	250a      	movs	r5, #10
 80089ea:	e011      	b.n	8008a10 <_puts_r+0x88>
 80089ec:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <_puts_r+0xd4>)
 80089ee:	429c      	cmp	r4, r3
 80089f0:	d101      	bne.n	80089f6 <_puts_r+0x6e>
 80089f2:	68ac      	ldr	r4, [r5, #8]
 80089f4:	e7da      	b.n	80089ac <_puts_r+0x24>
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <_puts_r+0xd8>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	bf08      	it	eq
 80089fc:	68ec      	ldreq	r4, [r5, #12]
 80089fe:	e7d5      	b.n	80089ac <_puts_r+0x24>
 8008a00:	4621      	mov	r1, r4
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 f8b0 	bl	8008b68 <__swsetup_r>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d0dd      	beq.n	80089c8 <_puts_r+0x40>
 8008a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8008a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a12:	07da      	lsls	r2, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_puts_r+0x9a>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	059b      	lsls	r3, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_puts_r+0x9a>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1e:	f000 faca 	bl	8008fb6 <__retarget_lock_release_recursive>
 8008a22:	4628      	mov	r0, r5
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da04      	bge.n	8008a34 <_puts_r+0xac>
 8008a2a:	69a2      	ldr	r2, [r4, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	dc06      	bgt.n	8008a3e <_puts_r+0xb6>
 8008a30:	290a      	cmp	r1, #10
 8008a32:	d004      	beq.n	8008a3e <_puts_r+0xb6>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	6022      	str	r2, [r4, #0]
 8008a3a:	7019      	strb	r1, [r3, #0]
 8008a3c:	e7c5      	b.n	80089ca <_puts_r+0x42>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 f83f 	bl	8008ac4 <__swbuf_r>
 8008a46:	3001      	adds	r0, #1
 8008a48:	d1bf      	bne.n	80089ca <_puts_r+0x42>
 8008a4a:	e7df      	b.n	8008a0c <_puts_r+0x84>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	250a      	movs	r5, #10
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	6022      	str	r2, [r4, #0]
 8008a54:	701d      	strb	r5, [r3, #0]
 8008a56:	e7db      	b.n	8008a10 <_puts_r+0x88>
 8008a58:	08009bec 	.word	0x08009bec
 8008a5c:	08009c0c 	.word	0x08009c0c
 8008a60:	08009bcc 	.word	0x08009bcc

08008a64 <puts>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <puts+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f7ff bf8d 	b.w	8008988 <_puts_r>
 8008a6e:	bf00      	nop
 8008a70:	20000068 	.word	0x20000068

08008a74 <siprintf>:
 8008a74:	b40e      	push	{r1, r2, r3}
 8008a76:	b500      	push	{lr}
 8008a78:	b09c      	sub	sp, #112	; 0x70
 8008a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a7c:	9002      	str	r0, [sp, #8]
 8008a7e:	9006      	str	r0, [sp, #24]
 8008a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a84:	4809      	ldr	r0, [pc, #36]	; (8008aac <siprintf+0x38>)
 8008a86:	9107      	str	r1, [sp, #28]
 8008a88:	9104      	str	r1, [sp, #16]
 8008a8a:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <siprintf+0x3c>)
 8008a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a90:	9105      	str	r1, [sp, #20]
 8008a92:	6800      	ldr	r0, [r0, #0]
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	a902      	add	r1, sp, #8
 8008a98:	f000 fc30 	bl	80092fc <_svfiprintf_r>
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	b01c      	add	sp, #112	; 0x70
 8008aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa8:	b003      	add	sp, #12
 8008aaa:	4770      	bx	lr
 8008aac:	20000068 	.word	0x20000068
 8008ab0:	ffff0208 	.word	0xffff0208

08008ab4 <strcpy>:
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aba:	f803 2b01 	strb.w	r2, [r3], #1
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d1f9      	bne.n	8008ab6 <strcpy+0x2>
 8008ac2:	4770      	bx	lr

08008ac4 <__swbuf_r>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	460e      	mov	r6, r1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	4605      	mov	r5, r0
 8008acc:	b118      	cbz	r0, 8008ad6 <__swbuf_r+0x12>
 8008ace:	6983      	ldr	r3, [r0, #24]
 8008ad0:	b90b      	cbnz	r3, 8008ad6 <__swbuf_r+0x12>
 8008ad2:	f000 f9d1 	bl	8008e78 <__sinit>
 8008ad6:	4b21      	ldr	r3, [pc, #132]	; (8008b5c <__swbuf_r+0x98>)
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	d12b      	bne.n	8008b34 <__swbuf_r+0x70>
 8008adc:	686c      	ldr	r4, [r5, #4]
 8008ade:	69a3      	ldr	r3, [r4, #24]
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	071a      	lsls	r2, r3, #28
 8008ae6:	d52f      	bpl.n	8008b48 <__swbuf_r+0x84>
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	b36b      	cbz	r3, 8008b48 <__swbuf_r+0x84>
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	1ac0      	subs	r0, r0, r3
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	b2f6      	uxtb	r6, r6
 8008af6:	4283      	cmp	r3, r0
 8008af8:	4637      	mov	r7, r6
 8008afa:	dc04      	bgt.n	8008b06 <__swbuf_r+0x42>
 8008afc:	4621      	mov	r1, r4
 8008afe:	4628      	mov	r0, r5
 8008b00:	f000 f926 	bl	8008d50 <_fflush_r>
 8008b04:	bb30      	cbnz	r0, 8008b54 <__swbuf_r+0x90>
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	6022      	str	r2, [r4, #0]
 8008b12:	701e      	strb	r6, [r3, #0]
 8008b14:	6963      	ldr	r3, [r4, #20]
 8008b16:	3001      	adds	r0, #1
 8008b18:	4283      	cmp	r3, r0
 8008b1a:	d004      	beq.n	8008b26 <__swbuf_r+0x62>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	07db      	lsls	r3, r3, #31
 8008b20:	d506      	bpl.n	8008b30 <__swbuf_r+0x6c>
 8008b22:	2e0a      	cmp	r6, #10
 8008b24:	d104      	bne.n	8008b30 <__swbuf_r+0x6c>
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 f911 	bl	8008d50 <_fflush_r>
 8008b2e:	b988      	cbnz	r0, 8008b54 <__swbuf_r+0x90>
 8008b30:	4638      	mov	r0, r7
 8008b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b34:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <__swbuf_r+0x9c>)
 8008b36:	429c      	cmp	r4, r3
 8008b38:	d101      	bne.n	8008b3e <__swbuf_r+0x7a>
 8008b3a:	68ac      	ldr	r4, [r5, #8]
 8008b3c:	e7cf      	b.n	8008ade <__swbuf_r+0x1a>
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <__swbuf_r+0xa0>)
 8008b40:	429c      	cmp	r4, r3
 8008b42:	bf08      	it	eq
 8008b44:	68ec      	ldreq	r4, [r5, #12]
 8008b46:	e7ca      	b.n	8008ade <__swbuf_r+0x1a>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f80c 	bl	8008b68 <__swsetup_r>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0cb      	beq.n	8008aec <__swbuf_r+0x28>
 8008b54:	f04f 37ff 	mov.w	r7, #4294967295
 8008b58:	e7ea      	b.n	8008b30 <__swbuf_r+0x6c>
 8008b5a:	bf00      	nop
 8008b5c:	08009bec 	.word	0x08009bec
 8008b60:	08009c0c 	.word	0x08009c0c
 8008b64:	08009bcc 	.word	0x08009bcc

08008b68 <__swsetup_r>:
 8008b68:	4b32      	ldr	r3, [pc, #200]	; (8008c34 <__swsetup_r+0xcc>)
 8008b6a:	b570      	push	{r4, r5, r6, lr}
 8008b6c:	681d      	ldr	r5, [r3, #0]
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	b125      	cbz	r5, 8008b7e <__swsetup_r+0x16>
 8008b74:	69ab      	ldr	r3, [r5, #24]
 8008b76:	b913      	cbnz	r3, 8008b7e <__swsetup_r+0x16>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 f97d 	bl	8008e78 <__sinit>
 8008b7e:	4b2e      	ldr	r3, [pc, #184]	; (8008c38 <__swsetup_r+0xd0>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d10f      	bne.n	8008ba4 <__swsetup_r+0x3c>
 8008b84:	686c      	ldr	r4, [r5, #4]
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b8c:	0719      	lsls	r1, r3, #28
 8008b8e:	d42c      	bmi.n	8008bea <__swsetup_r+0x82>
 8008b90:	06dd      	lsls	r5, r3, #27
 8008b92:	d411      	bmi.n	8008bb8 <__swsetup_r+0x50>
 8008b94:	2309      	movs	r3, #9
 8008b96:	6033      	str	r3, [r6, #0]
 8008b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b9c:	81a3      	strh	r3, [r4, #12]
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba2:	e03e      	b.n	8008c22 <__swsetup_r+0xba>
 8008ba4:	4b25      	ldr	r3, [pc, #148]	; (8008c3c <__swsetup_r+0xd4>)
 8008ba6:	429c      	cmp	r4, r3
 8008ba8:	d101      	bne.n	8008bae <__swsetup_r+0x46>
 8008baa:	68ac      	ldr	r4, [r5, #8]
 8008bac:	e7eb      	b.n	8008b86 <__swsetup_r+0x1e>
 8008bae:	4b24      	ldr	r3, [pc, #144]	; (8008c40 <__swsetup_r+0xd8>)
 8008bb0:	429c      	cmp	r4, r3
 8008bb2:	bf08      	it	eq
 8008bb4:	68ec      	ldreq	r4, [r5, #12]
 8008bb6:	e7e6      	b.n	8008b86 <__swsetup_r+0x1e>
 8008bb8:	0758      	lsls	r0, r3, #29
 8008bba:	d512      	bpl.n	8008be2 <__swsetup_r+0x7a>
 8008bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bbe:	b141      	cbz	r1, 8008bd2 <__swsetup_r+0x6a>
 8008bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	d002      	beq.n	8008bce <__swsetup_r+0x66>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 fa5b 	bl	8009084 <_free_r>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6063      	str	r3, [r4, #4]
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f043 0308 	orr.w	r3, r3, #8
 8008be8:	81a3      	strh	r3, [r4, #12]
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	b94b      	cbnz	r3, 8008c02 <__swsetup_r+0x9a>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf8:	d003      	beq.n	8008c02 <__swsetup_r+0x9a>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 fa01 	bl	8009004 <__smakebuf_r>
 8008c02:	89a0      	ldrh	r0, [r4, #12]
 8008c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c08:	f010 0301 	ands.w	r3, r0, #1
 8008c0c:	d00a      	beq.n	8008c24 <__swsetup_r+0xbc>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60a3      	str	r3, [r4, #8]
 8008c12:	6963      	ldr	r3, [r4, #20]
 8008c14:	425b      	negs	r3, r3
 8008c16:	61a3      	str	r3, [r4, #24]
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	b943      	cbnz	r3, 8008c2e <__swsetup_r+0xc6>
 8008c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c20:	d1ba      	bne.n	8008b98 <__swsetup_r+0x30>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	0781      	lsls	r1, r0, #30
 8008c26:	bf58      	it	pl
 8008c28:	6963      	ldrpl	r3, [r4, #20]
 8008c2a:	60a3      	str	r3, [r4, #8]
 8008c2c:	e7f4      	b.n	8008c18 <__swsetup_r+0xb0>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e7f7      	b.n	8008c22 <__swsetup_r+0xba>
 8008c32:	bf00      	nop
 8008c34:	20000068 	.word	0x20000068
 8008c38:	08009bec 	.word	0x08009bec
 8008c3c:	08009c0c 	.word	0x08009c0c
 8008c40:	08009bcc 	.word	0x08009bcc

08008c44 <__sflush_r>:
 8008c44:	898a      	ldrh	r2, [r1, #12]
 8008c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	0710      	lsls	r0, r2, #28
 8008c4e:	460c      	mov	r4, r1
 8008c50:	d458      	bmi.n	8008d04 <__sflush_r+0xc0>
 8008c52:	684b      	ldr	r3, [r1, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dc05      	bgt.n	8008c64 <__sflush_r+0x20>
 8008c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dc02      	bgt.n	8008c64 <__sflush_r+0x20>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d0f9      	beq.n	8008c5e <__sflush_r+0x1a>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c70:	682f      	ldr	r7, [r5, #0]
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	d032      	beq.n	8008cdc <__sflush_r+0x98>
 8008c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	075a      	lsls	r2, r3, #29
 8008c7c:	d505      	bpl.n	8008c8a <__sflush_r+0x46>
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	1ac0      	subs	r0, r0, r3
 8008c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c84:	b10b      	cbz	r3, 8008c8a <__sflush_r+0x46>
 8008c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c88:	1ac0      	subs	r0, r0, r3
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c90:	6a21      	ldr	r1, [r4, #32]
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b0      	blx	r6
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	d106      	bne.n	8008caa <__sflush_r+0x66>
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	291d      	cmp	r1, #29
 8008ca0:	d82c      	bhi.n	8008cfc <__sflush_r+0xb8>
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	; (8008d4c <__sflush_r+0x108>)
 8008ca4:	40ca      	lsrs	r2, r1
 8008ca6:	07d6      	lsls	r6, r2, #31
 8008ca8:	d528      	bpl.n	8008cfc <__sflush_r+0xb8>
 8008caa:	2200      	movs	r2, #0
 8008cac:	6062      	str	r2, [r4, #4]
 8008cae:	04d9      	lsls	r1, r3, #19
 8008cb0:	6922      	ldr	r2, [r4, #16]
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	d504      	bpl.n	8008cc0 <__sflush_r+0x7c>
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	d101      	bne.n	8008cbe <__sflush_r+0x7a>
 8008cba:	682b      	ldr	r3, [r5, #0]
 8008cbc:	b903      	cbnz	r3, 8008cc0 <__sflush_r+0x7c>
 8008cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8008cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc2:	602f      	str	r7, [r5, #0]
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d0ca      	beq.n	8008c5e <__sflush_r+0x1a>
 8008cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	d002      	beq.n	8008cd6 <__sflush_r+0x92>
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 f9d7 	bl	8009084 <_free_r>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8008cda:	e7c1      	b.n	8008c60 <__sflush_r+0x1c>
 8008cdc:	6a21      	ldr	r1, [r4, #32]
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b0      	blx	r6
 8008ce4:	1c41      	adds	r1, r0, #1
 8008ce6:	d1c7      	bne.n	8008c78 <__sflush_r+0x34>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0c4      	beq.n	8008c78 <__sflush_r+0x34>
 8008cee:	2b1d      	cmp	r3, #29
 8008cf0:	d001      	beq.n	8008cf6 <__sflush_r+0xb2>
 8008cf2:	2b16      	cmp	r3, #22
 8008cf4:	d101      	bne.n	8008cfa <__sflush_r+0xb6>
 8008cf6:	602f      	str	r7, [r5, #0]
 8008cf8:	e7b1      	b.n	8008c5e <__sflush_r+0x1a>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	e7ad      	b.n	8008c60 <__sflush_r+0x1c>
 8008d04:	690f      	ldr	r7, [r1, #16]
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	d0a9      	beq.n	8008c5e <__sflush_r+0x1a>
 8008d0a:	0793      	lsls	r3, r2, #30
 8008d0c:	680e      	ldr	r6, [r1, #0]
 8008d0e:	bf08      	it	eq
 8008d10:	694b      	ldreq	r3, [r1, #20]
 8008d12:	600f      	str	r7, [r1, #0]
 8008d14:	bf18      	it	ne
 8008d16:	2300      	movne	r3, #0
 8008d18:	eba6 0807 	sub.w	r8, r6, r7
 8008d1c:	608b      	str	r3, [r1, #8]
 8008d1e:	f1b8 0f00 	cmp.w	r8, #0
 8008d22:	dd9c      	ble.n	8008c5e <__sflush_r+0x1a>
 8008d24:	6a21      	ldr	r1, [r4, #32]
 8008d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d28:	4643      	mov	r3, r8
 8008d2a:	463a      	mov	r2, r7
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	47b0      	blx	r6
 8008d30:	2800      	cmp	r0, #0
 8008d32:	dc06      	bgt.n	8008d42 <__sflush_r+0xfe>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e78e      	b.n	8008c60 <__sflush_r+0x1c>
 8008d42:	4407      	add	r7, r0
 8008d44:	eba8 0800 	sub.w	r8, r8, r0
 8008d48:	e7e9      	b.n	8008d1e <__sflush_r+0xda>
 8008d4a:	bf00      	nop
 8008d4c:	20400001 	.word	0x20400001

08008d50 <_fflush_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	4605      	mov	r5, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	b913      	cbnz	r3, 8008d60 <_fflush_r+0x10>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	b118      	cbz	r0, 8008d6a <_fflush_r+0x1a>
 8008d62:	6983      	ldr	r3, [r0, #24]
 8008d64:	b90b      	cbnz	r3, 8008d6a <_fflush_r+0x1a>
 8008d66:	f000 f887 	bl	8008e78 <__sinit>
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <_fflush_r+0x6c>)
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	d11b      	bne.n	8008da8 <_fflush_r+0x58>
 8008d70:	686c      	ldr	r4, [r5, #4]
 8008d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ef      	beq.n	8008d5a <_fflush_r+0xa>
 8008d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d7c:	07d0      	lsls	r0, r2, #31
 8008d7e:	d404      	bmi.n	8008d8a <_fflush_r+0x3a>
 8008d80:	0599      	lsls	r1, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_fflush_r+0x3a>
 8008d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d86:	f000 f915 	bl	8008fb4 <__retarget_lock_acquire_recursive>
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	f7ff ff59 	bl	8008c44 <__sflush_r>
 8008d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d94:	07da      	lsls	r2, r3, #31
 8008d96:	4605      	mov	r5, r0
 8008d98:	d4e0      	bmi.n	8008d5c <_fflush_r+0xc>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	059b      	lsls	r3, r3, #22
 8008d9e:	d4dd      	bmi.n	8008d5c <_fflush_r+0xc>
 8008da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da2:	f000 f908 	bl	8008fb6 <__retarget_lock_release_recursive>
 8008da6:	e7d9      	b.n	8008d5c <_fflush_r+0xc>
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <_fflush_r+0x70>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	d101      	bne.n	8008db2 <_fflush_r+0x62>
 8008dae:	68ac      	ldr	r4, [r5, #8]
 8008db0:	e7df      	b.n	8008d72 <_fflush_r+0x22>
 8008db2:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <_fflush_r+0x74>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	bf08      	it	eq
 8008db8:	68ec      	ldreq	r4, [r5, #12]
 8008dba:	e7da      	b.n	8008d72 <_fflush_r+0x22>
 8008dbc:	08009bec 	.word	0x08009bec
 8008dc0:	08009c0c 	.word	0x08009c0c
 8008dc4:	08009bcc 	.word	0x08009bcc

08008dc8 <std>:
 8008dc8:	2300      	movs	r3, #0
 8008dca:	b510      	push	{r4, lr}
 8008dcc:	4604      	mov	r4, r0
 8008dce:	e9c0 3300 	strd	r3, r3, [r0]
 8008dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dd6:	6083      	str	r3, [r0, #8]
 8008dd8:	8181      	strh	r1, [r0, #12]
 8008dda:	6643      	str	r3, [r0, #100]	; 0x64
 8008ddc:	81c2      	strh	r2, [r0, #14]
 8008dde:	6183      	str	r3, [r0, #24]
 8008de0:	4619      	mov	r1, r3
 8008de2:	2208      	movs	r2, #8
 8008de4:	305c      	adds	r0, #92	; 0x5c
 8008de6:	f7ff fdc7 	bl	8008978 <memset>
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x38>)
 8008dec:	6263      	str	r3, [r4, #36]	; 0x24
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <std+0x3c>)
 8008df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <std+0x40>)
 8008df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <std+0x44>)
 8008df8:	6224      	str	r4, [r4, #32]
 8008dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	bf00      	nop
 8008e00:	08009845 	.word	0x08009845
 8008e04:	08009867 	.word	0x08009867
 8008e08:	0800989f 	.word	0x0800989f
 8008e0c:	080098c3 	.word	0x080098c3

08008e10 <_cleanup_r>:
 8008e10:	4901      	ldr	r1, [pc, #4]	; (8008e18 <_cleanup_r+0x8>)
 8008e12:	f000 b8af 	b.w	8008f74 <_fwalk_reent>
 8008e16:	bf00      	nop
 8008e18:	08008d51 	.word	0x08008d51

08008e1c <__sfmoreglue>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	2268      	movs	r2, #104	; 0x68
 8008e20:	1e4d      	subs	r5, r1, #1
 8008e22:	4355      	muls	r5, r2
 8008e24:	460e      	mov	r6, r1
 8008e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e2a:	f000 f997 	bl	800915c <_malloc_r>
 8008e2e:	4604      	mov	r4, r0
 8008e30:	b140      	cbz	r0, 8008e44 <__sfmoreglue+0x28>
 8008e32:	2100      	movs	r1, #0
 8008e34:	e9c0 1600 	strd	r1, r6, [r0]
 8008e38:	300c      	adds	r0, #12
 8008e3a:	60a0      	str	r0, [r4, #8]
 8008e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e40:	f7ff fd9a 	bl	8008978 <memset>
 8008e44:	4620      	mov	r0, r4
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__sfp_lock_acquire>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sfp_lock_acquire+0x8>)
 8008e4a:	f000 b8b3 	b.w	8008fb4 <__retarget_lock_acquire_recursive>
 8008e4e:	bf00      	nop
 8008e50:	2000184d 	.word	0x2000184d

08008e54 <__sfp_lock_release>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sfp_lock_release+0x8>)
 8008e56:	f000 b8ae 	b.w	8008fb6 <__retarget_lock_release_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	2000184d 	.word	0x2000184d

08008e60 <__sinit_lock_acquire>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sinit_lock_acquire+0x8>)
 8008e62:	f000 b8a7 	b.w	8008fb4 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	2000184e 	.word	0x2000184e

08008e6c <__sinit_lock_release>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__sinit_lock_release+0x8>)
 8008e6e:	f000 b8a2 	b.w	8008fb6 <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	2000184e 	.word	0x2000184e

08008e78 <__sinit>:
 8008e78:	b510      	push	{r4, lr}
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f7ff fff0 	bl	8008e60 <__sinit_lock_acquire>
 8008e80:	69a3      	ldr	r3, [r4, #24]
 8008e82:	b11b      	cbz	r3, 8008e8c <__sinit+0x14>
 8008e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e88:	f7ff bff0 	b.w	8008e6c <__sinit_lock_release>
 8008e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e90:	6523      	str	r3, [r4, #80]	; 0x50
 8008e92:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <__sinit+0x68>)
 8008e94:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <__sinit+0x6c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	bf04      	itt	eq
 8008e9e:	2301      	moveq	r3, #1
 8008ea0:	61a3      	streq	r3, [r4, #24]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f820 	bl	8008ee8 <__sfp>
 8008ea8:	6060      	str	r0, [r4, #4]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f81c 	bl	8008ee8 <__sfp>
 8008eb0:	60a0      	str	r0, [r4, #8]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 f818 	bl	8008ee8 <__sfp>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	60e0      	str	r0, [r4, #12]
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	6860      	ldr	r0, [r4, #4]
 8008ec0:	f7ff ff82 	bl	8008dc8 <std>
 8008ec4:	68a0      	ldr	r0, [r4, #8]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	2109      	movs	r1, #9
 8008eca:	f7ff ff7d 	bl	8008dc8 <std>
 8008ece:	68e0      	ldr	r0, [r4, #12]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	2112      	movs	r1, #18
 8008ed4:	f7ff ff78 	bl	8008dc8 <std>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	61a3      	str	r3, [r4, #24]
 8008edc:	e7d2      	b.n	8008e84 <__sinit+0xc>
 8008ede:	bf00      	nop
 8008ee0:	08009bc8 	.word	0x08009bc8
 8008ee4:	08008e11 	.word	0x08008e11

08008ee8 <__sfp>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	4607      	mov	r7, r0
 8008eec:	f7ff ffac 	bl	8008e48 <__sfp_lock_acquire>
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <__sfp+0x84>)
 8008ef2:	681e      	ldr	r6, [r3, #0]
 8008ef4:	69b3      	ldr	r3, [r6, #24]
 8008ef6:	b913      	cbnz	r3, 8008efe <__sfp+0x16>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ffbd 	bl	8008e78 <__sinit>
 8008efe:	3648      	adds	r6, #72	; 0x48
 8008f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	d503      	bpl.n	8008f10 <__sfp+0x28>
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	b30b      	cbz	r3, 8008f50 <__sfp+0x68>
 8008f0c:	6836      	ldr	r6, [r6, #0]
 8008f0e:	e7f7      	b.n	8008f00 <__sfp+0x18>
 8008f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f14:	b9d5      	cbnz	r5, 8008f4c <__sfp+0x64>
 8008f16:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <__sfp+0x88>)
 8008f18:	60e3      	str	r3, [r4, #12]
 8008f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f20:	f000 f847 	bl	8008fb2 <__retarget_lock_init_recursive>
 8008f24:	f7ff ff96 	bl	8008e54 <__sfp_lock_release>
 8008f28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f30:	6025      	str	r5, [r4, #0]
 8008f32:	61a5      	str	r5, [r4, #24]
 8008f34:	2208      	movs	r2, #8
 8008f36:	4629      	mov	r1, r5
 8008f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f3c:	f7ff fd1c 	bl	8008978 <memset>
 8008f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4c:	3468      	adds	r4, #104	; 0x68
 8008f4e:	e7d9      	b.n	8008f04 <__sfp+0x1c>
 8008f50:	2104      	movs	r1, #4
 8008f52:	4638      	mov	r0, r7
 8008f54:	f7ff ff62 	bl	8008e1c <__sfmoreglue>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	6030      	str	r0, [r6, #0]
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1d5      	bne.n	8008f0c <__sfp+0x24>
 8008f60:	f7ff ff78 	bl	8008e54 <__sfp_lock_release>
 8008f64:	230c      	movs	r3, #12
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	e7ee      	b.n	8008f48 <__sfp+0x60>
 8008f6a:	bf00      	nop
 8008f6c:	08009bc8 	.word	0x08009bc8
 8008f70:	ffff0001 	.word	0xffff0001

08008f74 <_fwalk_reent>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4606      	mov	r6, r0
 8008f7a:	4688      	mov	r8, r1
 8008f7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f80:	2700      	movs	r7, #0
 8008f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f86:	f1b9 0901 	subs.w	r9, r9, #1
 8008f8a:	d505      	bpl.n	8008f98 <_fwalk_reent+0x24>
 8008f8c:	6824      	ldr	r4, [r4, #0]
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d1f7      	bne.n	8008f82 <_fwalk_reent+0xe>
 8008f92:	4638      	mov	r0, r7
 8008f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f98:	89ab      	ldrh	r3, [r5, #12]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d907      	bls.n	8008fae <_fwalk_reent+0x3a>
 8008f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	d003      	beq.n	8008fae <_fwalk_reent+0x3a>
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	47c0      	blx	r8
 8008fac:	4307      	orrs	r7, r0
 8008fae:	3568      	adds	r5, #104	; 0x68
 8008fb0:	e7e9      	b.n	8008f86 <_fwalk_reent+0x12>

08008fb2 <__retarget_lock_init_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <__retarget_lock_acquire_recursive>:
 8008fb4:	4770      	bx	lr

08008fb6 <__retarget_lock_release_recursive>:
 8008fb6:	4770      	bx	lr

08008fb8 <__swhatbuf_r>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	460e      	mov	r6, r1
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	2900      	cmp	r1, #0
 8008fc2:	b096      	sub	sp, #88	; 0x58
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	461d      	mov	r5, r3
 8008fc8:	da08      	bge.n	8008fdc <__swhatbuf_r+0x24>
 8008fca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	602a      	str	r2, [r5, #0]
 8008fd2:	061a      	lsls	r2, r3, #24
 8008fd4:	d410      	bmi.n	8008ff8 <__swhatbuf_r+0x40>
 8008fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fda:	e00e      	b.n	8008ffa <__swhatbuf_r+0x42>
 8008fdc:	466a      	mov	r2, sp
 8008fde:	f000 fc97 	bl	8009910 <_fstat_r>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	dbf1      	blt.n	8008fca <__swhatbuf_r+0x12>
 8008fe6:	9a01      	ldr	r2, [sp, #4]
 8008fe8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ff0:	425a      	negs	r2, r3
 8008ff2:	415a      	adcs	r2, r3
 8008ff4:	602a      	str	r2, [r5, #0]
 8008ff6:	e7ee      	b.n	8008fd6 <__swhatbuf_r+0x1e>
 8008ff8:	2340      	movs	r3, #64	; 0x40
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	b016      	add	sp, #88	; 0x58
 8009000:	bd70      	pop	{r4, r5, r6, pc}
	...

08009004 <__smakebuf_r>:
 8009004:	898b      	ldrh	r3, [r1, #12]
 8009006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009008:	079d      	lsls	r5, r3, #30
 800900a:	4606      	mov	r6, r0
 800900c:	460c      	mov	r4, r1
 800900e:	d507      	bpl.n	8009020 <__smakebuf_r+0x1c>
 8009010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	2301      	movs	r3, #1
 800901a:	6163      	str	r3, [r4, #20]
 800901c:	b002      	add	sp, #8
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	ab01      	add	r3, sp, #4
 8009022:	466a      	mov	r2, sp
 8009024:	f7ff ffc8 	bl	8008fb8 <__swhatbuf_r>
 8009028:	9900      	ldr	r1, [sp, #0]
 800902a:	4605      	mov	r5, r0
 800902c:	4630      	mov	r0, r6
 800902e:	f000 f895 	bl	800915c <_malloc_r>
 8009032:	b948      	cbnz	r0, 8009048 <__smakebuf_r+0x44>
 8009034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009038:	059a      	lsls	r2, r3, #22
 800903a:	d4ef      	bmi.n	800901c <__smakebuf_r+0x18>
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	e7e3      	b.n	8009010 <__smakebuf_r+0xc>
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <__smakebuf_r+0x7c>)
 800904a:	62b3      	str	r3, [r6, #40]	; 0x28
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	6163      	str	r3, [r4, #20]
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	6120      	str	r0, [r4, #16]
 800905e:	b15b      	cbz	r3, 8009078 <__smakebuf_r+0x74>
 8009060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009064:	4630      	mov	r0, r6
 8009066:	f000 fc65 	bl	8009934 <_isatty_r>
 800906a:	b128      	cbz	r0, 8009078 <__smakebuf_r+0x74>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	89a0      	ldrh	r0, [r4, #12]
 800907a:	4305      	orrs	r5, r0
 800907c:	81a5      	strh	r5, [r4, #12]
 800907e:	e7cd      	b.n	800901c <__smakebuf_r+0x18>
 8009080:	08008e11 	.word	0x08008e11

08009084 <_free_r>:
 8009084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009086:	2900      	cmp	r1, #0
 8009088:	d044      	beq.n	8009114 <_free_r+0x90>
 800908a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800908e:	9001      	str	r0, [sp, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f1a1 0404 	sub.w	r4, r1, #4
 8009096:	bfb8      	it	lt
 8009098:	18e4      	addlt	r4, r4, r3
 800909a:	f000 fc95 	bl	80099c8 <__malloc_lock>
 800909e:	4a1e      	ldr	r2, [pc, #120]	; (8009118 <_free_r+0x94>)
 80090a0:	9801      	ldr	r0, [sp, #4]
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	b933      	cbnz	r3, 80090b4 <_free_r+0x30>
 80090a6:	6063      	str	r3, [r4, #4]
 80090a8:	6014      	str	r4, [r2, #0]
 80090aa:	b003      	add	sp, #12
 80090ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090b0:	f000 bc90 	b.w	80099d4 <__malloc_unlock>
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d908      	bls.n	80090ca <_free_r+0x46>
 80090b8:	6825      	ldr	r5, [r4, #0]
 80090ba:	1961      	adds	r1, r4, r5
 80090bc:	428b      	cmp	r3, r1
 80090be:	bf01      	itttt	eq
 80090c0:	6819      	ldreq	r1, [r3, #0]
 80090c2:	685b      	ldreq	r3, [r3, #4]
 80090c4:	1949      	addeq	r1, r1, r5
 80090c6:	6021      	streq	r1, [r4, #0]
 80090c8:	e7ed      	b.n	80090a6 <_free_r+0x22>
 80090ca:	461a      	mov	r2, r3
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	b10b      	cbz	r3, 80090d4 <_free_r+0x50>
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d9fa      	bls.n	80090ca <_free_r+0x46>
 80090d4:	6811      	ldr	r1, [r2, #0]
 80090d6:	1855      	adds	r5, r2, r1
 80090d8:	42a5      	cmp	r5, r4
 80090da:	d10b      	bne.n	80090f4 <_free_r+0x70>
 80090dc:	6824      	ldr	r4, [r4, #0]
 80090de:	4421      	add	r1, r4
 80090e0:	1854      	adds	r4, r2, r1
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	6011      	str	r1, [r2, #0]
 80090e6:	d1e0      	bne.n	80090aa <_free_r+0x26>
 80090e8:	681c      	ldr	r4, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	6053      	str	r3, [r2, #4]
 80090ee:	4421      	add	r1, r4
 80090f0:	6011      	str	r1, [r2, #0]
 80090f2:	e7da      	b.n	80090aa <_free_r+0x26>
 80090f4:	d902      	bls.n	80090fc <_free_r+0x78>
 80090f6:	230c      	movs	r3, #12
 80090f8:	6003      	str	r3, [r0, #0]
 80090fa:	e7d6      	b.n	80090aa <_free_r+0x26>
 80090fc:	6825      	ldr	r5, [r4, #0]
 80090fe:	1961      	adds	r1, r4, r5
 8009100:	428b      	cmp	r3, r1
 8009102:	bf04      	itt	eq
 8009104:	6819      	ldreq	r1, [r3, #0]
 8009106:	685b      	ldreq	r3, [r3, #4]
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	bf04      	itt	eq
 800910c:	1949      	addeq	r1, r1, r5
 800910e:	6021      	streq	r1, [r4, #0]
 8009110:	6054      	str	r4, [r2, #4]
 8009112:	e7ca      	b.n	80090aa <_free_r+0x26>
 8009114:	b003      	add	sp, #12
 8009116:	bd30      	pop	{r4, r5, pc}
 8009118:	20001850 	.word	0x20001850

0800911c <sbrk_aligned>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4e0e      	ldr	r6, [pc, #56]	; (8009158 <sbrk_aligned+0x3c>)
 8009120:	460c      	mov	r4, r1
 8009122:	6831      	ldr	r1, [r6, #0]
 8009124:	4605      	mov	r5, r0
 8009126:	b911      	cbnz	r1, 800912e <sbrk_aligned+0x12>
 8009128:	f000 fb7c 	bl	8009824 <_sbrk_r>
 800912c:	6030      	str	r0, [r6, #0]
 800912e:	4621      	mov	r1, r4
 8009130:	4628      	mov	r0, r5
 8009132:	f000 fb77 	bl	8009824 <_sbrk_r>
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	d00a      	beq.n	8009150 <sbrk_aligned+0x34>
 800913a:	1cc4      	adds	r4, r0, #3
 800913c:	f024 0403 	bic.w	r4, r4, #3
 8009140:	42a0      	cmp	r0, r4
 8009142:	d007      	beq.n	8009154 <sbrk_aligned+0x38>
 8009144:	1a21      	subs	r1, r4, r0
 8009146:	4628      	mov	r0, r5
 8009148:	f000 fb6c 	bl	8009824 <_sbrk_r>
 800914c:	3001      	adds	r0, #1
 800914e:	d101      	bne.n	8009154 <sbrk_aligned+0x38>
 8009150:	f04f 34ff 	mov.w	r4, #4294967295
 8009154:	4620      	mov	r0, r4
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	20001854 	.word	0x20001854

0800915c <_malloc_r>:
 800915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009160:	1ccd      	adds	r5, r1, #3
 8009162:	f025 0503 	bic.w	r5, r5, #3
 8009166:	3508      	adds	r5, #8
 8009168:	2d0c      	cmp	r5, #12
 800916a:	bf38      	it	cc
 800916c:	250c      	movcc	r5, #12
 800916e:	2d00      	cmp	r5, #0
 8009170:	4607      	mov	r7, r0
 8009172:	db01      	blt.n	8009178 <_malloc_r+0x1c>
 8009174:	42a9      	cmp	r1, r5
 8009176:	d905      	bls.n	8009184 <_malloc_r+0x28>
 8009178:	230c      	movs	r3, #12
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	2600      	movs	r6, #0
 800917e:	4630      	mov	r0, r6
 8009180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009184:	4e2e      	ldr	r6, [pc, #184]	; (8009240 <_malloc_r+0xe4>)
 8009186:	f000 fc1f 	bl	80099c8 <__malloc_lock>
 800918a:	6833      	ldr	r3, [r6, #0]
 800918c:	461c      	mov	r4, r3
 800918e:	bb34      	cbnz	r4, 80091de <_malloc_r+0x82>
 8009190:	4629      	mov	r1, r5
 8009192:	4638      	mov	r0, r7
 8009194:	f7ff ffc2 	bl	800911c <sbrk_aligned>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	4604      	mov	r4, r0
 800919c:	d14d      	bne.n	800923a <_malloc_r+0xde>
 800919e:	6834      	ldr	r4, [r6, #0]
 80091a0:	4626      	mov	r6, r4
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d140      	bne.n	8009228 <_malloc_r+0xcc>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	4631      	mov	r1, r6
 80091aa:	4638      	mov	r0, r7
 80091ac:	eb04 0803 	add.w	r8, r4, r3
 80091b0:	f000 fb38 	bl	8009824 <_sbrk_r>
 80091b4:	4580      	cmp	r8, r0
 80091b6:	d13a      	bne.n	800922e <_malloc_r+0xd2>
 80091b8:	6821      	ldr	r1, [r4, #0]
 80091ba:	3503      	adds	r5, #3
 80091bc:	1a6d      	subs	r5, r5, r1
 80091be:	f025 0503 	bic.w	r5, r5, #3
 80091c2:	3508      	adds	r5, #8
 80091c4:	2d0c      	cmp	r5, #12
 80091c6:	bf38      	it	cc
 80091c8:	250c      	movcc	r5, #12
 80091ca:	4629      	mov	r1, r5
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff ffa5 	bl	800911c <sbrk_aligned>
 80091d2:	3001      	adds	r0, #1
 80091d4:	d02b      	beq.n	800922e <_malloc_r+0xd2>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	442b      	add	r3, r5
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	e00e      	b.n	80091fc <_malloc_r+0xa0>
 80091de:	6822      	ldr	r2, [r4, #0]
 80091e0:	1b52      	subs	r2, r2, r5
 80091e2:	d41e      	bmi.n	8009222 <_malloc_r+0xc6>
 80091e4:	2a0b      	cmp	r2, #11
 80091e6:	d916      	bls.n	8009216 <_malloc_r+0xba>
 80091e8:	1961      	adds	r1, r4, r5
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	6025      	str	r5, [r4, #0]
 80091ee:	bf18      	it	ne
 80091f0:	6059      	strne	r1, [r3, #4]
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	bf08      	it	eq
 80091f6:	6031      	streq	r1, [r6, #0]
 80091f8:	5162      	str	r2, [r4, r5]
 80091fa:	604b      	str	r3, [r1, #4]
 80091fc:	4638      	mov	r0, r7
 80091fe:	f104 060b 	add.w	r6, r4, #11
 8009202:	f000 fbe7 	bl	80099d4 <__malloc_unlock>
 8009206:	f026 0607 	bic.w	r6, r6, #7
 800920a:	1d23      	adds	r3, r4, #4
 800920c:	1af2      	subs	r2, r6, r3
 800920e:	d0b6      	beq.n	800917e <_malloc_r+0x22>
 8009210:	1b9b      	subs	r3, r3, r6
 8009212:	50a3      	str	r3, [r4, r2]
 8009214:	e7b3      	b.n	800917e <_malloc_r+0x22>
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	42a3      	cmp	r3, r4
 800921a:	bf0c      	ite	eq
 800921c:	6032      	streq	r2, [r6, #0]
 800921e:	605a      	strne	r2, [r3, #4]
 8009220:	e7ec      	b.n	80091fc <_malloc_r+0xa0>
 8009222:	4623      	mov	r3, r4
 8009224:	6864      	ldr	r4, [r4, #4]
 8009226:	e7b2      	b.n	800918e <_malloc_r+0x32>
 8009228:	4634      	mov	r4, r6
 800922a:	6876      	ldr	r6, [r6, #4]
 800922c:	e7b9      	b.n	80091a2 <_malloc_r+0x46>
 800922e:	230c      	movs	r3, #12
 8009230:	603b      	str	r3, [r7, #0]
 8009232:	4638      	mov	r0, r7
 8009234:	f000 fbce 	bl	80099d4 <__malloc_unlock>
 8009238:	e7a1      	b.n	800917e <_malloc_r+0x22>
 800923a:	6025      	str	r5, [r4, #0]
 800923c:	e7de      	b.n	80091fc <_malloc_r+0xa0>
 800923e:	bf00      	nop
 8009240:	20001850 	.word	0x20001850

08009244 <__ssputs_r>:
 8009244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	688e      	ldr	r6, [r1, #8]
 800924a:	429e      	cmp	r6, r3
 800924c:	4682      	mov	sl, r0
 800924e:	460c      	mov	r4, r1
 8009250:	4690      	mov	r8, r2
 8009252:	461f      	mov	r7, r3
 8009254:	d838      	bhi.n	80092c8 <__ssputs_r+0x84>
 8009256:	898a      	ldrh	r2, [r1, #12]
 8009258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800925c:	d032      	beq.n	80092c4 <__ssputs_r+0x80>
 800925e:	6825      	ldr	r5, [r4, #0]
 8009260:	6909      	ldr	r1, [r1, #16]
 8009262:	eba5 0901 	sub.w	r9, r5, r1
 8009266:	6965      	ldr	r5, [r4, #20]
 8009268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800926c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009270:	3301      	adds	r3, #1
 8009272:	444b      	add	r3, r9
 8009274:	106d      	asrs	r5, r5, #1
 8009276:	429d      	cmp	r5, r3
 8009278:	bf38      	it	cc
 800927a:	461d      	movcc	r5, r3
 800927c:	0553      	lsls	r3, r2, #21
 800927e:	d531      	bpl.n	80092e4 <__ssputs_r+0xa0>
 8009280:	4629      	mov	r1, r5
 8009282:	f7ff ff6b 	bl	800915c <_malloc_r>
 8009286:	4606      	mov	r6, r0
 8009288:	b950      	cbnz	r0, 80092a0 <__ssputs_r+0x5c>
 800928a:	230c      	movs	r3, #12
 800928c:	f8ca 3000 	str.w	r3, [sl]
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a0:	6921      	ldr	r1, [r4, #16]
 80092a2:	464a      	mov	r2, r9
 80092a4:	f000 fb68 	bl	8009978 <memcpy>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	6126      	str	r6, [r4, #16]
 80092b6:	6165      	str	r5, [r4, #20]
 80092b8:	444e      	add	r6, r9
 80092ba:	eba5 0509 	sub.w	r5, r5, r9
 80092be:	6026      	str	r6, [r4, #0]
 80092c0:	60a5      	str	r5, [r4, #8]
 80092c2:	463e      	mov	r6, r7
 80092c4:	42be      	cmp	r6, r7
 80092c6:	d900      	bls.n	80092ca <__ssputs_r+0x86>
 80092c8:	463e      	mov	r6, r7
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	4632      	mov	r2, r6
 80092ce:	4641      	mov	r1, r8
 80092d0:	f000 fb60 	bl	8009994 <memmove>
 80092d4:	68a3      	ldr	r3, [r4, #8]
 80092d6:	1b9b      	subs	r3, r3, r6
 80092d8:	60a3      	str	r3, [r4, #8]
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	4433      	add	r3, r6
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	2000      	movs	r0, #0
 80092e2:	e7db      	b.n	800929c <__ssputs_r+0x58>
 80092e4:	462a      	mov	r2, r5
 80092e6:	f000 fb7b 	bl	80099e0 <_realloc_r>
 80092ea:	4606      	mov	r6, r0
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1e1      	bne.n	80092b4 <__ssputs_r+0x70>
 80092f0:	6921      	ldr	r1, [r4, #16]
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7ff fec6 	bl	8009084 <_free_r>
 80092f8:	e7c7      	b.n	800928a <__ssputs_r+0x46>
	...

080092fc <_svfiprintf_r>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	4698      	mov	r8, r3
 8009302:	898b      	ldrh	r3, [r1, #12]
 8009304:	061b      	lsls	r3, r3, #24
 8009306:	b09d      	sub	sp, #116	; 0x74
 8009308:	4607      	mov	r7, r0
 800930a:	460d      	mov	r5, r1
 800930c:	4614      	mov	r4, r2
 800930e:	d50e      	bpl.n	800932e <_svfiprintf_r+0x32>
 8009310:	690b      	ldr	r3, [r1, #16]
 8009312:	b963      	cbnz	r3, 800932e <_svfiprintf_r+0x32>
 8009314:	2140      	movs	r1, #64	; 0x40
 8009316:	f7ff ff21 	bl	800915c <_malloc_r>
 800931a:	6028      	str	r0, [r5, #0]
 800931c:	6128      	str	r0, [r5, #16]
 800931e:	b920      	cbnz	r0, 800932a <_svfiprintf_r+0x2e>
 8009320:	230c      	movs	r3, #12
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	e0d1      	b.n	80094ce <_svfiprintf_r+0x1d2>
 800932a:	2340      	movs	r3, #64	; 0x40
 800932c:	616b      	str	r3, [r5, #20]
 800932e:	2300      	movs	r3, #0
 8009330:	9309      	str	r3, [sp, #36]	; 0x24
 8009332:	2320      	movs	r3, #32
 8009334:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009338:	f8cd 800c 	str.w	r8, [sp, #12]
 800933c:	2330      	movs	r3, #48	; 0x30
 800933e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094e8 <_svfiprintf_r+0x1ec>
 8009342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009346:	f04f 0901 	mov.w	r9, #1
 800934a:	4623      	mov	r3, r4
 800934c:	469a      	mov	sl, r3
 800934e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009352:	b10a      	cbz	r2, 8009358 <_svfiprintf_r+0x5c>
 8009354:	2a25      	cmp	r2, #37	; 0x25
 8009356:	d1f9      	bne.n	800934c <_svfiprintf_r+0x50>
 8009358:	ebba 0b04 	subs.w	fp, sl, r4
 800935c:	d00b      	beq.n	8009376 <_svfiprintf_r+0x7a>
 800935e:	465b      	mov	r3, fp
 8009360:	4622      	mov	r2, r4
 8009362:	4629      	mov	r1, r5
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ff6d 	bl	8009244 <__ssputs_r>
 800936a:	3001      	adds	r0, #1
 800936c:	f000 80aa 	beq.w	80094c4 <_svfiprintf_r+0x1c8>
 8009370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009372:	445a      	add	r2, fp
 8009374:	9209      	str	r2, [sp, #36]	; 0x24
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 80a2 	beq.w	80094c4 <_svfiprintf_r+0x1c8>
 8009380:	2300      	movs	r3, #0
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800938a:	f10a 0a01 	add.w	sl, sl, #1
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009396:	931a      	str	r3, [sp, #104]	; 0x68
 8009398:	4654      	mov	r4, sl
 800939a:	2205      	movs	r2, #5
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	4851      	ldr	r0, [pc, #324]	; (80094e8 <_svfiprintf_r+0x1ec>)
 80093a2:	f7f6 ff25 	bl	80001f0 <memchr>
 80093a6:	9a04      	ldr	r2, [sp, #16]
 80093a8:	b9d8      	cbnz	r0, 80093e2 <_svfiprintf_r+0xe6>
 80093aa:	06d0      	lsls	r0, r2, #27
 80093ac:	bf44      	itt	mi
 80093ae:	2320      	movmi	r3, #32
 80093b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b4:	0711      	lsls	r1, r2, #28
 80093b6:	bf44      	itt	mi
 80093b8:	232b      	movmi	r3, #43	; 0x2b
 80093ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093be:	f89a 3000 	ldrb.w	r3, [sl]
 80093c2:	2b2a      	cmp	r3, #42	; 0x2a
 80093c4:	d015      	beq.n	80093f2 <_svfiprintf_r+0xf6>
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	4654      	mov	r4, sl
 80093ca:	2000      	movs	r0, #0
 80093cc:	f04f 0c0a 	mov.w	ip, #10
 80093d0:	4621      	mov	r1, r4
 80093d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d6:	3b30      	subs	r3, #48	; 0x30
 80093d8:	2b09      	cmp	r3, #9
 80093da:	d94e      	bls.n	800947a <_svfiprintf_r+0x17e>
 80093dc:	b1b0      	cbz	r0, 800940c <_svfiprintf_r+0x110>
 80093de:	9207      	str	r2, [sp, #28]
 80093e0:	e014      	b.n	800940c <_svfiprintf_r+0x110>
 80093e2:	eba0 0308 	sub.w	r3, r0, r8
 80093e6:	fa09 f303 	lsl.w	r3, r9, r3
 80093ea:	4313      	orrs	r3, r2
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	46a2      	mov	sl, r4
 80093f0:	e7d2      	b.n	8009398 <_svfiprintf_r+0x9c>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	1d19      	adds	r1, r3, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	9103      	str	r1, [sp, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfbb      	ittet	lt
 80093fe:	425b      	neglt	r3, r3
 8009400:	f042 0202 	orrlt.w	r2, r2, #2
 8009404:	9307      	strge	r3, [sp, #28]
 8009406:	9307      	strlt	r3, [sp, #28]
 8009408:	bfb8      	it	lt
 800940a:	9204      	strlt	r2, [sp, #16]
 800940c:	7823      	ldrb	r3, [r4, #0]
 800940e:	2b2e      	cmp	r3, #46	; 0x2e
 8009410:	d10c      	bne.n	800942c <_svfiprintf_r+0x130>
 8009412:	7863      	ldrb	r3, [r4, #1]
 8009414:	2b2a      	cmp	r3, #42	; 0x2a
 8009416:	d135      	bne.n	8009484 <_svfiprintf_r+0x188>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	9203      	str	r2, [sp, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	bfb8      	it	lt
 8009424:	f04f 33ff 	movlt.w	r3, #4294967295
 8009428:	3402      	adds	r4, #2
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094f8 <_svfiprintf_r+0x1fc>
 8009430:	7821      	ldrb	r1, [r4, #0]
 8009432:	2203      	movs	r2, #3
 8009434:	4650      	mov	r0, sl
 8009436:	f7f6 fedb 	bl	80001f0 <memchr>
 800943a:	b140      	cbz	r0, 800944e <_svfiprintf_r+0x152>
 800943c:	2340      	movs	r3, #64	; 0x40
 800943e:	eba0 000a 	sub.w	r0, r0, sl
 8009442:	fa03 f000 	lsl.w	r0, r3, r0
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	4303      	orrs	r3, r0
 800944a:	3401      	adds	r4, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4826      	ldr	r0, [pc, #152]	; (80094ec <_svfiprintf_r+0x1f0>)
 8009454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009458:	2206      	movs	r2, #6
 800945a:	f7f6 fec9 	bl	80001f0 <memchr>
 800945e:	2800      	cmp	r0, #0
 8009460:	d038      	beq.n	80094d4 <_svfiprintf_r+0x1d8>
 8009462:	4b23      	ldr	r3, [pc, #140]	; (80094f0 <_svfiprintf_r+0x1f4>)
 8009464:	bb1b      	cbnz	r3, 80094ae <_svfiprintf_r+0x1b2>
 8009466:	9b03      	ldr	r3, [sp, #12]
 8009468:	3307      	adds	r3, #7
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	3308      	adds	r3, #8
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009474:	4433      	add	r3, r6
 8009476:	9309      	str	r3, [sp, #36]	; 0x24
 8009478:	e767      	b.n	800934a <_svfiprintf_r+0x4e>
 800947a:	fb0c 3202 	mla	r2, ip, r2, r3
 800947e:	460c      	mov	r4, r1
 8009480:	2001      	movs	r0, #1
 8009482:	e7a5      	b.n	80093d0 <_svfiprintf_r+0xd4>
 8009484:	2300      	movs	r3, #0
 8009486:	3401      	adds	r4, #1
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	4619      	mov	r1, r3
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4620      	mov	r0, r4
 8009492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009496:	3a30      	subs	r2, #48	; 0x30
 8009498:	2a09      	cmp	r2, #9
 800949a:	d903      	bls.n	80094a4 <_svfiprintf_r+0x1a8>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0c5      	beq.n	800942c <_svfiprintf_r+0x130>
 80094a0:	9105      	str	r1, [sp, #20]
 80094a2:	e7c3      	b.n	800942c <_svfiprintf_r+0x130>
 80094a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a8:	4604      	mov	r4, r0
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7f0      	b.n	8009490 <_svfiprintf_r+0x194>
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	462a      	mov	r2, r5
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <_svfiprintf_r+0x1f8>)
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	4638      	mov	r0, r7
 80094ba:	f3af 8000 	nop.w
 80094be:	1c42      	adds	r2, r0, #1
 80094c0:	4606      	mov	r6, r0
 80094c2:	d1d6      	bne.n	8009472 <_svfiprintf_r+0x176>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	065b      	lsls	r3, r3, #25
 80094c8:	f53f af2c 	bmi.w	8009324 <_svfiprintf_r+0x28>
 80094cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ce:	b01d      	add	sp, #116	; 0x74
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	ab03      	add	r3, sp, #12
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	462a      	mov	r2, r5
 80094da:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <_svfiprintf_r+0x1f8>)
 80094dc:	a904      	add	r1, sp, #16
 80094de:	4638      	mov	r0, r7
 80094e0:	f000 f87a 	bl	80095d8 <_printf_i>
 80094e4:	e7eb      	b.n	80094be <_svfiprintf_r+0x1c2>
 80094e6:	bf00      	nop
 80094e8:	08009c2c 	.word	0x08009c2c
 80094ec:	08009c36 	.word	0x08009c36
 80094f0:	00000000 	.word	0x00000000
 80094f4:	08009245 	.word	0x08009245
 80094f8:	08009c32 	.word	0x08009c32

080094fc <_printf_common>:
 80094fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	4616      	mov	r6, r2
 8009502:	4699      	mov	r9, r3
 8009504:	688a      	ldr	r2, [r1, #8]
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800950c:	4293      	cmp	r3, r2
 800950e:	bfb8      	it	lt
 8009510:	4613      	movlt	r3, r2
 8009512:	6033      	str	r3, [r6, #0]
 8009514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009518:	4607      	mov	r7, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b10a      	cbz	r2, 8009522 <_printf_common+0x26>
 800951e:	3301      	adds	r3, #1
 8009520:	6033      	str	r3, [r6, #0]
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	0699      	lsls	r1, r3, #26
 8009526:	bf42      	ittt	mi
 8009528:	6833      	ldrmi	r3, [r6, #0]
 800952a:	3302      	addmi	r3, #2
 800952c:	6033      	strmi	r3, [r6, #0]
 800952e:	6825      	ldr	r5, [r4, #0]
 8009530:	f015 0506 	ands.w	r5, r5, #6
 8009534:	d106      	bne.n	8009544 <_printf_common+0x48>
 8009536:	f104 0a19 	add.w	sl, r4, #25
 800953a:	68e3      	ldr	r3, [r4, #12]
 800953c:	6832      	ldr	r2, [r6, #0]
 800953e:	1a9b      	subs	r3, r3, r2
 8009540:	42ab      	cmp	r3, r5
 8009542:	dc26      	bgt.n	8009592 <_printf_common+0x96>
 8009544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009548:	1e13      	subs	r3, r2, #0
 800954a:	6822      	ldr	r2, [r4, #0]
 800954c:	bf18      	it	ne
 800954e:	2301      	movne	r3, #1
 8009550:	0692      	lsls	r2, r2, #26
 8009552:	d42b      	bmi.n	80095ac <_printf_common+0xb0>
 8009554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009558:	4649      	mov	r1, r9
 800955a:	4638      	mov	r0, r7
 800955c:	47c0      	blx	r8
 800955e:	3001      	adds	r0, #1
 8009560:	d01e      	beq.n	80095a0 <_printf_common+0xa4>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	68e5      	ldr	r5, [r4, #12]
 8009566:	6832      	ldr	r2, [r6, #0]
 8009568:	f003 0306 	and.w	r3, r3, #6
 800956c:	2b04      	cmp	r3, #4
 800956e:	bf08      	it	eq
 8009570:	1aad      	subeq	r5, r5, r2
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	6922      	ldr	r2, [r4, #16]
 8009576:	bf0c      	ite	eq
 8009578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800957c:	2500      	movne	r5, #0
 800957e:	4293      	cmp	r3, r2
 8009580:	bfc4      	itt	gt
 8009582:	1a9b      	subgt	r3, r3, r2
 8009584:	18ed      	addgt	r5, r5, r3
 8009586:	2600      	movs	r6, #0
 8009588:	341a      	adds	r4, #26
 800958a:	42b5      	cmp	r5, r6
 800958c:	d11a      	bne.n	80095c4 <_printf_common+0xc8>
 800958e:	2000      	movs	r0, #0
 8009590:	e008      	b.n	80095a4 <_printf_common+0xa8>
 8009592:	2301      	movs	r3, #1
 8009594:	4652      	mov	r2, sl
 8009596:	4649      	mov	r1, r9
 8009598:	4638      	mov	r0, r7
 800959a:	47c0      	blx	r8
 800959c:	3001      	adds	r0, #1
 800959e:	d103      	bne.n	80095a8 <_printf_common+0xac>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	3501      	adds	r5, #1
 80095aa:	e7c6      	b.n	800953a <_printf_common+0x3e>
 80095ac:	18e1      	adds	r1, r4, r3
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	2030      	movs	r0, #48	; 0x30
 80095b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095b6:	4422      	add	r2, r4
 80095b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095c0:	3302      	adds	r3, #2
 80095c2:	e7c7      	b.n	8009554 <_printf_common+0x58>
 80095c4:	2301      	movs	r3, #1
 80095c6:	4622      	mov	r2, r4
 80095c8:	4649      	mov	r1, r9
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d0e6      	beq.n	80095a0 <_printf_common+0xa4>
 80095d2:	3601      	adds	r6, #1
 80095d4:	e7d9      	b.n	800958a <_printf_common+0x8e>
	...

080095d8 <_printf_i>:
 80095d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	7e0f      	ldrb	r7, [r1, #24]
 80095de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095e0:	2f78      	cmp	r7, #120	; 0x78
 80095e2:	4691      	mov	r9, r2
 80095e4:	4680      	mov	r8, r0
 80095e6:	460c      	mov	r4, r1
 80095e8:	469a      	mov	sl, r3
 80095ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095ee:	d807      	bhi.n	8009600 <_printf_i+0x28>
 80095f0:	2f62      	cmp	r7, #98	; 0x62
 80095f2:	d80a      	bhi.n	800960a <_printf_i+0x32>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	f000 80d8 	beq.w	80097aa <_printf_i+0x1d2>
 80095fa:	2f58      	cmp	r7, #88	; 0x58
 80095fc:	f000 80a3 	beq.w	8009746 <_printf_i+0x16e>
 8009600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009608:	e03a      	b.n	8009680 <_printf_i+0xa8>
 800960a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800960e:	2b15      	cmp	r3, #21
 8009610:	d8f6      	bhi.n	8009600 <_printf_i+0x28>
 8009612:	a101      	add	r1, pc, #4	; (adr r1, 8009618 <_printf_i+0x40>)
 8009614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009618:	08009671 	.word	0x08009671
 800961c:	08009685 	.word	0x08009685
 8009620:	08009601 	.word	0x08009601
 8009624:	08009601 	.word	0x08009601
 8009628:	08009601 	.word	0x08009601
 800962c:	08009601 	.word	0x08009601
 8009630:	08009685 	.word	0x08009685
 8009634:	08009601 	.word	0x08009601
 8009638:	08009601 	.word	0x08009601
 800963c:	08009601 	.word	0x08009601
 8009640:	08009601 	.word	0x08009601
 8009644:	08009791 	.word	0x08009791
 8009648:	080096b5 	.word	0x080096b5
 800964c:	08009773 	.word	0x08009773
 8009650:	08009601 	.word	0x08009601
 8009654:	08009601 	.word	0x08009601
 8009658:	080097b3 	.word	0x080097b3
 800965c:	08009601 	.word	0x08009601
 8009660:	080096b5 	.word	0x080096b5
 8009664:	08009601 	.word	0x08009601
 8009668:	08009601 	.word	0x08009601
 800966c:	0800977b 	.word	0x0800977b
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	1d1a      	adds	r2, r3, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	602a      	str	r2, [r5, #0]
 8009678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800967c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009680:	2301      	movs	r3, #1
 8009682:	e0a3      	b.n	80097cc <_printf_i+0x1f4>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	6829      	ldr	r1, [r5, #0]
 8009688:	0606      	lsls	r6, r0, #24
 800968a:	f101 0304 	add.w	r3, r1, #4
 800968e:	d50a      	bpl.n	80096a6 <_printf_i+0xce>
 8009690:	680e      	ldr	r6, [r1, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	2e00      	cmp	r6, #0
 8009696:	da03      	bge.n	80096a0 <_printf_i+0xc8>
 8009698:	232d      	movs	r3, #45	; 0x2d
 800969a:	4276      	negs	r6, r6
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	485e      	ldr	r0, [pc, #376]	; (800981c <_printf_i+0x244>)
 80096a2:	230a      	movs	r3, #10
 80096a4:	e019      	b.n	80096da <_printf_i+0x102>
 80096a6:	680e      	ldr	r6, [r1, #0]
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096ae:	bf18      	it	ne
 80096b0:	b236      	sxthne	r6, r6
 80096b2:	e7ef      	b.n	8009694 <_printf_i+0xbc>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	1d19      	adds	r1, r3, #4
 80096ba:	6029      	str	r1, [r5, #0]
 80096bc:	0601      	lsls	r1, r0, #24
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0xec>
 80096c0:	681e      	ldr	r6, [r3, #0]
 80096c2:	e002      	b.n	80096ca <_printf_i+0xf2>
 80096c4:	0646      	lsls	r6, r0, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0xe8>
 80096c8:	881e      	ldrh	r6, [r3, #0]
 80096ca:	4854      	ldr	r0, [pc, #336]	; (800981c <_printf_i+0x244>)
 80096cc:	2f6f      	cmp	r7, #111	; 0x6f
 80096ce:	bf0c      	ite	eq
 80096d0:	2308      	moveq	r3, #8
 80096d2:	230a      	movne	r3, #10
 80096d4:	2100      	movs	r1, #0
 80096d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096da:	6865      	ldr	r5, [r4, #4]
 80096dc:	60a5      	str	r5, [r4, #8]
 80096de:	2d00      	cmp	r5, #0
 80096e0:	bfa2      	ittt	ge
 80096e2:	6821      	ldrge	r1, [r4, #0]
 80096e4:	f021 0104 	bicge.w	r1, r1, #4
 80096e8:	6021      	strge	r1, [r4, #0]
 80096ea:	b90e      	cbnz	r6, 80096f0 <_printf_i+0x118>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	d04d      	beq.n	800978c <_printf_i+0x1b4>
 80096f0:	4615      	mov	r5, r2
 80096f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096f6:	fb03 6711 	mls	r7, r3, r1, r6
 80096fa:	5dc7      	ldrb	r7, [r0, r7]
 80096fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009700:	4637      	mov	r7, r6
 8009702:	42bb      	cmp	r3, r7
 8009704:	460e      	mov	r6, r1
 8009706:	d9f4      	bls.n	80096f2 <_printf_i+0x11a>
 8009708:	2b08      	cmp	r3, #8
 800970a:	d10b      	bne.n	8009724 <_printf_i+0x14c>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	07de      	lsls	r6, r3, #31
 8009710:	d508      	bpl.n	8009724 <_printf_i+0x14c>
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	6861      	ldr	r1, [r4, #4]
 8009716:	4299      	cmp	r1, r3
 8009718:	bfde      	ittt	le
 800971a:	2330      	movle	r3, #48	; 0x30
 800971c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009720:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009724:	1b52      	subs	r2, r2, r5
 8009726:	6122      	str	r2, [r4, #16]
 8009728:	f8cd a000 	str.w	sl, [sp]
 800972c:	464b      	mov	r3, r9
 800972e:	aa03      	add	r2, sp, #12
 8009730:	4621      	mov	r1, r4
 8009732:	4640      	mov	r0, r8
 8009734:	f7ff fee2 	bl	80094fc <_printf_common>
 8009738:	3001      	adds	r0, #1
 800973a:	d14c      	bne.n	80097d6 <_printf_i+0x1fe>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	b004      	add	sp, #16
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	4835      	ldr	r0, [pc, #212]	; (800981c <_printf_i+0x244>)
 8009748:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800974c:	6829      	ldr	r1, [r5, #0]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	f851 6b04 	ldr.w	r6, [r1], #4
 8009754:	6029      	str	r1, [r5, #0]
 8009756:	061d      	lsls	r5, r3, #24
 8009758:	d514      	bpl.n	8009784 <_printf_i+0x1ac>
 800975a:	07df      	lsls	r7, r3, #31
 800975c:	bf44      	itt	mi
 800975e:	f043 0320 	orrmi.w	r3, r3, #32
 8009762:	6023      	strmi	r3, [r4, #0]
 8009764:	b91e      	cbnz	r6, 800976e <_printf_i+0x196>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	f023 0320 	bic.w	r3, r3, #32
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	2310      	movs	r3, #16
 8009770:	e7b0      	b.n	80096d4 <_printf_i+0xfc>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f043 0320 	orr.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	2378      	movs	r3, #120	; 0x78
 800977c:	4828      	ldr	r0, [pc, #160]	; (8009820 <_printf_i+0x248>)
 800977e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009782:	e7e3      	b.n	800974c <_printf_i+0x174>
 8009784:	0659      	lsls	r1, r3, #25
 8009786:	bf48      	it	mi
 8009788:	b2b6      	uxthmi	r6, r6
 800978a:	e7e6      	b.n	800975a <_printf_i+0x182>
 800978c:	4615      	mov	r5, r2
 800978e:	e7bb      	b.n	8009708 <_printf_i+0x130>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	6826      	ldr	r6, [r4, #0]
 8009794:	6961      	ldr	r1, [r4, #20]
 8009796:	1d18      	adds	r0, r3, #4
 8009798:	6028      	str	r0, [r5, #0]
 800979a:	0635      	lsls	r5, r6, #24
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	d501      	bpl.n	80097a4 <_printf_i+0x1cc>
 80097a0:	6019      	str	r1, [r3, #0]
 80097a2:	e002      	b.n	80097aa <_printf_i+0x1d2>
 80097a4:	0670      	lsls	r0, r6, #25
 80097a6:	d5fb      	bpl.n	80097a0 <_printf_i+0x1c8>
 80097a8:	8019      	strh	r1, [r3, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	4615      	mov	r5, r2
 80097b0:	e7ba      	b.n	8009728 <_printf_i+0x150>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	1d1a      	adds	r2, r3, #4
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	681d      	ldr	r5, [r3, #0]
 80097ba:	6862      	ldr	r2, [r4, #4]
 80097bc:	2100      	movs	r1, #0
 80097be:	4628      	mov	r0, r5
 80097c0:	f7f6 fd16 	bl	80001f0 <memchr>
 80097c4:	b108      	cbz	r0, 80097ca <_printf_i+0x1f2>
 80097c6:	1b40      	subs	r0, r0, r5
 80097c8:	6060      	str	r0, [r4, #4]
 80097ca:	6863      	ldr	r3, [r4, #4]
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	2300      	movs	r3, #0
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d4:	e7a8      	b.n	8009728 <_printf_i+0x150>
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	462a      	mov	r2, r5
 80097da:	4649      	mov	r1, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	47d0      	blx	sl
 80097e0:	3001      	adds	r0, #1
 80097e2:	d0ab      	beq.n	800973c <_printf_i+0x164>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	079b      	lsls	r3, r3, #30
 80097e8:	d413      	bmi.n	8009812 <_printf_i+0x23a>
 80097ea:	68e0      	ldr	r0, [r4, #12]
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	4298      	cmp	r0, r3
 80097f0:	bfb8      	it	lt
 80097f2:	4618      	movlt	r0, r3
 80097f4:	e7a4      	b.n	8009740 <_printf_i+0x168>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4632      	mov	r2, r6
 80097fa:	4649      	mov	r1, r9
 80097fc:	4640      	mov	r0, r8
 80097fe:	47d0      	blx	sl
 8009800:	3001      	adds	r0, #1
 8009802:	d09b      	beq.n	800973c <_printf_i+0x164>
 8009804:	3501      	adds	r5, #1
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	9903      	ldr	r1, [sp, #12]
 800980a:	1a5b      	subs	r3, r3, r1
 800980c:	42ab      	cmp	r3, r5
 800980e:	dcf2      	bgt.n	80097f6 <_printf_i+0x21e>
 8009810:	e7eb      	b.n	80097ea <_printf_i+0x212>
 8009812:	2500      	movs	r5, #0
 8009814:	f104 0619 	add.w	r6, r4, #25
 8009818:	e7f5      	b.n	8009806 <_printf_i+0x22e>
 800981a:	bf00      	nop
 800981c:	08009c3d 	.word	0x08009c3d
 8009820:	08009c4e 	.word	0x08009c4e

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_sbrk_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 fb86 	bl	8001f40 <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20001858 	.word	0x20001858

08009844 <__sread>:
 8009844:	b510      	push	{r4, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	f000 f8f8 	bl	8009a40 <_read_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	bfab      	itete	ge
 8009854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009856:	89a3      	ldrhlt	r3, [r4, #12]
 8009858:	181b      	addge	r3, r3, r0
 800985a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800985e:	bfac      	ite	ge
 8009860:	6563      	strge	r3, [r4, #84]	; 0x54
 8009862:	81a3      	strhlt	r3, [r4, #12]
 8009864:	bd10      	pop	{r4, pc}

08009866 <__swrite>:
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	461f      	mov	r7, r3
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	05db      	lsls	r3, r3, #23
 8009870:	4605      	mov	r5, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4616      	mov	r6, r2
 8009876:	d505      	bpl.n	8009884 <__swrite+0x1e>
 8009878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987c:	2302      	movs	r3, #2
 800987e:	2200      	movs	r2, #0
 8009880:	f000 f868 	bl	8009954 <_lseek_r>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	4632      	mov	r2, r6
 8009892:	463b      	mov	r3, r7
 8009894:	4628      	mov	r0, r5
 8009896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	f000 b817 	b.w	80098cc <_write_r>

0800989e <__sseek>:
 800989e:	b510      	push	{r4, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a6:	f000 f855 	bl	8009954 <_lseek_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	bf15      	itete	ne
 80098b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strheq	r3, [r4, #12]
 80098bc:	bf18      	it	ne
 80098be:	81a3      	strhne	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__sclose>:
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 b813 	b.w	80098f0 <_close_r>
	...

080098cc <_write_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4d07      	ldr	r5, [pc, #28]	; (80098ec <_write_r+0x20>)
 80098d0:	4604      	mov	r4, r0
 80098d2:	4608      	mov	r0, r1
 80098d4:	4611      	mov	r1, r2
 80098d6:	2200      	movs	r2, #0
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	f7f8 fadf 	bl	8001e9e <_write>
 80098e0:	1c43      	adds	r3, r0, #1
 80098e2:	d102      	bne.n	80098ea <_write_r+0x1e>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	b103      	cbz	r3, 80098ea <_write_r+0x1e>
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	bd38      	pop	{r3, r4, r5, pc}
 80098ec:	20001858 	.word	0x20001858

080098f0 <_close_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4d06      	ldr	r5, [pc, #24]	; (800990c <_close_r+0x1c>)
 80098f4:	2300      	movs	r3, #0
 80098f6:	4604      	mov	r4, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	602b      	str	r3, [r5, #0]
 80098fc:	f7f8 faeb 	bl	8001ed6 <_close>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_close_r+0x1a>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_close_r+0x1a>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20001858 	.word	0x20001858

08009910 <_fstat_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_fstat_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f8 fae6 	bl	8001eee <_fstat>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_fstat_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_fstat_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	20001858 	.word	0x20001858

08009934 <_isatty_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	; (8009950 <_isatty_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f8 fae5 	bl	8001f0e <_isatty>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_isatty_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_isatty_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20001858 	.word	0x20001858

08009954 <_lseek_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d07      	ldr	r5, [pc, #28]	; (8009974 <_lseek_r+0x20>)
 8009958:	4604      	mov	r4, r0
 800995a:	4608      	mov	r0, r1
 800995c:	4611      	mov	r1, r2
 800995e:	2200      	movs	r2, #0
 8009960:	602a      	str	r2, [r5, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f7f8 fade 	bl	8001f24 <_lseek>
 8009968:	1c43      	adds	r3, r0, #1
 800996a:	d102      	bne.n	8009972 <_lseek_r+0x1e>
 800996c:	682b      	ldr	r3, [r5, #0]
 800996e:	b103      	cbz	r3, 8009972 <_lseek_r+0x1e>
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	bd38      	pop	{r3, r4, r5, pc}
 8009974:	20001858 	.word	0x20001858

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800998e:	4291      	cmp	r1, r2
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <memmove>:
 8009994:	4288      	cmp	r0, r1
 8009996:	b510      	push	{r4, lr}
 8009998:	eb01 0402 	add.w	r4, r1, r2
 800999c:	d902      	bls.n	80099a4 <memmove+0x10>
 800999e:	4284      	cmp	r4, r0
 80099a0:	4623      	mov	r3, r4
 80099a2:	d807      	bhi.n	80099b4 <memmove+0x20>
 80099a4:	1e43      	subs	r3, r0, #1
 80099a6:	42a1      	cmp	r1, r4
 80099a8:	d008      	beq.n	80099bc <memmove+0x28>
 80099aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b2:	e7f8      	b.n	80099a6 <memmove+0x12>
 80099b4:	4402      	add	r2, r0
 80099b6:	4601      	mov	r1, r0
 80099b8:	428a      	cmp	r2, r1
 80099ba:	d100      	bne.n	80099be <memmove+0x2a>
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099c6:	e7f7      	b.n	80099b8 <memmove+0x24>

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_lock+0x8>)
 80099ca:	f7ff baf3 	b.w	8008fb4 <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	2000184c 	.word	0x2000184c

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	; (80099dc <__malloc_unlock+0x8>)
 80099d6:	f7ff baee 	b.w	8008fb6 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	2000184c 	.word	0x2000184c

080099e0 <_realloc_r>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	4680      	mov	r8, r0
 80099e6:	4614      	mov	r4, r2
 80099e8:	460e      	mov	r6, r1
 80099ea:	b921      	cbnz	r1, 80099f6 <_realloc_r+0x16>
 80099ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	4611      	mov	r1, r2
 80099f2:	f7ff bbb3 	b.w	800915c <_malloc_r>
 80099f6:	b92a      	cbnz	r2, 8009a04 <_realloc_r+0x24>
 80099f8:	f7ff fb44 	bl	8009084 <_free_r>
 80099fc:	4625      	mov	r5, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	f000 f82e 	bl	8009a64 <_malloc_usable_size_r>
 8009a08:	4284      	cmp	r4, r0
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	d802      	bhi.n	8009a14 <_realloc_r+0x34>
 8009a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a12:	d812      	bhi.n	8009a3a <_realloc_r+0x5a>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4640      	mov	r0, r8
 8009a18:	f7ff fba0 	bl	800915c <_malloc_r>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0ed      	beq.n	80099fe <_realloc_r+0x1e>
 8009a22:	42bc      	cmp	r4, r7
 8009a24:	4622      	mov	r2, r4
 8009a26:	4631      	mov	r1, r6
 8009a28:	bf28      	it	cs
 8009a2a:	463a      	movcs	r2, r7
 8009a2c:	f7ff ffa4 	bl	8009978 <memcpy>
 8009a30:	4631      	mov	r1, r6
 8009a32:	4640      	mov	r0, r8
 8009a34:	f7ff fb26 	bl	8009084 <_free_r>
 8009a38:	e7e1      	b.n	80099fe <_realloc_r+0x1e>
 8009a3a:	4635      	mov	r5, r6
 8009a3c:	e7df      	b.n	80099fe <_realloc_r+0x1e>
	...

08009a40 <_read_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d07      	ldr	r5, [pc, #28]	; (8009a60 <_read_r+0x20>)
 8009a44:	4604      	mov	r4, r0
 8009a46:	4608      	mov	r0, r1
 8009a48:	4611      	mov	r1, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f8 fa08 	bl	8001e64 <_read>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_read_r+0x1e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_read_r+0x1e>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	20001858 	.word	0x20001858

08009a64 <_malloc_usable_size_r>:
 8009a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a68:	1f18      	subs	r0, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfbc      	itt	lt
 8009a6e:	580b      	ldrlt	r3, [r1, r0]
 8009a70:	18c0      	addlt	r0, r0, r3
 8009a72:	4770      	bx	lr

08009a74 <_init>:
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a76:	bf00      	nop
 8009a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7a:	bc08      	pop	{r3}
 8009a7c:	469e      	mov	lr, r3
 8009a7e:	4770      	bx	lr

08009a80 <_fini>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr
